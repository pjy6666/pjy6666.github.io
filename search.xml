<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Servlet+maven+tomcat运用（超详细）</title>
      <link href="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/"/>
      <url>/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>web服务器：写的网站在web服务器上运行，相当于容器。如tomcat</p><h1 id="二、tomcat"><a href="#二、tomcat" class="headerlink" title="二、tomcat"></a>二、tomcat</h1><h2 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h2><ul><li>先看的maven</li></ul><h3 id="1-启动"><a href="#1-启动" class="headerlink" title="1.启动"></a>1.启动</h3><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903160713332.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903160713332.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903160713332"><p>正常关闭比较好，涉及资源释放</p><h3 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2.修改配置"></a>2.修改配置</h3><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903161548750.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903161548750.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903161548750"><ul><li>如果打不开，原因可能是<strong>没启动tomcat</strong>。而且修改了之后需要重新启动tomcat。</li><li>tomcat是用java写的，所以电脑要配置java_home</li></ul><h3 id="3-部署项目"><a href="#3-部署项目" class="headerlink" title="3.部署项目"></a>3.部署项目</h3><p>把文件夹or war包复制到webapps里</p><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903182832116.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903182832116.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903182832116"><h3 id="4-IDEA中创建maven-web-项目"><a href="#4-IDEA中创建maven-web-项目" class="headerlink" title="4.IDEA中创建maven web 项目"></a>4.IDEA中创建maven web 项目</h3><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903183942522.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903183942522.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903183942522"><h4 id="4-1用骨架建"><a href="#4-1用骨架建" class="headerlink" title="4.1用骨架建"></a>4.1用骨架建</h4><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903184932927.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903184932927.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903184932927"><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903184955400.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903184955400.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903184955400"><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903185057859.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903185057859.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903185057859"><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903185133054.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903185133054.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903185133054"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packageing</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">*war：web项目打包方式</span><br><span class="line">*默认是jar</span><br></pre></td></tr></table></figure><h4 id="4-2不用骨架"><a href="#4-2不用骨架" class="headerlink" title="4.2不用骨架"></a>4.2不用骨架<img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903185706806.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903185706806.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903185706806"></h4><h3 id="5-IDEA中使用tomcat＋部署项目-集成本地"><a href="#5-IDEA中使用tomcat＋部署项目-集成本地" class="headerlink" title="5.IDEA中使用tomcat＋部署项目(集成本地)"></a>5.IDEA中使用tomcat＋部署项目(集成本地)</h3><p>配置tomcat</p><ul><li><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903190207305.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903190207305.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903190207305"></li><li><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903190230124.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903190230124.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903190230124"></li><li>server自己选下载目录</li></ul><p>部署项目到tomcat上</p><ul><li><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903190336591.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903190336591.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903190207305"></li><li><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903190444399.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903190444399.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903190444399"></li><li><p>最后部署失败，，因为名字里有下划线，然后我就把已经部署的项目全去掉了，只加了新创建的项目</p></li></ul><p>启动项目</p><ul><li><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903192251702.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903192251702.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903192251702"></li><li>自动访问到这个地址：</li><li><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903192328484.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903192328484.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903192328484"></li><li>在地址栏输入相对路径a.html即可访问a.html：</li><li><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903192426714.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230903192426714.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230903192426714"></li></ul><h3 id="6-IDEA中用tomcat-maven插件部署项目"><a href="#6-IDEA中用tomcat-maven插件部署项目" class="headerlink" title="6.IDEA中用tomcat-maven插件部署项目"></a>6.IDEA中用tomcat-maven插件部署项目</h3><ul><li><pre><code class="html">//pom.xml中&lt;build&gt;    &lt;plugins&gt;      &lt;plugin&gt;        &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;        &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;        &lt;version&gt;2.2&lt;/version&gt;      &lt;/plugin&gt;      &lt;/plugins&gt;   &lt;/build&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ![image-20230903194033581.png](./Servlet+tomcat+maven运用/image-20230903194033581.png)</span><br><span class="line"></span><br><span class="line">- 如果右键没有&quot;tomcat7:run&quot;，[Maven Helper插件右键没有tomcat7:run 的解决方法_灵sa的博客-CSDN博客](https://blog.csdn.net/qq_48842471/article/details/128524227)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">## 2.maven</span><br><span class="line"></span><br><span class="line">![image-20230903164445383](./Servlet+tomcat+maven运用/image-20230903164445383.png)</span><br><span class="line"></span><br><span class="line">### 1.maven默认的仓库地址![image-20230903165839085](./Servlet+tomcat+maven运用/image-20230903165839085.png)</span><br><span class="line"></span><br><span class="line">因为在c盘，所以最好自己建一个</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 2.常用命令&quot;mvn xxx&quot;</span><br><span class="line"></span><br><span class="line">- compile：编译</span><br><span class="line">- clean：清理 删除target文件夹</span><br><span class="line">- test：测试</span><br><span class="line">- package：打包 在target文件夹中</span><br><span class="line">- install：安装  下载到本地仓库文件夹</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;./Servlet+tomcat+maven运用/image-20230903171610089.png&quot; alt=&quot;image-20230903171610089&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">在项目目录下用命令</span><br><span class="line"></span><br><span class="line">### 3.maven生命周期</span><br><span class="line"></span><br><span class="line">![image-20230903172000239](./Servlet+tomcat+maven运用/image-20230903172000239.png)</span><br><span class="line"></span><br><span class="line">**同一生命周期内**，才会在执行后便命令时自动把本声明周期内前边的也执行了。E.G.执行install时，会自动执行compile,test,package（体现为多了targe文件夹&amp;jar包等等</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 4.IDEA配置maven</span><br><span class="line"></span><br><span class="line">坐标</span><br><span class="line"></span><br><span class="line">![image-20230903172902923](./Servlet+tomcat+maven运用/image-20230903172902923.png)</span><br><span class="line"></span><br><span class="line">2022版创建maven项目：</span><br><span class="line"></span><br><span class="line">![image-20230903173731442](./Servlet+tomcat+maven运用/image-20230903173731442.png)</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;./Servlet+tomcat+maven运用/image-20230903173757584.png&quot; alt=&quot;image-20230903173757584&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">导入maven文件：</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;./Servlet+tomcat+maven运用/image-20230903174151959.png&quot; alt=&quot;image-20230903174151959&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 5.依赖管理</span><br><span class="line"></span><br><span class="line">导包：</span><br><span class="line"></span><br><span class="line">在pom.xml中写&lt;u&gt;**依赖坐标**&lt;/u&gt;（就不用自己导包了）</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;./Servlet+tomcat+maven运用/image-20230903174930600.png&quot; alt=&quot;image-20230903174930600&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">点刷新开始下载【写完or删完刷新】![image-20230903175008024](./Servlet+tomcat+maven运用/image-20230903175008024.png)</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">依赖范围：</span><br><span class="line"></span><br><span class="line">![image-20230903175830230](./Servlet+tomcat+maven运用/image-20230903175830230.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 三、servlet</span><br><span class="line"></span><br><span class="line">## 1.概念</span><br><span class="line"></span><br><span class="line">- 运行在服务器端的小程序。servlet是一个&lt;u&gt;接口&lt;/u&gt;，定义了Java类被浏览器访问（tomcat识别）的规则</span><br><span class="line">- 是javaEE规范之一（规范=&gt;接口）</span><br><span class="line">- 定义servlet类实现servlet接口，并由web服务器运行servlet</span><br><span class="line">- 由tomcat创建，调用</span><br><span class="line">- **看javaEE文档**</span><br><span class="line">- 学java看JDK文档</span><br><span class="line"></span><br><span class="line">## 2.快速入门</span><br><span class="line"></span><br><span class="line">1.创建web项目</span><br><span class="line"></span><br><span class="line">- 打开IDEA-&gt;用骨架建【之前学的】</span><br><span class="line"></span><br><span class="line">- 部署，tomcat-maven插件【之前学的】</span><br><span class="line"></span><br></pre></td></tr></table></figure>&lt;build&gt;    &lt;plugins&gt;      &lt;plugin&gt;        &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;        &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;        &lt;version&gt;2.2&lt;/version&gt;      &lt;/plugin&gt;      &lt;/plugins&gt;   &lt;/build&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 【新内容】**导入servlet依赖**</span><br><span class="line"></span><br><span class="line">  ```html</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>-  &lt;scope&gt;**provided**&lt;/scope&gt;作用范围仅在编译、测试时。</code></pre></li></ul><ol start="2"><li>定义一个类，<strong>实现Servlet接口</strong>，并重写方法<ul><li><u>ctrl+o:重写父类方法</u></li></ul></li></ol><p>3.在类上方使用@WebServlet注解，配置该Servlet的访问路径</p><p>4.启动项目 并通过3中的路径访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">mport javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * servlet快速入门</span></span><br><span class="line"><span class="comment"> * ①导坐标：在pom.xml中加依赖，maven替人导包</span></span><br><span class="line"><span class="comment"> * ②重写接口所有方法</span></span><br><span class="line"><span class="comment"> * ③写访问路径</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注解,写访问路径</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;<span class="comment">//ctrl+o重写父类方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);<span class="comment">//Servlet接口被访问时，service()会自动执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>p.s若文件夹中无法new JAVA class，可右键</p><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230903231020117" style="zoom:50%;" /><h2 id="3-执行流程"><a href="#3-执行流程" class="headerlink" title="3.执行流程"></a>3.执行流程</h2><p>servlet对象由web服务器创建，并调用方法。</p><h2 id="4-生命周期"><a href="#4-生命周期" class="headerlink" title="4.生命周期"></a>4.生命周期</h2><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905162543769" style="zoom: 67%;" /><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905162631767.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905162631767.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230905162631767"><ul><li>②相当于提前了servlet对象创建的时间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ServletDemo01&quot;, value = &quot;/sy&quot;)</span></span><br><span class="line"><span class="comment">//value==urlPatterns访问路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servletDemo01</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法</span></span><br><span class="line"><span class="comment">     * 1.调用时机：默认情况下，servlet第一次被访问的时候，创建对象并初始化</span></span><br><span class="line"><span class="comment">     * 2.一次</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--init--&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供服务</span></span><br><span class="line"><span class="comment"> * 1.调用时机：每次请求servlet时都会调用</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***service****&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供服务</span></span><br><span class="line"><span class="comment">     * 1.调用时机：内存释放或服务器关闭时，servlet对象会被销毁，调用destroy释放资源</span></span><br><span class="line"><span class="comment">     * 2.一次</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***service****&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：按照“&#x2F;sy”路径访问时（且刷新只调用了service，<strong>init只调用一次</strong>）</p><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905170458009" style="zoom:67%;" /><p>销毁：需要正常关闭–&gt;ctrl+c</p><ul><li>利用terminal启动<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905170705103" style="zoom:50%;" /></li><li>ctrl+c结束 –&gt;调用destroy</li></ul><h2 id="5-servlet方法"><a href="#5-servlet方法" class="headerlink" title="5.servlet方法"></a>5.servlet方法</h2><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905171242093" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>观察可知getServletConfig()返回一个ServletConfig类，且init()形参里有ServletConfig类—-》<strong>想在getServletConfig()里直接用init()类里的局部变量</strong>——–》<strong>扩大其作用域</strong></li><li><ul><li><img src="/2024/08/22/Servlet+tomcat+maven运用/undefined" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/undefined" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905171629861" style="zoom:50%;" /><code>定义私有成员config</code></li><li><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905171652577" style="zoom:50%;" />用形参给私有成员config赋值</li><li><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905171717789" style="zoom:50%;" />返回私有成员</li></ul></li></ul><h2 id="6-servlet体系结构"><a href="#6-servlet体系结构" class="headerlink" title="6.servlet体系结构"></a>6.servlet体系结构</h2><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905172216846" style="zoom: 50%;" /><ul><li>开发B&#x2F;S架构的web项目，都是针对HTTP协议，所以自定义<strong>继承HttpServlet</strong>的Servlet类</li></ul><p>get：</p><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905173053182" style="zoom:50%;" /><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905173104761" style="zoom:50%;" /><p>post：</p><p>①写了个表单利用post方式发送</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/servlet02/Demo02&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905173952234" style="zoom:67%;" /></p><p>③随便写点点提交后，以post的方式访问demo02了。控制台：<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905174105047" style="zoom:67%;" /></p><p>urlPatterns匹配方式</p><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905175406502" style="zoom:67%;" /><h2 id="7-request"><a href="#7-request" class="headerlink" title="7.request"></a>7.request</h2><p><img src="D:\学习资料\javaweb\image-20230905180113156.png" class="lazyload placeholder" data-srcset="D:\学习资料\javaweb\image-20230905180113156.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230905180113156"></p><h3 id="7-1request继承体系"><a href="#7-1request继承体系" class="headerlink" title="7.1request继承体系"></a>7.1request继承体系</h3><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905180239098.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905180239098.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230905180239098"><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905180709056.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905180709056.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230905180709056"><h3 id="7-2获取请求数据"><a href="#7-2获取请求数据" class="headerlink" title="7.2获取请求数据"></a>7.2获取请求数据</h3><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905181824430.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905181824430.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230905181824430"><ul><li><p>get方式获取请求参数：用getQueryString()</p></li><li><p>post方式用输入流</p></li><li><p>request<em><strong>通用的请求参数方法</strong></em>①(在<strong>doPost,doGet都能用</strong>)</p><ul><li><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905184136025.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905184136025.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230905184136025"></li><li>参数是形如“username&#x3D;lihua&amp;hobby&#x3D;1&amp;hobby&#x3D;2”的形式。request把各个分离出来，利用map<strong>集合</strong>(key，value)存储，key数据类型为string，value类型为string[]</li><li><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905184414188.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905184414188.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230905184414188"></li></ul></li></ul><p>1.getParameterMap()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****</span></span><br><span class="line"><span class="comment">         * getParameterMap</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String,String[]&gt; map=request.getParameterMap();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(String key:map.keySet())&#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line"></span><br><span class="line">            String values[]=map.get(key);<span class="comment">//String[]</span></span><br><span class="line">            <span class="keyword">for</span>(String val:values)&#123;</span><br><span class="line">                System.out.print(val+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/servlet02/Demo03&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>music</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>kpop</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>流程：访问a1.html,提交后<img src="/./Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905190820649.png" class="lazyload placeholder" data-srcset="/./Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905190820649.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230905190820649">terminal显示<img src="/./Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905190754281.png" class="lazyload placeholder" data-srcset="/./Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905190754281.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230905190754281"></p><p>2.根据key返回<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905190959501" style="zoom:67%;" /></p><ul><li>get、post<strong>通用请求参数方法②</strong><ul><li>在doPost中调用doGet</li><li><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905191357735.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905191357735.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230905191357735"></li></ul></li></ul><h3 id="7-3请求转发"><a href="#7-3请求转发" class="headerlink" title="7.3请求转发"></a>7.3请求转发</h3><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905200951517" style="zoom: 50%;" /><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230905201108474" style="zoom:50%;" /><h2 id="8-请求参数中文乱码"><a href="#8-请求参数中文乱码" class="headerlink" title="8.请求参数中文乱码"></a>8.请求参数中文乱码</h2><h3 id="8-1GET"><a href="#8-1GET" class="headerlink" title="8.1GET"></a>8.1GET</h3><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905200021643.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905200021643.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230905200021643"><h3 id="8-2POST"><a href="#8-2POST" class="headerlink" title="8.2POST"></a>8.2POST</h3><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905192253199.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905192253199.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230905192253199"><p><strong><u>历史遗留问题：</u></strong></p><p>应该第一行乱码，第二行汉字，但terminal两行一样，且都是不认识的字符，也没搜出来是什么编码方式。。。。。</p><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905200302424.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905200302424.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230905200302424"><p>a1.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/servlet02/Demo04&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>music</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>kpop</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ServletDemo4luanMa&quot;, value = &quot;/Demo04&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo4luanMa</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        String username=request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="comment">//1.把已知的乱码(iso_xxx编码)转换成二进制</span></span><br><span class="line">        <span class="type">byte</span>[] bs =username.getBytes(StandardCharsets.ISO_8859_1);</span><br><span class="line">        <span class="comment">//2.二进制转字符串，new时用字节数组做参数</span></span><br><span class="line">        String s=<span class="keyword">new</span> <span class="title class_">String</span>(bs,StandardCharsets.UTF_8);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-reponse"><a href="#9-reponse" class="headerlink" title="9.reponse"></a>9.reponse</h2><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905201227868.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905201227868.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230905201227868"><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905202109390.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230905202109390.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230905202109390"><h1 id="三、myBatis"><a href="#三、myBatis" class="headerlink" title="三、myBatis"></a>三、myBatis</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><ul><li>一款持久层框架，用于简化JDBC开发<ul><li>持久层：连接数据库的那层代码</li><li>javaEE三层架构：表现层、业务层、持久层</li></ul></li></ul><h2 id="2-快速入门案例"><a href="#2-快速入门案例" class="headerlink" title="2.快速入门案例"></a>2.快速入门案例</h2><img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230917123414520.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230917123414520.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230917123414520"><ul><li><p>1.用的navicat创建了tb_user表，并插入了数据。</p><ul><li><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917185057675" style="zoom:67%;" /></li><li>点上边“DDL”可查看当时创建时的sql（虽然被魔改了</li></ul></li><li><p>2.创建maven项目，pom.xml中各种导依赖</p><ul><li><pre><code class="xml">&lt;dependencies&gt;    &lt;dependency&gt;       &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;        &lt;version&gt;3.5.6&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;5.1.46&lt;/version&gt;    &lt;/dependency&gt;    &lt;!--junit单元测试--&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;3.8.2&lt;/version&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 3.&lt;u&gt;**resources目录下建**&lt;/u&gt;mybatis核心配置文件(mybatis-config.xml)【从官网复制的，然后把property改成自己的信息--数据库连接信息】</span><br><span class="line"></span><br><span class="line">  - 一改property</span><br><span class="line"></span><br><span class="line">  - 二改mappers【加载sql映射文件(别的xml)】</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">    &lt;!DOCTYPE configuration</span><br><span class="line">            PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">            &quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">            &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">                &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">                &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                    &lt;!--数据库连接信息--&gt;</span><br><span class="line">                    &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">                    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql:///mybatis?useSSL=false&quot;/&gt;</span><br><span class="line">                    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                    &lt;property name=&quot;password&quot; value=&quot;666&quot;/&gt;</span><br><span class="line">                &lt;/dataSource&gt;</span><br><span class="line">            &lt;/environment&gt;</span><br><span class="line">        &lt;/environments&gt;</span><br><span class="line">        &lt;mappers&gt;</span><br><span class="line">            &lt;!--加载sql映射文件--&gt;</span><br><span class="line">            &lt;!--因为本xml文件和UserMapper.xml文件在一个目录下∴可以直接写路径写成“UserMapper.xml”--&gt;</span><br><span class="line">            &lt;mapper resource=&quot;UserMapper.xml&quot;/&gt;</span><br><span class="line">        &lt;/mappers&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>4.编写sql映射文件【官网copy的，只改了&lt; mapper&gt;里的东西和标签的属性】</p><ul><li><ul><li><!--命名空间，用于标识，相当于包名--></li><li><!--id是该sql语句的唯一标识，可通过其使用对应sql语句-->  E.G.:xxnamespace.xxid就能唯一标识一个</li><li><!--数据封装成resulType的类型--> 即**返回值类型**</li><li><p>同理&lt; insert&gt;tag内可写insert语句</p></li></ul></li><li><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;!--命名空间，用于标识，相当于包名--&gt;&lt;mapper namespace=&quot;test&quot;&gt;        &lt;!--id是该sql语句的唯一标识，可通过其使用对应sql语句--&gt;        &lt;!--数据封装成resulType的类型--&gt;    &lt;select id=&quot;selectAll&quot; resultType=&quot;com.pojo.User&quot;&gt;        select * from tb_user ;    &lt;/select&gt;&lt;/mapper&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 5.编码</span><br><span class="line"></span><br><span class="line">  - ①定义pojo类：java目录下new类，写“com.pojp.User”--&gt;IDEA就给**创好了包和类**</span><br><span class="line"></span><br><span class="line">    - 根据数据库表的字段写User类的属性</span><br><span class="line">    - tips：**&lt;u&gt;alt+鼠标下划一个区域就能选中一条线之后的所有内容&lt;/u&gt;**【可方便删</span><br><span class="line">      - &lt;img src=&quot;./Servlet+tomcat+maven运用/image-20230917190732065.png&quot; alt=&quot;image-20230917190732065&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line">      - 也可实现同时写多行&lt;img src=&quot;./Servlet+tomcat+maven运用/image-20230917190822768.png&quot; alt=&quot;image-20230917190822768&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">  - 在“com.demo.java”路径new一个测试类，</span><br><span class="line"></span><br><span class="line">  - +②加载核心配置文件，获取SqlSessionFactory对象【官网copy</span><br><span class="line"></span><br><span class="line">    - 因为mybatis-config.xml在resources路径下，所以可以直接写文件名</span><br><span class="line"></span><br><span class="line">    - ```java</span><br><span class="line">      //1.加载mybatis核心配置文件，获取SqlSessionFactory对象（从官网复制的</span><br><span class="line">      String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line">      InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">      SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>③获取sqlSession对象（可用于执行sql语句</p><ul><li><pre><code class="java">SqlSession sqlSession=sqlSessionFactory.openSession();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ④执行sql语句</span><br><span class="line"></span><br><span class="line">  - ***alt+enter自动引导，即等号及左边都是自动生成的*** </span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    //3.执行sql语句         (alt+enter自动引导，即等号及左边都是自动生成的</span><br><span class="line">    List&lt;User&gt; users = sqlSession.selectList(&quot;test.selectAll&quot;);</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>⑤释放资源</p><ul><li><pre><code>//4.释放资源sqlSession.close();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-------------------------完整的测试类代码↓-----------</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">/***</span><br><span class="line"> * 测试类</span><br><span class="line"> * mybatis快速入门</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class MybatisDemo &#123;</span><br><span class="line">    public static void main(String []args)  throws IOException &#123;</span><br><span class="line">        //1.加载mybatis核心配置文件，获取SqlSessionFactory对象（从官网复制的</span><br><span class="line">        String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        //2.获取SqlSession对象(用它执行sql语句</span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">        //3.执行sql语句         (alt+enter自动引导，即等号及左边都是自动生成的</span><br><span class="line">        List&lt;User&gt; users = sqlSession.selectList(&quot;test.selectAll&quot;);//test.selectAll可唯一标识</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        //4.释放资源</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><p>结果：<img src="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230917191728511.png" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven%E8%BF%90%E7%94%A8/image-20230917191728511.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230917191728511"></p><h2 id="3-Mapper代理开发"><a href="#3-Mapper代理开发" class="headerlink" title="3.Mapper代理开发"></a>3.Mapper代理开发</h2><p>引入：</p><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917200246890" style="zoom:67%;" /><p>代码中还是有写死的地方(“硬编码”)，且需要切回xml文件看名字。</p><p>优化成method，直接用<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917200502727" style="zoom:50%;" /></p><h3 id="tips1：target目录"><a href="#tips1：target目录" class="headerlink" title="tips1：target目录"></a>tips1：target目录</h3><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917193226300" style="zoom: 50%;" /><p>**<u>xml文件在resources目录下，</u>**编译(compile)后生成target文件夹，</p><p><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917193400804" style="zoom:50%;" /><img src="/2024/08/22/Servlet+tomcat+maven运用/迅雷下载" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/迅雷下载" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917193459178" style="zoom:33%;" /></p><p>可知，在classes文件夹中，各配置xml和com包在一个目录下</p><h3 id="tips2：resourcs目录下建包"><a href="#tips2：resourcs目录下建包" class="headerlink" title="tips2：resourcs目录下建包"></a>tips2：resourcs目录下建包</h3><ul><li><p>已知在java代码目录下建包belike：<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917193747765" style="zoom: 50%;" /></p></li><li><p>但在resouces目录下建包用“ <code>.</code> ”无法识别，<u>用“<code>/</code>”：</u><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917194038424" style="zoom: 67%;" /></p><ul><li>结果：<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917194218711" style="zoom:50%;" /></li><li>重新编译后(需要对java代码改动才能重新compile)<ul><li><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917194351359" style="zoom:67%;" /></li><li><em><strong><u>通过在resous目录下建类的同名包–&gt;把xml文件和java类放到了同一个目录中</u></strong></em></li></ul></li></ul></li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917200619400" style="zoom:67%;" /><ol><li><p>①定义sql映射文件<strong>同名</strong>的Mapper<strong>接口</strong> (接口习惯上放在单独一个包里)</p><p><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917201130322" style="zoom: 50%;" /><img src="/2024/08/22/Servlet+tomcat+maven运用/迅雷下载" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/迅雷下载" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917201204213" style="zoom:50%;" /></p><p>②用tips2的原理建一个包，把UserMapper.xml放进去–&gt;实现了在同一目录下</p><p><img src="/2024/08/22/Servlet+tomcat+maven运用/迅雷下载" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/迅雷下载" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917201551671" style="zoom:50%;" /><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917201604820" style="zoom:50%;" /></p><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917201628696" style="zoom:50%;" /><p>编译后：<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917201803211" style="zoom:50%;" /></p></li><li><p>把sql映射文件(UserMapper.xml文件)的namespace属性设置为 自己定义的mapper接口的全限定名</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mapper.UserMapper&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>在mapper接口中定义方法（方法化），方法名&#x3D;sql语句的id；返回值类型&#x3D;resultType的类型；</p><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917202819462" style="zoom:50%;" /></li></ol><ul><li><p>由UserMapper.xml可知，UserMapper接口应定义selectAll方法，返回值类型为User对象–<code> User selectAll();</code></p></li><li><p>但是由sql语句可知：<strong>查询的是所有用户，即返回多个user一个list</strong>—》List<User></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li></ul><p>ps.由于UserMapper.xml路径改到包底下了，mybatis-config.xml中加载它的路径需要修改<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917203653348" style="zoom: 50%;" /></p><p>4.编码（写个测试类</p><p>前几步和入门案例一样，区别只在运行sql那段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> * Mapper代理开发入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span>  <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.加载mybatis核心配置文件，获取SqlSessionFactory对象（从官网复制的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="comment">//2.获取SqlSession对象(用它执行sql语句</span></span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//3.执行sql语句         (alt+enter自动引导，即等号及左边都是自动生成的</span></span><br><span class="line">        <span class="comment">//List&lt;User&gt; users = sqlSession.selectList(&quot;test.selectAll&quot;);</span></span><br><span class="line">        <span class="comment">//3.1把UserMapper接口类型传进去，获取一个代理接口</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//3.2通过代理接口调用方法</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>梳理思路:通过sqlSession对象的getMapper()获取一个UserMapper接口，而UserMapper接口的路径下有同名的sql映射文件(UserMapper.xml),<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917205849960" style="zoom: 50%;" /><ul><li>通过该代理<strong>接口调用方法</strong>，而3.规定“<u><strong>方法名&#x3D;sql语句的id</strong></u>”,即<u>通过方法能对应id同名的sql语句</u>，其实底层原理还是入门案例的那样</li></ul></li></ul><h2 id="4-案例-配置文件实现CRUD"><a href="#4-案例-配置文件实现CRUD" class="headerlink" title="4.案例-配置文件实现CRUD"></a>4.案例-配置文件实现CRUD</h2><h3 id="黑马官方note"><a href="#黑马官方note" class="headerlink" title="黑马官方note"></a>黑马官方note</h3><p><a href="https://blog.csdn.net/itcast_cn/article/details/123718088">Mybatis：使用映射配置文件实现CRUD操作，能够使用注解实现CRUD操作_数据注解进行映射配置的方式_黑马程序员官方的博客-CSDN博客</a></p><p>功能列表：</p><blockquote><ul><li>查询<ul><li>查询所有数据</li><li>查询详情</li><li>条件查询</li></ul></li><li>添加</li><li>修改<ul><li>修改全部字段</li><li>修改动态字段</li></ul></li><li>删除<ul><li>删除一个</li><li>批量删除</li></ul></li></ul></blockquote><h3 id="4-1准备环境"><a href="#4-1准备环境" class="headerlink" title="4.1准备环境"></a>4.1准备环境</h3><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230918213919973" style="zoom:33%;" /><h3 id="1-查询所有数据"><a href="#1-查询所有数据" class="headerlink" title="1.查询所有数据"></a>1.查询所有数据</h3><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230918221556486" style="zoom: 33%;" /><blockquote><p>分析：</p><ul><li>参数：无(查所有)</li><li>返回结果类型：List<Brand>(查所有品牌)</li><li>sql语句的编写：select * from xx</li></ul></blockquote><p>详细过程看官方note</p><ul><li>对照着数据库表写实体类</li><li>mybatisx能自动生成(alt+enter)statement即sql<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230919161008680" style="zoom: 50%;" /></li></ul><p>输出belike：</p><blockquote><p>[Brand{id&#x3D;1, brandName&#x3D;’null’, companyName&#x3D;’null’, ordered&#x3D;5, description&#x3D;’好吃不上火’, status&#x3D;0}, Brand{id&#x3D;2, brandName&#x3D;’null’, companyName&#x3D;’null’, ordered&#x3D;100, description&#x3D;’华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界’, status&#x3D;1}, Brand{id&#x3D;3, brandName&#x3D;’null’, companyName&#x3D;’null’, ordered&#x3D;50, description&#x3D;’are you ok’, status&#x3D;1}]</p><p>Process finished with exit code 0</p></blockquote><ul><li>brandName&#x3D;’null’, companyName&#x3D;’null’,<strong>没封装上</strong><ul><li><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230918224824744" style="zoom:33%;" /></li><li>因为db中表字段名和实体类中属性名不一样</li></ul></li></ul><p>*<u>solution：</u>*（两种</p><p>法一：</p><ol><li><p>我们可以在写sql语句时给这两个字段<strong>起别名</strong>，将别名定义成和属性名一致即可。</p><select id="selectAll" resultType="brand">    select    id, brand_name as brandName, company_name as companyName, ordered, description, status    from tb_brand;</select</li><li><p>因为写一长串字段，且每写一个&lt; select&gt;tag都要复制一次，很麻烦—–》把这段提取出来，用的时候引用</p></li></ol><p>将需要复用的SQL片段抽取到 sql 标签中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;brand_column&quot;</span>&gt;</span></span><br><span class="line">id, brand_name as brandName, company_name as companyName, ordered, description, status</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p>id属性值是唯一标识，引用时也是通过该值进行引用。</p><p>在原sql语句中进行引用</p><p>使用 include 标签引用上述的 SQL 片段，而 refid 指定上述 SQL 片段的id值。</p><select id="selectAll" resultType="brand">    select    <include refid="brand_column" />    from tb_brand;</select><p><strong><u>法二：</u></strong></p><p>使用resultMap来定义字段和属性的映射关系</p><ul><li>id唯一标识，type映射类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;brandResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;brand_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;brandName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>​id：完成主键字段的映射<br>​                column：表的列名<br>​                property：实体类的属性名<br>​         result：完成一般字段的映射<br>​                column：表的列名<br>​                property：实体类的属性名</p></blockquote><p>SQL语句正常编写(<strong>替换resultMap</strong>属性成resultMap的id)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-查看详情（selectById"><a href="#2-查看详情（selectById" class="headerlink" title="2.查看详情（selectById"></a>2.查看详情（selectById</h3><p><u>mybatis提供了两种参数占位符：</u></p><ul><li><p><strong>#{}</strong> ：执行SQL时，会将 #{} 占位符替换为？，将来自动设置参数值。从上述例子可以看出使用#{} 底层使用的是 PreparedStatement<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230919162130619" style="zoom: 50%;" /></p></li><li><p><strong>${}</strong> ：拼接SQL。底层使用的是 Statement，会存在<code>SQL注入问题</code>。<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230919162149414" style="zoom:50%;" /></p></li><li><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230919163049305" style="zoom:50%;" /></li></ul><select id="selectById"  resultMap="brandResultMap">    select *    from tb_brand where id = #{id};</select><blockquote><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;从上面两个例子可以看出，以后开发我们使用 #{} 参数占位符。</p></blockquote><p><u>SQL语句中特殊字段处理</u></p><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230919162635374" style="zoom: 33%;" /><ul><li>小于号<ul><li>转义字符<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230919162758167" style="zoom:33%;" /></li><li>打CD+alt+enter   <img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230919163005672" style="zoom:33%;" /></li></ul></li></ul><h3 id="3-多条件查询"><a href="#3-多条件查询" class="headerlink" title="3.多条件查询"></a>3.多条件查询</h3><img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230919174403316" style="zoom:50%;" /><h3 id="4-多条件，动态查询（多个条件，但是用户用了哪几个条件并不能确定）"><a href="#4-多条件，动态查询（多个条件，但是用户用了哪几个条件并不能确定）" class="headerlink" title="4.多条件，动态查询（多个条件，但是用户用了哪几个条件并不能确定）"></a>4.多条件，动态查询（多个条件，但是用户用了哪几个条件并不能确定）</h3><ul><li><h4 id="if-标签"><a href="#if-标签" class="headerlink" title="&lt; if&gt;标签"></a>&lt; if&gt;标签</h4></li><li><p><code>if test=&quot;status!=null&quot;</code>判断参数是否有值</p></li><li><p>即在原来statement基础上加了if判断，，其他照旧</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">       select * from tb_brand</span><br><span class="line">       where status=#&#123;status&#125;</span><br><span class="line">           and company_name like #&#123;companyName&#125;</span><br><span class="line">           and brand_name like #&#123;brandName&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByDynamiteConditionIf&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">       select * from tb_brand</span><br><span class="line">       where</span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status!=null&quot;</span>&gt;</span></span><br><span class="line">           status=#&#123;status&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName!=null and companyName!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">           and company_name like #&#123;companyName&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName!=null and brandName!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">           and brand_name like #&#123;brandName&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>但是<img src="/2024/08/22/Servlet+tomcat+maven运用/迅雷下载" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/迅雷下载" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230919181837562" style="zoom:33%;" />当把某条件没写时（即不满足if)，因为设计问题<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230919182010765" style="zoom:33%;" /></li><li>结果：<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230919182059324" style="zoom:33%;" />where后直接+and+条件2了<ul><li><strong>solution</strong>：<img src="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" class="lazyload placeholder" data-srcset="/2024/08/22/Servlet+tomcat+maven运用/Servlet+tomcat+maven运用" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230919182245904" style="zoom: 33%;" /></li><li>利用永真的 <strong><code>1=1</code></strong> 使and即使怎样缺某个条件都合理了</li></ul></li></ul><h4 id="where-标签"><a href="#where-标签" class="headerlink" title="&lt; where&gt;标签"></a>&lt; where&gt;标签</h4><ul><li>解决了if标签中 and 的问题，替换where关键字（非常智能的一款tag</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByDynamiteConditionIf&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_brand</span><br><span class="line">        <span class="comment">&lt;!--where 1=1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status!=null&quot;</span>&gt;</span></span><br><span class="line">               and status=#&#123;status&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName!=null and companyName!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and company_name like #&#123;companyName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName!=null and brandName!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and brand_name like #&#123;brandName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-单条件，动态查询"><a href="#5-单条件，动态查询" class="headerlink" title="5.单条件，动态查询"></a>5.单条件，动态查询</h3><p>&lt; choose&gt;相当于switch</p><select id="selectByConditionSingle" resultMap="brandResultMap">    select *    from tb_brand    <where>        <choose><!--相当于switch-->            <when test="status != null"><!--相当于case-->                status = #{status}            </when>            <when test="companyName != null and companyName != '' "><!--相当于case-->                company_name like #{companyName}            </when>            <when test="brandName != null and brandName != ''"><!--相当于case-->                brand_name like #{brandName}            </when>        </choose>    </where></select><p>执行</p>]]></content>
      
      
      
        <tags>
            
            <tag> servlet maven tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring学习笔记</title>
      <link href="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Framework-Tutorial-Full-Course-YouTube"><a href="#Spring-Framework-Tutorial-Full-Course-YouTube" class="headerlink" title="Spring Framework Tutorial | Full Course - YouTube"></a><a href="https://www.youtube.com/watch?v=If1Lw4pLLEo">Spring Framework Tutorial | Full Course - YouTube</a></h1><h2 id="1-报错集："><a href="#1-报错集：" class="headerlink" title="1.报错集："></a>1.报错集：</h2><p>1.<img src="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230916174613321.png" class="lazyload placeholder" data-srcset="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230916174613321.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230916174613321"></p><p>一开始class属性爆红，cannot resolve class or package ppr和cannot resolve class Car</p><p>solution:一开始用的ppr.Car当<img src="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230916174738428.png" class="lazyload placeholder" data-srcset="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230916174738428.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230916174738428.png">，因为建包的时候右键new没有package</p><ul><li>在蓝色文件夹(Sources Root)右键就可以建包了<img src="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230916174913472.png" class="lazyload placeholder" data-srcset="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230916174913472.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230916174913472.png"></li></ul><p>2.<img src="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230916180344013.png" class="lazyload placeholder" data-srcset="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230916180344013.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230916180344013"></p><p>solution:</p><p><strong>因为在 Idea 中，编译器只会把 src&#x2F;main&#x2F;java 也就是源代码目录下的 <u>.java</u> 文件编译成 .class 文件然后放到 target 目录中，其他的默认不会。</strong></p><ul><li>把spring.xml复制一份放到target&#x2F;classes目录下</li></ul><p>3.<img src="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230916190123485.png" class="lazyload placeholder" data-srcset="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230916190123485.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230916190123485"></p><p>solution:可以看出我写错地方了(classes\spring.xml)，写在”java\spring.xml“就解决了</p><p>4.<img src="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230917101907146.png" class="lazyload placeholder" data-srcset="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230917101907146.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230917101907146.png"></p><p>solution：漏了对括号</p><img src="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230917101935586.png" class="lazyload placeholder" data-srcset="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230917101935586.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230917101935586"><h2 id="2-codes"><a href="#2-codes" class="headerlink" title="2.codes"></a>2.codes</h2><h3 id="1-Dependency-injection"><a href="#1-Dependency-injection" class="headerlink" title="1.Dependency injection"></a>1.Dependency injection</h3><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230916180653253" style="zoom:33%;" /><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">---------------pom.xml-------------------</span><br><span class="line">--------------spring.xml--------------------</span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ppr.Car&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ppr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ppr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;car is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ppr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        ApplicationContext context= <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">       Vehicle vehicle=(Vehicle) context.getBean(<span class="string">&quot;vehicle&quot;</span>);</span><br><span class="line">       vehicle.drive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230916180822507.png" class="lazyload placeholder" data-srcset="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230916180822507.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230916180822507"><ul><li><p><code>ApplicationContext context= new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);</code><br><code>Vehicle vehicle=(Vehicle) context.getBean(&quot;vehicle&quot;);</code>&#x2F;&#x2F;objext-&gt;Vehicle</p></li><li><p><strong>过去想用别的接口实现类得在main方法里改，耦合高＋得重新编译测试。现在只需在pring.xml文档中<code>class=&quot;com.ppr.Car“</code>,把Car改成其他实现类即可。</strong></p></li></ul><h3 id="2-property-属性-成员（Setter-injection"><a href="#2-property-属性-成员（Setter-injection" class="headerlink" title="2.&lt; property&gt;属性&#x2F;成员（Setter injection"></a>2.&lt; property&gt;属性&#x2F;成员（Setter injection</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tyre</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;<span class="comment">//成员/属性</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Tyre&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tyre&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ppr.Tyre&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;brand&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>相当于setter</strong></li></ul><h3 id="3-constructor-injection"><a href="#3-constructor-injection" class="headerlink" title="3.constructor injection"></a>3.constructor injection</h3><ul><li>&lt; constructor-arg&gt;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="title function_">Tyre</span><span class="params">()</span> &#123;<span class="comment">//无参构造</span></span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Tyre</span><span class="params">(String brand)</span> &#123;<span class="comment">//加了构造器</span></span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tyre&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ppr.Tyre&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-Annotation-configuration-Bean"><a href="#4-Annotation-configuration-Bean" class="headerlink" title="4.Annotation|configuration| Bean"></a>4.Annotation|configuration| Bean</h3><p>—————————E.G.1—————————————</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Samsung</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">config</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;samsung--config--method--&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="comment">//主方法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">    &#123;</span><br><span class="line">        ApplicationContext factory= <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line">        Samsung s1=factory.getBean(Samsung.class);</span><br><span class="line">        s1.config();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Samsung <span class="title function_">setSamsung</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Samsung</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230917100602103.png" class="lazyload placeholder" data-srcset="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230917100602103.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230917100602103"><ul><li><pre><code>ApplicationContext factory= new AnnotationConfigApplicationContext(AppConfig.class); Samsung s1=factory.getBean(Samsung.class);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - AppConfig是配置类，**@Configuration**,相当于xml配置文件</span><br><span class="line">  - @Bean，表示一个bean,相当于&lt; bean/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------------E.G.2----自动连线/装载（**@Autowired**)------------------------------------------</span><br><span class="line"></span><br><span class="line">```jade</span><br><span class="line">public class Samsung &#123;</span><br><span class="line">   </span><br><span class="line">    private Processor cpu;//属性</span><br><span class="line"></span><br><span class="line">    public Processor getCpu() &#123;</span><br><span class="line">        return cpu;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setCpu(Processor cpu) &#123;</span><br><span class="line">        this.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void config()&#123;</span><br><span class="line">        System.out.println(&quot;samsung--config--method--&quot;);</span><br><span class="line">        cpu.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Samsung <span class="title function_">setSamsung</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Samsung</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Processor <span class="title function_">getCpu</span> <span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BestProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Processor</span> &#123;<span class="comment">//处理器接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BestProcessor</span> <span class="keyword">implements</span> <span class="title class_">Processor</span>&#123;</span><br><span class="line"><span class="comment">//接口实现类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;^^i am best cpu~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230917102248712.png" class="lazyload placeholder" data-srcset="/2024/08/18/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230917102248712.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" title="image-20230917102248712"><ul><li><p>由报错可知：AppConfig类的getCpu()并没能把new的对象给传过去。</p><ul><li><u>其实是没给Samsung的依赖对象Processor注入</u></li></ul></li><li><ul><li><u><em><strong>@Autowired</strong></u></em></li></ul></li><li><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230917102552600" style="zoom:67%;" /></li></ul><h3 id="5-Annotation-Component"><a href="#5-Annotation-Component" class="headerlink" title="5. Annotation|Component"></a>5. Annotation|Component</h3><p>可以在config类中不写具体的Bean</p><ul><li><p>config类+注解：</p><ul><li><code>@ComponentScan(basePackages = &quot;org.example&quot;)</code></li><li>通过此注解，Spring容器会自动扫描指定基础包及其子包下的所有类，<strong>并将其注册为Spring的Bean</strong>。所以就不用在config类里写”@Bean“了。</li></ul></li><li><p>bean对应的类上面加注解：<code>@Component</code></p><ul><li>默认bean id为类名+第一个字母小写</li><li>自定义bean id: Component(“xxx”)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;org.example&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">   <span class="comment">/* @Bean</span></span><br><span class="line"><span class="comment">    public Samsung setSamsung()&#123;</span></span><br><span class="line"><span class="comment">        return new Samsung();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Bean</span></span><br><span class="line"><span class="comment">    public Processor getCpu ()&#123;</span></span><br><span class="line"><span class="comment">        return new BestProcessor();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Samsung</span> &#123;。。。。。。&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BestProcessor</span> <span class="keyword">implements</span> <span class="title class_">Processor</span>&#123;</span><br><span class="line">    。。。&#125;</span><br></pre></td></tr></table></figure><h3 id="6-Annotation-Primary-Qualifier"><a href="#6-Annotation-Primary-Qualifier" class="headerlink" title="6.Annotation|Primary &amp;Qualifier"></a>6.Annotation|Primary &amp;Qualifier</h3><ul><li><p>如果在5.的code基础上加一个Processor接口实现类SecondProcessor</p></li><li><pre><code class="java">@Componentpublic class SecondProcessor implements Processor&#123;    @Override    public void run() &#123;        System.out.println(&quot;&amp;&amp;2nd CPU**&quot;);    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">报错：Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type &#x27;org.example.Processor&#x27; available: expected single matching bean but found 2: bestProcessor,secondProcessor</span><br><span class="line"></span><br><span class="line">- &lt;u&gt;**solution1：@Primary**&lt;/u&gt;</span><br><span class="line">- - 指明两个实现类谁的优先级更高，即new该类的bean</span><br><span class="line">  - 使用与 `@Primary` 注释关联的 **bean** 。</span><br><span class="line">  - ![image-20230917105520476](./spring学习笔记/image-20230917105520476.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- **&lt;u&gt;solution2：@Qualifier(&quot;bean的id&quot;)&lt;/u&gt;**</span><br><span class="line"></span><br><span class="line">  - 自动装配(@Autowired)的时候（</span><br><span class="line"></span><br><span class="line">  - &lt;img src=&quot;./spring学习笔记/image-20230917110402193.png&quot; alt=&quot;image-20230917110402193&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">  - ps：一开始写的SecondP...报错，改小写(默认bean的id)就ok了</span><br><span class="line"></span><br><span class="line">  - &lt;img src=&quot;C:\Users\purin\AppData\Roaming\Typora\typora-user-images\image-20230917110529776.png&quot; alt=&quot;image-20230917110529776&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">  - 在接口的实现类上使用`@Qualifier`注解指定一个唯一的标识符，然后在注入时使用`@Qualifier`指定要注入的具体实现类。</span><br><span class="line"></span><br><span class="line">    - 上面写的直接用是因为：没有人为起标识符，则该bean的id就是默认形式，自己起标识符也行</span><br><span class="line"></span><br><span class="line">    - ```java</span><br><span class="line">      public interface MyInterface &#123;</span><br><span class="line">          // ...</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      @Component</span><br><span class="line">      @Qualifier(&quot;implementation1&quot;)</span><br><span class="line">      //自己起了一个标识</span><br><span class="line">      public class MyImplementation1 implements MyInterface &#123;</span><br><span class="line">          // ...</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      @Component</span><br><span class="line">      @Qualifier(&quot;implementation2&quot;)</span><br><span class="line">      //自己起了另一个标识</span><br><span class="line">      public class MyImplementation2 implements MyInterface &#123;</span><br><span class="line">          // ...</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      @Component</span><br><span class="line">      public class MyComponent &#123;</span><br><span class="line">          @Autowired</span><br><span class="line">          @Qualifier(&quot;implementation1&quot;)</span><br><span class="line">          //用标识说明用的哪一个</span><br><span class="line">          private MyInterface myInterface;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure></code></pre></li></ul><h1 id="leifengyang-Spring-chatGTP"><a href="#leifengyang-Spring-chatGTP" class="headerlink" title="leifengyang-Spring+chatGTP"></a>leifengyang-Spring+chatGTP</h1><h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><ul><li><p>ApplicationContext是IOC容器接口</p></li><li><p>容器中的对象在<strong>容器创建好之后</strong>就创建了（比getBean的时候早</p></li><li><p>Bean的属性名由setter决定（去掉set后首字母小写</p></li><li><p>&lt; proverty&gt;–setter;&lt; constructor-arg&gt;–构造器（该构造器有几个写几个&lt; constructor-arg&gt;</p></li></ul><hr><h3 id="Autowired（自动装配）顺序"><a href="#Autowired（自动装配）顺序" class="headerlink" title="@Autowired（自动装配）顺序"></a>@Autowired（自动装配）顺序</h3><ul><li><p>先按<strong>类型</strong>去<strong>容器中找对应类型</strong>的组件</p><ul><li><p>找到–赋值</p></li><li><p>没找到–抛异常</p></li><li><p>找到多个</p><ul><li>按<strong>变量名用作id</strong>再找<img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230923194125016" style="zoom: 33%;" /><ul><li>匹配上–装配</li><li>没匹配上–报错</li></ul></li><li>Qualifier(“xx”)<strong>指定一个名当id</strong>去装配，而不是之前的变量名当id<ul><li>找到–装配</li><li>找不到–报错</li></ul></li></ul></li></ul></li><li><p>Autowired(<strong>required&#x3D;false</strong>)找不到就null，避免报错</p></li></ul><hr><h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><p>​可以在接口的实现类上使用<code>@Qualifier</code>注解<strong>指定一个唯一的标识符</strong>，然后在注入时使用<code>@Qualifier</code>指定要注入的具体实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;implementation1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImplementation1</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;implementation2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImplementation2</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;implementation1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> MyInterface myInterface;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p><code>@Autowired</code>注解用于自动装配（自动注入）Spring容器中的Bean。通过使用<code>@Autowired</code>注解，可以方便地将依赖对象注入到需要使用它的地方，无需显式编写setter方法或构造函数。<br><code>@Autowired</code>注解有以下几种使用方式：</p><ol><li>根据类型自动装配：当只有一个与需求类型匹配的Bean存在时，Spring会自动将其注入。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MyBean myBean;</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>MyBean</code>类型的Bean将被自动注入到<code>myBean</code>字段中。</p><ol start="2"><li>根据名称自动装配：当存在多个与需求类型匹配的Bean时，可以使用<code>@Qualifier</code>注解配合<code>@Autowired</code>指定要装配的Bean的名称（通过唯一标识符或限定符）。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;myBean2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> MyBean myBean;</span><br></pre></td></tr></table></figure><p>在上述示例中，根据<code>@Qualifier(&quot;myBean2&quot;)</code>指定要注入的Bean名称为”myBean2”，从而解决了多个同类型Bean的命名歧义问题。</p><ol start="3"><li>构造函数自动装配：可以在构造函数上使用<code>@Autowired</code>注解，让Spring自动按照构造函数参数类型进行装配。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">(MyBean myBean)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>MyClass</code>类的构造函数使用<code>@Autowired</code>注解，Spring将自动通过构造函数将<code>MyBean</code>类型的Bean注入到构造函数中。<br><code>@Autowired</code>注解可以与<code>@Component</code>、<code>@Service</code>、<code>@Repository</code>和<code>@Controller</code>等注解一起使用，以便在组件扫描时自动装配Bean。当Spring容器实例化一个Bean，并发现有其他Bean依赖</p><h4 id="summary"><a href="#summary" class="headerlink" title="summary:"></a>summary:</h4><p>1.一个类的成员是某个bean，自动注入</p><p>2.有多个满足类型查找的bean成员(如多个实现类)和<code>@Qualifier</code>搭配使用，点明用哪个bean</p><p>3.构造方法自动装配。在创建实例时就已经完成了依赖注入。</p><ul><li>对比1和3：①先创建myclass实例，检查@Autowired后发现mybean，后注入mybean  ③创建实例时就完成依赖注入</li></ul><hr><p>方法上有@Autowired</p><p>1.这个方法在bean创建得时候自动运行</p><p>2.这个方法上每个参数都自动注入值</p><hr><p>@Autowired，@Resource，@Injection都是自动装配</p><ul><li>@Resource：javaee自带，java标准–》扩展性强：如果换成别的容器框架也能用它</li><li>@Autowired：spring框架的注解</li></ul><hr><h3 id="Spring单元测试"><a href="#Spring单元测试" class="headerlink" title="Spring单元测试"></a>Spring单元测试</h3><p>@ContextConfiguration（locations&#x3D;””)指定spring的配置文件的位置</p><p>@RunWith(SpringJUnitClassRunner.class)指定用spring单元测试驱动来测试，以前默认是junit</p><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230923200833162" style="zoom:50%;" /><p>不用再麻烦地getBean()来获取对象，可以在测试中使用自动装配</p><hr><h3 id="泛型依赖注入："><a href="#泛型依赖注入：" class="headerlink" title="泛型依赖注入："></a>泛型依赖注入：</h3><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230923202953799" style="zoom: 50%;" /><ul><li>有Bookservice,Userservice两个bean（因为他俩都继承baseServlet&lt;&gt;相当于把里面代码复制粘贴过去</li><li>–》在baseServlet&lt;&gt;写的@Autowired能正常运作</li><li>@Autowired在上一行，–》自动装载了BaseDao&lt; Book&gt;对象，BaseDao&lt; User&gt;<ul><li>去容器中按<strong>类型</strong>查找，即按BaseDao&lt; Book&gt;和BaseDao&lt; User&gt;分别查找，能匹配上唯一一个对象</li></ul></li></ul><hr><ul><li>ioc是个容器，帮忙管理所有组件（@service等</li><li>某个组件要想使用spring提供的更多功能（ioc，aop），则必须加入容器中</li><li>容器底层其实是个map</li><li>源码调试思路：关键步骤<strong>打断点</strong>，进去看每一步具体咋执行</li></ul><hr><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ul><li>比如一些日志记录，直接写在方法内部—-》不推荐，维护修改麻烦<ul><li>日志记录：系统辅助功能</li><li>业务逻辑：核心功能</li><li><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230923205726100" style="zoom:50%;" />二者耦合</li></ul></li><li>目标：日志模块在核心功能运行时自己<strong>动态</strong>地加上</li></ul><p>—-》拿到代理对象，通过代理对象调用原来的方法。</p><p>缺点：jdk默认的动态代理，若目标对象未实现任何接口，则无法生成代理类</p><ul><li><strong>代理对象和目标对象唯一产生关联的地方：都实现了同样的接口</strong></li></ul><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230926082750879" style="zoom:50%;" /><hr><p>Spring实现AOP功能，<strong>底层就是动态代理</strong>，比动态代理简化。</p><h3 id="1-AOP术语"><a href="#1-AOP术语" class="headerlink" title="1.AOP术语"></a>1.AOP术语</h3><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230926083752824" style="zoom:50%;" /><ul><li>通知方法–日志记录的方法</li><li>切面类–通知方法所在的类</li><li>连接点–原来的功能类可以写日志记录的地方</li><li>切入点–连接点中真正用了的地方</li><li>切入点表达式–表明在连接点中用了哪些切入点</li></ul><h3 id="2。写配置"><a href="#2。写配置" class="headerlink" title="2。写配置"></a>2。写配置</h3><p>1）将目标类和切面类加入ioc容器中（如@Service，@Component</p><p>2）告诉spring哪个类是切面类（@Aspect</p><p>3）告诉spring切面类中的通知方法都是什么时候运行</p><ul><li>@Before（切入表达式）                 目标方法之前运行</li><li>@After（切入表达式）                     目标方法结束之后</li><li>@AfterReturning（切入表达式）    目标方法正常返回之后</li><li>@AfterThrowing （切入表达式）    目标方法异常之后</li><li><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230926090022345" style="zoom:50%;" /></li><li>切入表达式<ul><li>“execution(public int 目标方法的全类名)”</li></ul></li></ul><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230926090432539" style="zoom: 33%;" /><ul><li>从ioc容器中拿对象，如果按类型，<strong>用接口类型</strong>，不能用本类<ul><li>AOP通常基于代理模式实现，使用接口类型可以确保获取到的对象是代理对象</li></ul></li></ul><hr><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>细节一：</p><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230926091231426" style="zoom: 33%;" /><p>如果把切面类的注解@Aspect(告诉Spring容器这是一个切面类)删掉，即没切入了，则bean还是苯类对象；但实现aop后就是动态代理对象。</p><p>细节七：  抽取可重用的切入点表达式（防止同样的切入点表达式，却不得不修改多处</p><ol><li>写一个无返回值的方法</li><li>把重用的切入点表达式写入@Pointcut注解，原通知的切入点表达式处改为1.中的方法名()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">logUtis</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public int com.calculator.impl.MyCal.*(int,int))&quot;)</span><span class="comment">///</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">chongyong</span><span class="params">()</span>&#123;&#125;<span class="comment">///</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;chongyong()&quot;)</span><span class="comment">///</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logStart</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;xx方法开始执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;chongyong()&quot;)</span><span class="comment">///</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logEnd</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;xx方法结束&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>细节八：  环绕通知**@Around**</p><ul><li><p>相当于Before,After,AfterThrowing,,AfterReturning四合一</p></li><li><p><strong>通过反射调用目标方法</strong></p></li><li><blockquote><p>@Around能决定目标方法晕不晕行；但其他四个不能；–》比如做权限验证时，验证不过就不运行–&gt;用@Around</p><p>无需牵扯目标方法的场景-&gt;用其他四个</p></blockquote></li><li><p>有参数ProceedingJoinPiont pjp</p><ul><li>是JoinPoint的子接口之一</li><li>Object[] **getArgs()**：获取连接点的参数数组。</li><li>Object <strong>proceed(Object[] args)<strong>：可以使用proceed()方法来控制目标方法的执行。当我们调用proceed()方法时，它会触发</strong>目标方法的执行</strong>，并返回目标方法的返回值（如果有）</li></ul></li><li><p>相当于如图的动态代理<img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230926193524686" style="zoom:33%;" /></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(public int com.calculator.impl.MyCal.*(int,int))&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">chongyong</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Around(&quot;chongyong()&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">myAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       Object[] args = pjp.getArgs();<span class="comment">//获取目标方法参数</span></span><br><span class="line">       String name=pjp.getSignature().getName();<span class="comment">//获取方法签名对象，通过签名对象获取方法名</span></span><br><span class="line">       <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           <span class="comment">//@Before</span></span><br><span class="line">           System.out.println(name+<span class="string">&quot;xx方法开始执行&quot;</span>);</span><br><span class="line">           proceed=pjp.proceed(args);<span class="comment">//相当于目标方法的执行语句</span></span><br><span class="line">           <span class="comment">//@AfterReturning</span></span><br><span class="line">           System.out.println(name+<span class="string">&quot;xx方法正常返回&quot;</span>);</span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">           <span class="comment">//@AfterThrowing</span></span><br><span class="line">           System.out.println(name+<span class="string">&quot;xx方法异常:&quot;</span>+e);</span><br><span class="line">       &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">           <span class="comment">//@After()</span></span><br><span class="line">           System.out.println(name+<span class="string">&quot;xx方法结束&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> proceed;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>结果：<img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230926193553412" style="zoom:33%;" /></p><p>细节十： 多个切面执行顺序</p><blockquote><p>add方法开始执行<br>[validate]add方法开始执行<br>[validate]add方法正常返回,结果是2<br>[validate]add方法结束<br>add方法正常返回,结果是2<br>add方法结束</p></blockquote><ul><li>依据：切面类首字母大小写</li><li><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230926195936905" style="zoom: 25%;" /></li></ul><h3 id="codes"><a href="#codes" class="headerlink" title="codes"></a>codes</h3><h4 id="案例1：计算器-日志（aop实现）"><a href="#案例1：计算器-日志（aop实现）" class="headerlink" title="案例1：计算器+日志（aop实现）"></a>案例1：计算器+日志（aop实现）</h4><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230926183019184" style="zoom:33%;" /><p>Calculator接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.calculator.infer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minus</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyCal实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.calculator.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.calculator.infer.Calculator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCal</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> result=i+j;</span><br><span class="line">        System.out.println(i+<span class="string">&quot;+&quot;</span>+j+<span class="string">&quot;=&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minus</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i-j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i*j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i/j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Config配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.calculator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScans;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages =&quot;com.calculator&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>logUtils切面类–添加日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.calculator.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">// 启用Spring的AOP功能*****</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">logUtis</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(public int com.calculator.impl.MyCal.*(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logStart</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;xx方法开始执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(public int com.calculator.impl.MyCal.*(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logEnd</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;xx方法结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(public int com.calculator.impl.MyCal.*(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logReturn</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;xx方法正常返回&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing(value=&quot;execution(public int com.calculator.impl.MyCal.*(int,int))&quot;,throwing=&quot;exception&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logException</span><span class="params">(Exception exception)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;xx方法异常:&quot;</span>+exception);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.calculator.Config;</span><br><span class="line"><span class="keyword">import</span> com.calculator.infer.Calculator;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    ApplicationContext ioc= <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Config.class);</span><br><span class="line">    <span class="comment">/*AnnotationConfigApplicationContext构造函数中传入的参数应该是配置类的类对象，</span></span><br><span class="line"><span class="comment">      而不是配置类的名称。所以您需要将&quot;Config.class&quot;修改为Config.class。*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">       Calculator bean= ioc.getBean(Calculator.class);<span class="comment">//动态代理与接口实现类的唯一联系就是实现的接口，不能获取本类</span></span><br><span class="line">       bean.add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">       bean.div(<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230926183632749" style="zoom:33%;" /><ul><li>之前在test方法写了print语句，结果最后打印，我以为带上add()方法就会被日志方法夹在中间。其实只有在add方法体内写才还会有这种效果。chat道：<code>至于最后一行的&quot;1+1=2&quot;是您自己添加的输出语句，并不是切面逻辑产生的结果。</code></li></ul><hr><p>Aop使用场景</p><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20230926200544896" style="zoom:50%;" /><ul><li><p>事务belike，异常-回滚，结束-关闭资源，返回 开始-提交</p></li><li><blockquote><p>@Around能决定目标方法晕不晕行；但其他四个不能；–》比如做权限验证时，验证不过就不运行–&gt;用@Around</p><p>无需牵扯目标方法的场景-&gt;用其他四个</p></blockquote></li></ul><h4 id="xml配置版"><a href="#xml配置版" class="headerlink" title="xml配置版"></a>xml配置版</h4><p>配置：</p><ol><li>加入ioc容器（bean tag</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myCal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.calculator.impl.MyCal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logUtis&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.calculator.utils.logUtis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;validateAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.calculator.utils.validateAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.告诉spring有哪些切面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span>   </span><br><span class="line">     <span class="comment">&lt;!--指定切面-@Aspect--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;logUtis&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;validateAspect&quot;</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.before，after之类的执行位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;globalpoint&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(int com.calculator.impl.MyCal.*(int,int))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定切面-@Aspect--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;logUtis&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;mypointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(int com.calculator.impl.MyCal.*(int,int))&quot;</span>/&gt;</span><span class="comment">&lt;!--切面表达式，免得复制粘贴好几行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;logStart&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;mypointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;logEnd&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(int com.calculator.impl.MyCal.*(int,int))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;logException&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;mypointcut&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;exception&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;logReturn&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;mypointcut&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;validateAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;logStart&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;globalpoint&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;logEnd&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;globalpoint&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;logException&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;globalpoint&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;exception&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;logReturn&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;globalpoint&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="jdbctemplate"><a href="#jdbctemplate" class="headerlink" title="jdbctemplate"></a>jdbctemplate</h1><h1 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h1><ul><li><pre><code class="java">public void checkout(String isbn,String username)&#123;       /***        * 购买图书操作        */       int price=bookDao.getBookPrice(isbn);//查价格       bookDao.updateBalance(username,price);//-余额       bookDao.updateStock(isbn);//-库存   &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  上述业务操作，如若-库存的sql语句写错了，则没修改库存，但是账户余额已经改了--》不应该改，回滚之类的--》事务</span><br><span class="line"></span><br><span class="line">- &lt;img src=&quot;./spring学习笔记/image-20231021140136292.png&quot; alt=&quot;image-20231021140136292&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">- &lt;img src=&quot;./spring学习笔记/image-20231021140335030.png&quot; alt=&quot;image-20231021140335030&quot; style=&quot;zoom:33%;&quot; /&gt;利用AOP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- ### 快速为某个方法添加事务</span><br><span class="line"></span><br><span class="line">  - ①配置事务管理器(切面)让其进行事务控制--加入ioc容器--bean tag</span><br><span class="line"></span><br><span class="line">  - ​    控制住数据源</span><br><span class="line"></span><br><span class="line">    - 控制事务--控制连接--而从数据源获取连接connection--控制住数据源--加入属性</span><br><span class="line"></span><br><span class="line">    - ```java</span><br><span class="line">      &lt;bean name=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">              &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">          &lt;/bean&gt;</span><br></pre></td></tr></table></figure>- ②开启基于注解的事务控制模式 依赖tx名称空间  - ```xml    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; /&gt;</span><br></pre></td></tr></table></figure>- ③给事务方法加注解  - ```java    @Transactional        public void checkout(String isbn,String username)&#123;        &#125;    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    but报错`通配符的匹配很全面, 但无法找到元素 &#x27;tx:annotation-driven&#x27; 的声明`</span><br><span class="line"></span><br><span class="line">    solution：-&gt; `xsi:schemaLocation`后加了一个`http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd`</span><br><span class="line"></span><br><span class="line">## 事务细节</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ul><p>isolation-Isolation 事务隔离级别</p><p>propagation-Propagation 事务传播行为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>noRollbackFor-Class[] 哪些异常事务可以不回滚</p><p>boRollbackForClassName-String[]（String全类名）</p><p>rollbackFor-Class[] 哪些异常事务要回滚</p><p>rollbackForClassName-String[]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>readOnly-booolean 设置事务为只读【【可以进行事务优化：加快查询速度∵不执行增删改了】】</p><p>timeout-int （秒）事务超出指定执行时长后自动终止并回归</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 1.timeout</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Transactional(timeout = 3)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(timeout = 3)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(String isbn,String username)</span>&#123;</span><br><span class="line">        <span class="comment">/***</span></span><br><span class="line"><span class="comment">         * 购买图书操作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);<span class="comment">//毫秒</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        。。。。。&#125;</span><br></pre></td></tr></table></figure><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20231021223935798" style="zoom:33%;" /><h3 id="2-异常分类"><a href="#2-异常分类" class="headerlink" title="2.异常分类"></a>2.异常分类</h3><ul><li>运行时异常：可以不用处理【<strong>默认都回滚</strong>】</li><li>编译时异常：必须trycatch或throws【<strong>默认不回滚</strong>】</li></ul><p><u>noRollbackFor<strong>让原来必须回滚的不回滚</strong></u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(timeout = 3,noRollbackFor = &#123;ArithmeticException.class&#125;)</span><span class="comment">//让数学异常可以不回滚</span></span><br><span class="line"><span class="comment">//noRollbackFor-Class[]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(String isbn,String username)</span>&#123;</span><br><span class="line">        <span class="comment">/***</span></span><br><span class="line"><span class="comment">         * 购买图书操作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> price=bookDao.getBookPrice(isbn);<span class="comment">//查价格</span></span><br><span class="line">        bookDao.updateBalance(username,price);<span class="comment">//-余额</span></span><br><span class="line">        bookDao.updateStock(isbn);<span class="comment">//-库存</span></span><br><span class="line">        <span class="type">int</span> x=<span class="number">10</span>/<span class="number">0</span>;<span class="comment">/////数学异常</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-事务隔离级别"><a href="#3-事务隔离级别" class="headerlink" title="3.事务隔离级别"></a>3.事务隔离级别</h3><h4 id="1-事务并发问题"><a href="#1-事务并发问题" class="headerlink" title="1.事务并发问题"></a>1.事务并发问题</h4><ul><li><strong>脏读不可以出现</strong>，其他的允许存在</li></ul><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20231022101605592" style="zoom:50%;" /><h4 id="2-隔离级别"><a href="#2-隔离级别" class="headerlink" title="2.隔离级别"></a>2.隔离级别</h4><ul><li>都是读事务(readonly)与写事务之间</li></ul><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20231022102001076" style="zoom:50%;" /><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20231022102159704" style="zoom:50%;" /><h4 id="3-案例–读脏数据"><a href="#3-案例–读脏数据" class="headerlink" title="3.案例–读脏数据"></a>3.案例–读脏数据</h4><p>起始code：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    BookService(BookDao bookDao)&#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao=bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/**隔离级别：可读未提交**/</span></span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">(String isbn)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getBookPrice(isbn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bean</span> <span class="operator">=</span> ioc.getBean(BookService.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;ISBN-001单价&quot;</span>+bean.getPrice(<span class="string">&quot;ISBN-001&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：<code>ISBN-001单价100</code></p><p>开启事务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use tx</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> book <span class="keyword">set</span> price<span class="operator">=</span><span class="number">999</span> <span class="keyword">where</span> isbn<span class="operator">=</span>&quot;ISBN-001&quot;;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>​     再执行测试test02时：<code>ISBN-001单价999</code></p><p>回滚：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>​      再执行test：<code>ISBN-001单价100</code></p><p>如果用回滚前的数据 进行一系列操作，显然是脏数据，产生一系列错误。</p><h4 id="4-查看-修改隔离级别"><a href="#4-查看-修改隔离级别" class="headerlink" title="4.查看+修改隔离级别"></a>4.查看+修改隔离级别</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">select</span> @<span class="variable">@transaction_isolation</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@transaction_isolation</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session transaction isolation level read committ</span><br><span class="line">ed;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@transaction_isolation</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@transaction_isolation</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> READ<span class="operator">-</span>COMMITTED          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>5.读已提交</p><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20231022112140867" style="zoom:50%;" /><ul><li>第二次查询应该不变（因为另一个事务改了之后并没提交</li><li>问题原因：mysql<strong>自动提交</strong></li></ul><p>solution：<code>SET autocommit=0；关闭自动提交</code></p><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20231022112533270" style="zoom:50%;" /><h4 id="6-可重复读：何时读都一模一样"><a href="#6-可重复读：何时读都一模一样" class="headerlink" title="6.可重复读：何时读都一模一样"></a>6.可重复读：何时读都一模一样</h4><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20231022112920002" style="zoom:50%;" /><h4 id="7-有事务的业务逻辑，ioc容器中保存的是这个义务逻辑的动态对象"><a href="#7-有事务的业务逻辑，ioc容器中保存的是这个义务逻辑的动态对象" class="headerlink" title="7.有事务的业务逻辑，ioc容器中保存的是这个义务逻辑的动态对象"></a>7.有事务的业务逻辑，ioc容器中保存的是这个义务逻辑的动态对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bean</span> <span class="operator">=</span> ioc.getBean(BookService.class);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;ISBN-001单价&quot;+bean.getPrice(&quot;ISBN-001&quot;));</span></span><br><span class="line">        System.out.println(bean.getClass());<span class="comment">//*</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>①把BookService类中所有<code>@Transactional</code>都注释掉（即没有事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class com.service.BookService</span><br></pre></td></tr></table></figure><p>②取消注释掉的@Transactional</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class com.service.BookService$$EnhancerBySpringCGLIB$$b3a08004</span><br></pre></td></tr></table></figure><h3 id="4-事务传播行为propagation（传播-行为）"><a href="#4-事务传播行为propagation（传播-行为）" class="headerlink" title="4.事务传播行为propagation（传播+行为）"></a>4.事务传播行为propagation（传播+行为）</h3><ul><li><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">tran()&#123;<span class="comment">//事务tran里嵌有事务b和事务c</span></span><br><span class="line">  b()&#123;&#125;</span><br><span class="line">  c()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Q:事务c出异常了后事务b要不要回滚</p><p>A：可以靠设置   E.G.假设用的是REQUIRED b,c和tran共享事务(共享一个数据库连接)，就是同一个事务–》完蛋一起完蛋–》∴b需要回滚</p><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20231022120033491" style="zoom:50%;" /></li></ul><h4 id="1-REQUIRED实例"><a href="#1-REQUIRED实例" class="headerlink" title="1.REQUIRED实例"></a>1.REQUIRED实例</h4><p><strong>图解</strong>***********</p><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20231022132435667" style="zoom:50%;" /><ul><li><strong>因为小事务和大事务一起提交(执行完了还没提交)，所以后边出了错能都滚蛋</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MulService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookService bk;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mulTx</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">        bk.checkout(<span class="string">&quot;ISBN-002&quot;</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        <span class="comment">//@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">        bk.updatePrice(<span class="string">&quot;ISBN-003&quot;</span>,<span class="number">99</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    BookService(BookDao bookDao)&#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao=bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(String isbn,String username)</span>&#123;</span><br><span class="line">        <span class="type">int</span> price=bookDao.getBookPrice(isbn);<span class="comment">//查价格</span></span><br><span class="line">        bookDao.updateBalance(username,price);<span class="comment">//-余额</span></span><br><span class="line">        bookDao.updateStock(isbn);<span class="comment">//-库存</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePrice</span><span class="params">(String isbn,<span class="type">int</span> price)</span>&#123;</span><br><span class="line">        bookDao.updatePrice(isbn, price);</span><br><span class="line">        <span class="type">int</span> i=<span class="number">10</span>/<span class="number">0</span>;<span class="comment">///异常</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MulService</span> <span class="variable">bean</span> <span class="operator">=</span> ioc.getBean(MulService.class);</span><br><span class="line">        bean.mulTx();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：因为updatePrice异常，打包滚蛋都回滚了，数据库数据并没有被修改。</p><ul><li><strong>历史遗留问题</strong>：第一次的时候异常语句写的sout(10&#x2F;0),额，，没有都回滚，数据库还是被修改了，问了chatgpt说的也是前后矛盾，，说什么没被捕获之类的，但好像sout(10&#x2F;0)和int i&#x3D;10&#x2F;0都是runtimeException，，</li></ul><h4 id="2-REQUIRED-NEW实例"><a href="#2-REQUIRED-NEW实例" class="headerlink" title="2.REQUIRED_NEW实例"></a>2.REQUIRED_NEW实例</h4><h5 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h5><ul><li>checkout自己启动了自己的新事务后，<strong>执行完就立马提交了</strong>，所以就算后面大事务所在的事务回滚也不关他的事。</li><li>下图为两个小事务都是_NEW</li></ul><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20231022132652467" style="zoom:50%;" /><h5 id="2-1运行时异常的抛出顺序是从当前方法开始顺着调用栈向上传播"><a href="#2-1运行时异常的抛出顺序是从当前方法开始顺着调用栈向上传播" class="headerlink" title="2.1运行时异常的抛出顺序是从当前方法开始顺着调用栈向上传播"></a>2.1运行时异常的抛出顺序是从当前方法开始顺着调用栈向上传播</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        doStuff();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doStuff</span><span class="params">()</span> &#123;</span><br><span class="line">        doMoreStuff();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doMoreStuff</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">10</span>/<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法调用时main-&gt;doStuff-&gt;doMoreStuff</p><p>RuntimeException的抛出顺序是从当前方法开始<strong>顺着调用栈向上传播</strong></p><ol><li><p><code>doMoreStuff()</code> 方法中有一个算术操作 <code>System.out.println(10/0)</code>，它会抛出一个 <code>ArithmeticException</code>。</p><p><strong>但没捕获没处理</strong>，异常开始向上传播，离开 <code>doMoreStuff()</code> 方法，并返回到 <code>doStuff()</code> 方法。</p></li><li><p>由于 <code>doStuff()</code> 方法没<strong>有捕获这个异常，它会继续向上传播</strong>，离开 <code>doStuff()</code> 方法，并返回到 <code>main</code> 方法。</p></li><li><p><code>main</code> 方法也没有捕获异常，所以异常继续向上传播，离开 <code>main</code> 方法。</p></li><li><p>当异常离开 <code>main</code> 方法时，程序终止，并在控制台打印异常信息和堆栈跟踪。</p></li></ol><h5 id="2-2案例"><a href="#2-2案例" class="headerlink" title="2.2案例"></a>2.2案例</h5><p>①</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MulService</span> &#123;</span><br><span class="line">   ........</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mulTx</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//REQUIRED_NEW</span></span><br><span class="line">        bk.checkout(<span class="string">&quot;ISBN-002&quot;</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        <span class="comment">//REQUIRED</span></span><br><span class="line">        bk.updatePrice(<span class="string">&quot;ISBN-003&quot;</span>,<span class="number">99</span>);<span class="comment">//有算数异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>checkout把numTx挂起，自己另开了一个事务，<strong>执行完立马给自己提交了</strong>，然后mulTx又开启，mulTx事务的大家<strong>一起提交</strong>。所以在updatePrice和mulTx一起滚蛋(整个事务内的)的时候，不管他事。</li></ul><p>②</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MulService</span> &#123;</span><br><span class="line">   ........</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mulTx</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//REQUIRED</span></span><br><span class="line">        bk.checkout(<span class="string">&quot;ISBN-002&quot;</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        <span class="comment">//REQUIRED_NEW</span></span><br><span class="line">        bk.updatePrice(<span class="string">&quot;ISBN-003&quot;</span>,<span class="number">99</span>);<span class="comment">//有算术异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>updatePrice()中的异常未被捕获，继续往上找到mulTx()导致这个事务一起完蛋(<strong>都没提交</strong>,∵大事务还没执行完)，所以在这个事务中(REQUIRED)的checkout()会一起回滚。</li></ul><p>③</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MulService</span> &#123;</span><br><span class="line">   ........</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mulTx</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//REQUIRED_NEW</span></span><br><span class="line">        bk.checkout(<span class="string">&quot;ISBN-002&quot;</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        <span class="comment">//REQUIRED_NEW</span></span><br><span class="line">        bk.updatePrice(<span class="string">&quot;ISBN-003&quot;</span>,<span class="number">99</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="type">int</span> i=<span class="number">10</span>/<span class="number">0</span>;<span class="comment">//数学异常（在mulTx事务内</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>作为  _NEW,两个小事务都把mulTx挂起，自己的事务执行完立马提交了。∴执行到mulTx内的异常时，他俩不会回滚。</li></ul><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20231022133430599" style="zoom:33%;" /><h4 id="3-如果是REQUIRED，那timeout，noRollbackFor等等都要在大事务上写"><a href="#3-如果是REQUIRED，那timeout，noRollbackFor等等都要在大事务上写" class="headerlink" title="3.如果是REQUIRED，那timeout，noRollbackFor等等都要在大事务上写"></a>3.如果是REQUIRED，那timeout，noRollbackFor等等都要在大事务上写</h4><ul><li>小事务相当于继承的大事务的</li></ul><h4 id="4-补充（代理对象）"><a href="#4-补充（代理对象）" class="headerlink" title="4.补充（代理对象）"></a>4.补充（代理对象）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REQUIRED:将之前事务用的connection传递给这个方法使用</span><br><span class="line">REQUIRED_NEW：这个方法直接使用新的connection</span><br></pre></td></tr></table></figure><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20231022140029527" style="zoom:33%;" /><ul><li><p>上图在BookService中直接写mulTx,无法实现创自挤的事务</p></li><li><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20231022140218425" style="zoom:33%;" /></li><li><p>因为是调用事务方法实现的，而在本类内直接写没有动态代理对象，实现不了这种效果。</p><p>[^]: 事务细节3.7：bean.getClass()-》class com.service.BookService$$EnhancerBySpringCGLIB$$b3a08004</p></li></ul><h2 id="报错集"><a href="#报错集" class="headerlink" title="报错集"></a>报错集</h2><h3 id="1-No-qualifying-bean-of-type-‘com-service-BookService’-available"><a href="#1-No-qualifying-bean-of-type-‘com-service-BookService’-available" class="headerlink" title="1   No qualifying bean of type ‘com.service.BookService’ available"></a>1   No qualifying bean of type ‘com.service.BookService’ available</h3><img src="/2024/08/18/spring学习笔记/spring学习笔记" class="lazyload placeholder" data-srcset="/2024/08/18/spring学习笔记/spring学习笔记" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"  alt="image-20231021134835095" style="zoom:33%;" /><p>main包下的xml是我从conf下复制的，而test中<code>ClassPathXmlApplicationContext(&quot;ApplicationContext.xml&quot;);</code>用的是原来conf目录下的xml–》致使后来加上<code>&lt;context:component-scan base-package=&quot;com.*&quot; /&gt;</code>后也找不到bean–》最后靠在原来路径的xml加<code>&lt;context:component-scan base-package=&quot;com.*&quot; /&gt;</code>解决</p><ul><li><pre><code>&lt;context:component-scan base-package=&quot;com.*&quot; /&gt;</code></pre><ul><li>告诉Spring在指定的包及其子包中自动扫描并注册带有特定注解的组件。(即告诉他我用了注解没写bean标签，去读取去)</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/2024/01/21/java%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/01/21/java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="基础-Java-概念"><a href="#基础-Java-概念" class="headerlink" title="基础 Java 概念"></a>基础 Java 概念</h2><ul><li><p>类和对象：类是对象的模板，对象是类的实例。类包含属性和方法。</p><p>一、类和对象的定义<br>类：类是一个模板，它描述一类对象的行为和状态。<br>对象：对象是类的一个实例，是具有类类型的变量，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字；行为有：摇尾巴、叫等。</p><p>二、类和对象的区别和联系<br>1、类是抽象的，概念的，代表一类事物，比如人类，猫类…<br>2、对象是具体的，实际的，代表一个具体事物<br>3、类对象的模板，对象是类的一个个体，实例</p><p>三、类和对象定义方法（写法）<br>类的定义方法：</p><p><img src="C:\Users\kirk\Desktop\Java基础知识整理\20210714164115933.png" class="lazyload placeholder" data-srcset="C:\Users\kirk\Desktop\Java基础知识整理\20210714164115933.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="类的定义"></p><p>对象的定义方法：<br>1、创建一个对象；<br>2、实例化一个对象；<br>3、对类 实例化…<br>对象就是实例，实例就是对象。Java最大的特点就是面向对象。</p><p>四、类的相关变量<br>1.成员变量<br>成员变量是类的一个组成部分，一般是基本数据类型，也可是引用类型。比如我们前面定义 狗类的 int age； 就是成员变量。</p><p>2.成员方法<br>成员方法也叫成员函数<br>public 返回数据类型 方法名(参数列表)<br>{<br>语句;&#x2F;&#x2F;方法(函数)主体<br>}<br>1、参数列表：表示成员函数输入<br>2、数据类型(返回类型)：表示成员函数输出<br>3、函数主体：表示为了实现某一功能代码块<br>以，之前定义的狗类为例，写一个类的成员方法say()：</p><p>&#x2F;&#x2F;定义狗类，有名字，颜色，年龄</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line">String name;</span><br><span class="line">String color;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="comment">// 成员方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;汪汪...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3.</span>类变量和类方法</span><br><span class="line">类变量是该类的所有对象共享的变量，任何一个该类的对象去访问它时，取到的都是相同的 值，同样任何一个该类的对象去修改它时，修改的也是同一个变量。</span><br><span class="line">如何定义类变量？</span><br><span class="line">定义语法： 访问修饰符 <span class="keyword">static</span> 数据类型 变量名;</span><br><span class="line">如何访问类变量？</span><br><span class="line">类名.类变量名 或者 对象名.类变量名</span><br></pre></td></tr></table></figure><p>什么是类方法，为什么有类方法？<br>类方法是属于所有对象实例的，其形式如下：<br>访问修饰符 static 数据返回类型 方法名(){}<br>注意：类方法中不能访问非静态变量(类变量)。<br>使用：类名.类方法名 或者 对象名.类方法名 。<br>*****重点:static 静态的方法可以访问 static 静态变量，不能访问非静态变量(类变量) 非静态方法可以访问非静态变量(类变量)同时也可以访问 static 静态变量。</p><p>类变量与实例变量区别：<br>加上 static 称为类变量或静态变量，否则称为实例变量<br>类变量是与类相关的，公共的属性<br>实例变量属于每个对象个体的属性<br>类变量可以通过 [类名.类变量名] 直接访问</p><p>何为局部变量？<br>局部变量就是方法里定义的变量。</p><p>局部变量仅作用在局部区域中，从定义开始到大括号或者return结束，生命周期短。</p><p>局部变量存储：基本数据类型变量放在栈中，引用数据类型放在堆中</p><p>局部变量可以先定义再初始化，也可以定义的同时初始化，局部变量没有默认初始值。</p><p>何为成员变量？<br>成员变量就是定义在类里方法外的变量，也叫全局变量。<br>成员变量又分为：实例变量和类变量。<br>类变量也叫静态变量，即在变量前加static 的变量；</p><p>实例变量也叫对象变量，即没加static 的变量；</p><p>区别在于：类变量是所有对象共有，其中一个对象将它值改变，其他对象得到的就是改变后的结果；</p><p>而实例变量则为对象私有，某一个对象将其值改变，不影响其他对象</p><p>3.构造方法<br>构造方法是类的一种特殊的方法，它的主要作用是完成对新对象的初始化。它有几个特点： 1、方法名和类名相同<br>2、没有返回值<br>3、在创建一个类的新对象时，系统会自动的调用该类的构造方法完成对新对象的初始化。 特别说明： 一个类可以定义多个不同的构造方法。</p><p>类的构造方法小结：<br>1、构造方法名和类名相同；<br>2、构造方法没有返回值；<br>3、主要作用是完成对新对象的初始化；<br>4、在创建新对象时，系统自动的调用该类的构造方法；<br>5、一个类可以有多个构造方法；<br>6、每个类都有一个默认的构造方法。</p><p>五、对象的相关<br>1.如何创建对象<br>创建一个对象有两种方法<br>1、先声明再创建<br>①对象声明：类名 对象名<br>②、对象创建：对象名&#x3D;new 类名()<br>2、一步到位法<br>类名 对象名&#x3D;new 类名()</p><p>2.如何访问对象<br>对象–如何访问(使用)对象的成员变量：<br>对象名.变量名;<br>对象总是存在内存中的。</p><p>3.this对象<br>this 是属于一个对象，不属于类的。<br>java 虚拟机会给每个对象分配this,代表当前对象，在类定义的方法中使用。</p></li><li><p>继承、多态和封装：继承允许一个类继承另一个类的属性和方法；多态允许不同类的对象对同一消息作出不同响应；封装将类的实现细节隐藏起来，只提供公共接口。</p></li><li><p>接口和抽象类：接口定义了一组方法的规范，而抽象类是一个不能实例化的类，通常包含抽象方法和具体方法。</p></li><li><p>包和访问修饰符：包用于组织和管理类，访问修饰符控制类、方法和变量的访问权限。</p></li><li><p>异常处理：Java 中的异常分为受检异常（checked exception）和非受检异常（unchecked exception），使用 try-catch-finally 块来处理异常。</p></li><li><p>static和final关键字</p><p>static<br>加载：static在类加载时初始化（加载）完成</p><p>含义：Static意为静态的，但凡被static 修饰说明属于类，不属于类的对象。</p><p>可修饰：Static 可以修饰 内部类、方法、成员变量、代码块。</p><p>不可修饰：Static不可修饰外部类、局部变量【static 属于类的，局部变量属于其方法，并不属于类】</p><p>注意：static 方法不能兼容this关键字【static代表类层次，this代表当前类的对象】</p><p><strong>static主要作用：方便调用没有创建对象的方法&#x2F;变量。</strong></p><p>关于static，博主特地写了一篇博客，如果对final概念不是特别清晰，大家可以看看</p><p>final<br>加载：final可以在编译（类加载）时初始化，也可以在运行时初始化，初始化后不能被改变。</p><p>可修饰：类、内部类、方法、成员变量、局部变量、基本类型、引用类型。</p><p>含义：final“最终的”的意思，在Java中又有意为常量的意思，也就是被final修饰的只能进行一次初始化！</p><p>被final修饰各种所蕴含的特殊意义：</p><p>1、 final 修饰基本类型：值不能被修改；</p><p>2、final 修饰引用类型：引用不可以被修改也就是说不能指向其他对象，但是该引用的对象内容可以被修改；</p><p>3、final 修饰 方法，方法不可以重写，但是可以被子类访问 【前提：方法不是 private 类型】。</p><p>4、final 修饰 类，类不可以被继承。</p></li></ul><h2 id="Java-核心类库"><a href="#Java-核心类库" class="headerlink" title="Java 核心类库"></a>Java 核心类库</h2><h3 id="数组-Array-和列表-ArrayList-有什么区别？"><a href="#数组-Array-和列表-ArrayList-有什么区别？" class="headerlink" title="数组(Array) 和列表(ArrayList) 有什么区别？"></a>数组(Array) 和列表(ArrayList) 有什么区别？</h3><p>空间大小：<code>Array</code>是否固定，<code>ArrayList</code>是动态增长的。<br>存储内容：前者可以包含基本类型和对象类型，而后者只能是对象类型。<br>功能方法：后者是前者的增强版，提供了更多的方法。<br>ArrayList 和 Vector的区别<br><code>Vector是线程安全的</code>，<code>ArrayList不是线程安全的</code>。<br>ArrayList在底层数组不够用时在原来的基础上扩展<code>0.5</code>倍，Vector是扩展<code>1</code>倍，特殊情况除外。</p><h3 id="HashMap，TreeMap，HashTable-的区别？"><a href="#HashMap，TreeMap，HashTable-的区别？" class="headerlink" title="HashMap，TreeMap，HashTable 的区别？"></a>HashMap，TreeMap，HashTable 的区别？</h3><p>Hashtable、HashMap、TreeMap都实现了Map接口，使用<code>键值对</code>的形式存储数据和操作数据。<br>Hashtable是java早期提供的，方法是<code>同步</code>的（加了<code>synchronized</code>）。<code>key和value都不能是null</code>值。<br>HashMap的方法<code>不是同步</code>的，<code>支持key和value为null的情况</code>。行为上基本和Hashtable一致。由于<code>Hashtable是同步的</code>，性能开销比较大，一般不推荐使用Hashtable。通常会选择使用HashMap。<br>HashMap进行put和get操作，基本上可以达到常数时间的性能。<br>TreeMap是基于红黑树的一种提供顺序访问的Map，和HashMap不同，它的get或put操作的时间复杂度是<code>O(log(n))</code>。具体的顺序由指定的<code>Comparator</code>来决定，或者根据键key的自然顺序来决定。</p><h3 id="HashMap-的工作原理是什么？"><a href="#HashMap-的工作原理是什么？" class="headerlink" title="HashMap 的工作原理是什么？"></a>HashMap 的工作原理是什么？</h3><p>HashMap在Map.Entry静态内部类实现中存储key-value对。HashMap使用<code>哈希算法</code>，在put和get方法中，它使用hashCode()和equals()方法。当我们通过传递key-value对调用put方法的时候，HashMap使用Key hashCode()和哈希算法来找出存储key-value对的索引。Entry存储在LinkedList中，所以如果存在entry，它使用equals()方法来检查传递的key是否已经存在，如果存在，它会覆盖value，如果不存在，它会创建一个新的entry然后保存。当我们通过传递key调用get方法时，它再次使用hashCode()来找到数组中的索引，然后使用equals()方法找出正确的Entry，然后返回它的值。<br>其它关于HashMap比较重要的问题是容量、负荷系数和阀值调整。HashMap默认的初始容量是16，负荷系数是0.75。阀值是为负荷系数乘以容量，无论何时我们尝试添加一个entry，如果map的大小比阀值大的时候，HashMap会对map的内容进行重新哈希，且使用更大的容量。容量总是2的幂，所以如果你知道你需要存储大量的key-value对，比如缓存从数据库里面拉取的数据，使用正确的容量和负荷系数对HashMap进行初始化是个不错的做法。<br>首先有一个数组成为哈希桶，每个桶中存放一个链表，当<code>链表的数据量大于8</code>时，桶中的数据结构由<code>链表变为红黑二叉树</code>，当红黑二叉树的<code>数据量降低为6</code>时，又退化到<code>链表结构</code>。(注意6-8时可能存在两者中的一种结构，并非确定，视具体情况而定)。</p><h3 id="什么是序列化，如何实现序列化？"><a href="#什么是序列化，如何实现序列化？" class="headerlink" title="什么是序列化，如何实现序列化？"></a>什么是序列化，如何实现序列化？</h3><p>序列化：把对象转换为字节序列的过程称为对象的序列化。<br>反序列化：把字节序列恢复为对象的过程称为对象的反序列化.<br>序列化是<code>类Object</code>和<code>流Stream</code>之间的转换。</p><h3 id="进程和线程有什么区别"><a href="#进程和线程有什么区别" class="headerlink" title="进程和线程有什么区别?"></a>进程和线程有什么区别?</h3><ul><li>进程是资源分配和调度的基本单位，线程是程序执行和调度的基本单位<br>资源拥有：同一进程内的线程共享本进程的资源，但是<code>进程之间的资源是独立的</code>。<br>健壮性能：一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。所以多进程要比多线程健壮。<br>切换开销：进程切换时，消耗的资源大，效率高。所以涉及到频繁的切换时，使用线程要好于进程。同样如果要求同时进行并且又要共享某些变量的并发操作，只能用线程不能用进程。<br>执行过程：每个独立的进程有一个程序运行的入口、顺序执行序列和程序入口。但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br>调度单位：处理器线程是处理器调度的基本单位，但是进程不是。<br>并发执行：两者均可并发执行。</li></ul><h3 id="java-当中如何实现线程呢"><a href="#java-当中如何实现线程呢" class="headerlink" title="java 当中如何实现线程呢?"></a>java 当中如何实现线程呢?</h3><p>在Java中实现线程有两种方式， 分别是继承<code> Thread</code> 类和实现 <code>Runnable</code> 接口<br>实现<code>Callable</code>接口，Callable+FutureTask还可以获取执行结果。</p><p>多线程并发或线程安全问题如何解决?<br>使用线程同步机制。对共享的资源进行加锁，或者分段加锁的方法。<br>使用线程间通信机制，保证数据资源的安全。</p><h3 id="synchronized-和-ReentrantLock-的区别"><a href="#synchronized-和-ReentrantLock-的区别" class="headerlink" title="synchronized 和 ReentrantLock 的区别"></a>synchronized 和 ReentrantLock 的区别</h3><p>构成层面不同：<br>隐式锁是JVM层面的，底层通过monitor对象来完成加解锁机制的，其中<code>wait/notify</code>等方法也依赖于该对象，因此推理得到：这两种方法也只能在同步块和同步方法中使用。<br>Lock方法是API层面的，是JDK5以后提供的具体的ReentrantLock类的方法。<br>使用方式不同：<br>synchronized由系统维护，程序<code>自动</code>进行锁的获取和释放操作，不易出错。<br><code>Lock需要手动获取和释放锁</code>。如果程序员代码不够严谨，极可能造成死锁现象。<br>等待是否可中断：<br>synchronized是<code>不可中断</code>的。除非抛出异常或者正常运行完成。<br>Lock<code>可以中断</code>的。中断方式：<br>调用设置超时方法<code>tryLock(long timeout ,timeUnit unit)</code><br>调用<code>lockInterruptibly()</code>放到代码块中，然后调用<code>interrupt()</code>方法可以中断</p><h3 id="加锁是否可设置公平："><a href="#加锁是否可设置公平：" class="headerlink" title="加锁是否可设置公平："></a>加锁是否可设置公平：</h3><p>synchronized没有设置的入口，它是<code>非公平锁</code>。<br>Lock是可以设置是否为公平锁的，构造方法传入参数为true则为公平锁，缺省为false。<br>精确唤醒线程：<br>synchronized要么随机唤醒一个线程，要么唤醒所有线程。<br>Lock用来实现分组唤醒需要唤醒的线程，可以精确唤醒。<br>性能区别：<br>Java1.5版本中synchronized会导致JVM需要调用操作接口，可能导致加锁消耗时间过长，java1.6版本后进行了优化，与Lock差不多。Lock由于是Java写的API执行性能较好。<br>悲观锁和乐观锁：<br><code>synchronized</code>采用的是CPU<code>悲观锁</code>机制(线程获得的是独占锁)，而<code>Lock</code>采用的是<code>乐观锁</code>机制。</p><h3 id="String、StringBuilder、StringBuffer："><a href="#String、StringBuilder、StringBuffer：" class="headerlink" title="String、StringBuilder、StringBuffer："></a>String、StringBuilder、StringBuffer：</h3><p>String 用于操作字符串，StringBuilder 和 StringBuffer 用于高效地构建字符串。</p><p>String 是不可变字符串对象，每次修改字符串都会<code>创建新对象</code><br>StringBuilder、StringBuffer 是可变字符串序列（对象），StringBuilder 和 StringBuffer 在修改字符串时不会创建新对象<br>当需要对字符串频繁的修改时，推荐使用StringBuilder 或 StringBuffer<br>StringBuffer是jkd 1.0 提供的。StringBuilder是jdk 1.5提供的，二者的常用方法名 和实现原理是一样的。区别在于StringBuffer是线程安全的，StringBuilder是线程不安全的。如果不涉及线程安全问题，推荐使用StringBuilder,因为它的效率会更高一些<br>执行效率上： StringBuilder 快于 StringBuffer 快于 String</p><p>  - Collection Framework：提供了集合类，如 List、Set、Map，以及它们的实现类和工具类。</p><p>  - 迭代器和 foreach 循环：用于遍历集合中的元素。</p><p>  - 泛型：允许在编译时检查程序的类型安全性。</p><p>  - 文件 I&#x2F;O：用于读写文件和处理文件系统。</p><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p>什么是进程？是什么线程？ * * *<br>线程是处理器任务调度和执行的基本单位，进程是操作系统资源分配的基本单位。</p><p>进程是程序的一次执行过程，是系统运行的基本单位。线程是一个比进程更小的执行单位，一个进程可以包含多个线程。</p><p>进程和线程的关系？（区别） * * *<br>定义：线程是处理器任务调度和执行的基本单位；进程是操作系统资源分配的基本单位。</p><p>包含关系：一个进程可以包含多个线程。</p><p>  - 线程和线程池：线程是程序执行的单元，线程池是管理和重用线程的机制。</p><p>  <code>synchronized</code> 和<code>volatile</code>关键字：用于实现线程同步和保证可见性。</p><p>  - 并发集合类：提供了线程安全的集合类。</p><p>  - 锁机制（ReentrantLock、ReadWriteLock）：用于控制多个线程对共享资源的访问。</p><p>  - 线程间通信：通过 wait、notify 和 notifyAll 方法实现线程间的通信。</p><h2 id="JVM-和垃圾回收"><a href="#JVM-和垃圾回收" class="headerlink" title="JVM 和垃圾回收"></a>JVM 和垃圾回收</h2><p>  - JVM 架构和内存模型：包括类加载器、运行时数据区域等。</p><p>1、说说你了解的<code>JVM内存模型</code><br>得分点 </p><p><code>类加载子系统</code>、<code>运行时数据区</code>、<code>执行引擎</code></p><p>JVM由三部分组成：类加载子系统、运行时数据区、执行引擎</p><p>类加载子系统：通过类加载机制加载类的class文件，如果该类是第一次加载，会执行加载、验证、解析。只负责class文件的加载，至于是否可运行，则由执行引擎决定。</p><p>类加载过程是在类加载子系统完成的：加载 –&gt; 链接（验证 –&gt; 准备 –&gt; 解析） –&gt; 初始化</p><p>运行时数据区：</p><p>在程序运行时，存储程序的内容（例如字节码、对象、参数、返回值等）。运行时数据区包括本地方法栈、虚拟机栈、方法区、堆、程序计数器。</p><p>只有方法区和堆是各线程共享的进程内存区域，其他运行区都是每个线程可以独立拥有的。</p><p>本地方法栈：存放本地方法调用过程中的栈帧。用于管理本地方法的调用，本地方法是C语言写的。不是所有虚拟机都支持本地方法栈，例如Hotspot虚拟机就是将本地方法栈和虚拟机栈合二为一。栈解决程序的运行问题，即程序如何执行、如何处理数据。<br>栈帧：栈帧是栈的元素，由三部分组成，即局部变量表（存方法参数和局部变量）、操作数栈（存方法执行过程中的中间结果，或者其他暂存数据）和帧数据区（存方法返回地址、线程引用等附加信息）。<br>虚拟机栈：存放Java方法调用过程中的栈帧。用于管理Java方法的调用，Java方法是开发时写的Java方法。<br>方法区：可以看作是一块独立于Java堆的内存空间，方法区是各线程共享的内存区域。<br>方法区和永久代、元空间的关系：方法区是一个抽象概念，永久代和元空间是方法区的实现方式。<br>永久代：属于JVM方法区的内存，用来存储类的元数据，如类名、方法信息、字段信息等一些静态的数据。JDK7及之前方法区也叫永久代。缺点是内存大小固定，容易出现oom问题。可以通过-XX:PermSize设置永久代大小。永久代对象只能通过Major GC（又称Full GC）进行垃圾回收。<br>元空间：是Hotspot在JDK8引入的，用于取代永久代。元空间属于本地内存，由操作系统直接管理，不再受JVM管理。同时内存空间可以自动扩容，避免内存溢出。默认情况下元空间可以无限使用本地内存，也可以通过-XX:MetaspaceSize限制内存大小。<br>常量池：就是一张表，JVM根据这张常量表找到要执行的类信息和方法信息<br>类常量池：是.class字节码文件中的资源仓库，主要存放字面量（表示字符串值和数值，例如字符串值”abc”、final常量、静态变量）和符号引用（类和接口的全限定名、字段名、方法名）。<br>运行时常量池：类加载的“加载”阶段会创建运行时常量池，统一存放各个类常量池去重后的符号引用。在类加载的“解析”阶段JVM会把运行时常量池的这些符号引用转为直接引用。类常量池。类常量池在字节码文件中的，运行时常量池在内存中。<br>字符串常量池：专门针对String类型设计的常量池。是当前应用程序里所有线程共享的，每个jvm只有一个字符串常量池。存储字符串对象的引用。在创建String对象时，JVM会先在字符串常量池寻找是否已存在相同字符串的引用，如果有的话就直接返回引用，没的话就在堆中创建一个对象，然后常量池保存这个引用并返回引用。<br>堆：存放对象实例、实例变量、数组，包括新生代（伊甸园区、幸存区S0和S1）和老年代。堆是垃圾收集器管理的内存区域。堆解决的是数据存储的问题，即数据怎么放、放在哪儿。堆实际内存空间可以不连续，大小可以选择固定大小或可扩展，堆是各线程共享的内存区域。<br>程序计数器（PC寄存器）：存放下一条字节码指令的地址，由执行引擎读取下一条字节码指令并转为本地机器指令进行执行。是程序控制流（分支、循环、跳转、线程恢复）的指示器，只有它不会抛出OutOfMemoryError。每个线程有自己独立的程序计数器，以便于线程在切换回来时能知道下一条指令是什么。程序计数器生命周期与线程一致。<br>执行引擎：<code>将字节码指令解释/编译为对应平台上的本地机器指令</code>。充当了将高级语言翻译为机器语言的译者。执行引擎在执行过程中需要执行什么样的字节码指令依赖于PC寄存器。每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址。</p><p>字节码指令（JVM指令）：字节码文件中的指令，内部只包含一些能够被JVM所识别的字节码指令、符号表，以及其他辅助信息，不能够直接运行在操作系统之上。<br>本地机器指令：可以直接运行在操作系统之上。</p><p>  - 类加载器：负责将类加载到 JVM 中。</p><p>  - 垃圾回收算法和垃圾收集器：包括标记-清除、标记-整理、复制等算法，以及串行、并行、并发、G1 等收集器。</p><p>  - 常见 JVM 参数和调优技巧：如堆大小、栈大小、GC 参数等。</p><h2 id="Java-核心特性"><a href="#Java-核心特性" class="headerlink" title="Java 核心特性"></a>Java 核心特性</h2><p>  - Lambda 表达式和函数式接口：用于简化代码和实现函数式编程。</p><p>  - Stream API：用于处理集合数据的流式操作。</p><p>  - Optional 类：用于处理可能为空的对象。</p><p>  - 新的日期时间 API：提供了更灵活、更强大的日期时间处理功能。</p><h2 id="Java-EE-相关知识"><a href="#Java-EE-相关知识" class="headerlink" title="Java EE 相关知识"></a>Java EE 相关知识</h2><p>  - Servlet 和 JSP：用于构建 Web 应用程序的基础技术。</p><p>  - Spring 框架（IoC、DI、AOP）：Spring 是一个轻量级的 Java 开发框架，提供了控制反转（IoC）、依赖注入（DI）和面向切面编程（AOP）等功能。</p><p>  - Hibernate 或其他 ORM 框架：用于简化数据库访问和操作的对象关系映射（ORM）框架。</p><p>  - RESTful Web 服务：基于 REST 架构风格设计的 Web 服务，使用 HTTP 协议进行通信。</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>  - 创建型模式：包括工厂模式、单例模式、建造者模式等，用于创建对象的模式。</p><p>  - 结构型模式：包括适配器模式、装饰器模式、代理模式等，用于组织类和对象的结构。</p><p>  - 行为型模式：包括观察者模式、策略模式、模板方法模式等，用于定义对象之间的通信和控制流程。</p><h2 id="算法和数据结构"><a href="#算法和数据结构" class="headerlink" title="算法和数据结构"></a>算法和数据结构</h2><p>  - 常见排序和查找算法：如冒泡排序、快速排序、二分查找等。</p><p>  - 树、图、堆等数据结构：了解常见的数据结构及其应用场景。</p><p>  - 算法复杂度分析：了解算法的时间复杂度和空间复杂度，并能进行复杂度分析。</p><h2 id="数据库知识"><a href="#数据库知识" class="headerlink" title="数据库知识"></a>数据库知识</h2><p>  - SQL 基础：掌握 SQL 语言的基本语法和常用操作。</p><p>  - 数据库事务：了解事务的 ACID 特性和事务管理。</p><p>  - SQL 优化：掌握 SQL 查询性能优化的技巧和方法。</p><p>  - NoSQL 数据库：了解 NoSQL 数据库的特点和应用场景。</p><h2 id="常用开发工具和框架"><a href="#常用开发工具和框架" class="headerlink" title="常用开发工具和框架"></a>常用开发工具和框架</h2><h3 id="Spring-AOP面向切面："><a href="#Spring-AOP面向切面：" class="headerlink" title="Spring AOP面向切面："></a>Spring AOP面向切面：</h3><p>将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，减少系统的重复代码，降低模块间的耦合度等。简单的说他就是把我们程序重复的代码抽取出来，在需要执行的时候使用动态代理技术在不修改源码的基础上，对我们的已有方法进行增强。</p><h3 id="Spring-依赖注入和控制反转"><a href="#Spring-依赖注入和控制反转" class="headerlink" title="Spring-依赖注入和控制反转"></a>Spring-依赖注入和控制反转</h3><p>什么是动态代理?</p><p>一般使用代理模式我们需要先定义一个接口，<strong>静态代理只是一种简单的java代码功能扩展</strong>。而<strong>动态代理利用了反射机制</strong>，使用更简单，但背后逻辑…先说明一点，<strong>动态代理代理的是接口，而不是类，Proxy类产生的代理对象是Proxy的一个实例，这个实例实现了我们定义的接口</strong>动态代理就是，在程序运行期，创建目标对象的代理对象，并对目标对象中的方法进行功能性增强的一种技术。在生成代理对象的过程中，目标对象不变，代理对象中的方法是目标对象方法的增强方法。可以理解为运行期间，对象中方法的动态拦截，在拦截方法的前后执行功能操作。</p><p>一、静态代理<br>面向接口的编程，代理类与真实类继承自同一个接口（或者继承某个类）</p><p>二、动态代理<br>它通过java反射机制，获取某个被代理类的所有接口，并创建代理类。接口类和被代理类同上</p><p>JDK动态代理：利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。<br>CGlib动态代理：利用ASM（开源的Java字节码编辑库，操作字节码）开源包，将代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</p><p>区别：JDK代理只能对实现接口的类生成代理；CGlib是针对类实现代理，对指定的类生成一个子类，并覆盖其中的方法，这种通过继承类的实现方式，不能代理final修饰的类。</p><p>代理类需要实现InvocationHandler 接口，invoke()虽然没有被显式调用，但该方法也一定被执行了，对应的三个参数分别传入的是：代理类的实例，method是调用的方法，即需要执行的方法；args是方法的参数；</p><p>代理类在程序运行期间，创建的代理对象称之为动态代理对象。这种情况下，创建的代理对象，并不是事先在Java代码中定义好的。而是在运行期间，根据我们在动态代理对象中的“指示”，动态生成的。也就是说，你想获取哪个对象的代理，动态代理就会为你动态的生成这个对象的代理对象。动态代理可以对被代理对象的方法进行功能增强。有了动态代理的技术，那么就可以在不修改方法源码的情况下，增强被代理对象的方法的功能，在方法执行前后做任何你想做的事情。</p><p>创建代理对象的两个方法：<br>&#x2F;&#x2F;JDK动态代理</p><p>Proxy.newProxyInstance(三个参数);</p><p>&#x2F;&#x2F;CGLib动态代理</p><p>Enhancer.create(两个参数);</p><p>依赖注入是指在对象创建的过程中，将其依赖的其他对象（即依赖）注入到对象中，而不是由对象自己创建或查找依赖的对象。<br>我们常见的注入模式有三种：</p><ol><li>构造器注入</li><li>Setter注入</li><li>接口注入</li></ol><p>举个例子：<br>你需要找一个工作，一般情况的写简历去看什么公司在招人。然后面试，入职；<br>但是现在有一个机构收集了你的简历，一旦你需要找工作。大数据直接推荐完成面试，入职流程。<br>这个过程中，找工作的控制权就被反转。原本你自己筛选，现在机构充当一个容器，将你纳入其中进行管理。<br>这个就是反转控制：你不用自己去找，直接看offer入职吧。</p><p>需要注意的是：反转控制不是一种技术，而是一种思想。</p><h3 id="Spring-Bean-的生命周期"><a href="#Spring-Bean-的生命周期" class="headerlink" title="Spring Bean 的生命周期"></a>Spring Bean 的生命周期</h3><ol><li>Bean 的实例化。实例化一个 bean 对象；</li><li>Bean 属性填充。为 bean 设置相关属性和依赖；</li><li>Bean 初始化。</li><li>Bean 销毁方法注册。</li></ol><h3 id="springboot自动装配原理"><a href="#springboot自动装配原理" class="headerlink" title="springboot自动装配原理"></a>springboot自动装配原理</h3><p>  - JUnit 或 TestNG：用于单元测试的框架。</p><p>  - 日志框架（如 Log4j、SLF4J）：用于记录应用程序日志。</p><p>  - 版本控制工具（如 Git、SVN）：用于版本管理和团队协作。</p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>  - 输入验证和输出编码：防止注入攻击和跨站脚本攻击。</p><p>  - XSS 和 CSRF 攻击：了解常见的 Web 安全漏洞和防范措施。</p><p>  - 身份认证和授权：保护系统资源不被未经授权的用户访问。</p><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>  - 代码优化技巧：优化算法、减少内存消耗等。</p><p>  - 缓存机制：利用缓存提升系统性能。</p><p>  - 垃圾回收优化：调整 JVM 参数和垃圾收集器以提高性能。</p><h2 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h2><p>  - SOLID 原则：单一职责原则、开闭原则、里氏替换原则、接口隔离原则、依赖倒置原则。</p><p>  - DRY 原则：不要重复自己。</p><p>  - KISS 原则：保持简单和直观。</p><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p>  - Socket 编程：使用 Socket API 实现网络通信。</p><p>TCP的三次握手和四次挥手</p><pre><code>  1、第一次握手：客户端给服务器发送一个 SYN 报文。    2、第二次握手：服务器收到 SYN 报文之后，会应答一个 SYN+ACK 报文。  3、第三次握手：客户端收到 SYN+ACK 报文之后，会回应一个 ACK 报文。  4、服务器收到 ACK 报文之后，三次握手建立完成。  作用是为了确认双方的接收与发送能力是否正常。</code></pre><p>四次挥手也一样，千万不要对方一个 FIN 报文，我方一个 ACK 报文，再我方一个 FIN 报文，我方一个 ACK 报文。然后结束，最好是说的详细一点，例如想下面这样就差不多了，要把每个阶段的状态记好。</p><pre><code>  刚开始双方都处于 establised 状态，假如是客户端先发起关闭请求，则：  1、第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态。  2、第二次握手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 + 1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT状态。  3、第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。  4、第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 + 1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态  5、服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</code></pre><p>  - HTTP 协议：了解 HTTP 请求和响应的结构和常用方法。</p><p>HTTP:</p><p>　　（HyperText Transport Protocol）是<code>超文本传输协议的缩写</code>，它用于<code>传送WWW方式</code>的数据，关于HTTP协议的详细内容请参考RFC2616。HTTP协议采用了请求&#x2F;响应模型。</p><p>TCP:</p><p>　　（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、<code>基于字节流的传输层通信协议</code>，由IETF的RFC 793定义。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，用户数据报协议（UDP）是同一层内 [1]  另一个重要的传输协议。</p><p>IP:</p><p>　　<code>网络之间互连的协议</code>（IP）是Internet Protocol的外语缩写<br>　　网络之间互连的协议也就是为计算机网络相互连接进行通信而设计的协议</p><p>　　如今的IP网络使用<code>32</code>位地址，以<code>点分十进制</code>表示，如192.168.0.1。<br>　　地址格式为：IP地址&#x3D;网络地址+主机地址或 IP地址&#x3D;网络地址+子网地址+主机地址。</p><p>TCP、UPD简述<br>TCP<br>TCP是（Tranfer Control Protocol）的简称，是一种面向连接的保证可靠传输的协议。通过TCP协议传输，得到的是一个顺序的无差错的数据流。发送方和接收方的成对的两个socket之间必须建立连接，当一个socket（通常都是server socket）等待建立连接时，另一个socket可以要求进行连接，一旦这两个socket连接起来，它们就可以进行双向数据传输，双方都可以进行发送或接收操作。<br>UDP<br>UDP是（User Datagram Protocol）的简称，是一种无连接的协议，每个数据报都是一个独立的信息，包括完整的源地址或目的地址，它在网络上以任何可能的路径传往目的地，因此能否到达目的地，到达目的地的时间以及内容的正确性都是不能被保证的。</p><ol start="2"><li>Socket编程<br>2.1 什么是socket?<br>在网络编程中，网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket。<br>Socket套接字是通信的基石，是支持TCP&#x2F;IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。</li></ol><p>2.2 Socket原理<br>Socket实质上提供了进程通信的端点。进程通信之前，双方首先必须各自创建一个端点，否则是没有办法建立联系并相互通信的。正如打电话之前，双方必须各自拥有一台电话机一样。<br>套接字之间的连接过程可以分为三个步骤：服务器监听，客户端请求，连接确认。</p><p>服务器监听：是服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态。<br>客户端请求：是指由客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。<br>连接确认：是指当服务器端套接字监听到或者说接收到客户端套接字的连接请求，它就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，连接就建立好了。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</p><p>  - RESTful API 设计：设计符合 REST 架构风格的 Web 服务接口。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>  - Java 8 新特性：了解并掌握 Java 8 中引入的新特性，如 Stream API、Lambda 表达式等。</p><p>  - 编码规范和最佳实践：遵循良好的编码规范和最佳实践，提高代码可读性和可维护性。</p><p>  - 其他相关的技术和框架：根据具体需求，了解其他相关的技术和框架，如 RPC 框架、消息队列等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>熟悉mybatis</title>
      <link href="/2023/02/10/mybatis/"/>
      <url>/2023/02/10/mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="框架概述"><a href="#框架概述" class="headerlink" title="框架概述"></a>框架概述</h2><p>（说明：ctrl+p是查看函数参数，ctrl+h查看接口实现类）</p><p>mvc—web开发架构模型，m是数据，v是视图，c是控制器</p><p>&#x3D;&#x3D;三层架构&#x3D;&#x3D;：界面层(jsp,serverlet,html，controller包)，业务逻辑层(service调用dao)、数据访问层(增删改查，dao)</p><p>三层中类的交互：界面层–&gt;业务逻辑层–&gt;数据访问层(持久层)–&gt;数据库(mysql)</p><p>三层对应的处理框架：</p><blockquote><ul><li>界面层—servlet–springmvc</li><li>业务逻辑层–service–spring</li><li>数据访问层–dao–mybatis</li></ul></blockquote><img src="/2023/02/10/mybatis/image-20220111154751057.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220111154751057.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><img src="/2023/02/10/mybatis/image-20220111155503069.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220111155503069.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><img src="/2023/02/10/mybatis/image-20220111155617633.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220111155617633.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><img src="/2023/02/10/mybatis/image-20220111155733156.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220111155733156.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><h2 id="Mybatis框架快速入门"><a href="#Mybatis框架快速入门" class="headerlink" title="Mybatis框架快速入门"></a>Mybatis框架快速入门</h2><img src="/2023/02/10/mybatis/image-20220111162334492.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220111162334492.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><img src="/2023/02/10/mybatis/image-20220111213134498.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220111213134498.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><img src="/2023/02/10/mybatis/image-20220112170255354.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220112170255354.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><img src="/2023/02/10/mybatis/image-20220112211606382.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220112211606382.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><p>mybatis的动态代理：就是内部对dao接口进行类实现</p><h2 id="Mybatis框架Dao代理"><a href="#Mybatis框架Dao代理" class="headerlink" title="Mybatis框架Dao代理"></a>Mybatis框架Dao代理</h2><h3 id="深入理解参数"><a href="#深入理解参数" class="headerlink" title="深入理解参数"></a>深入理解参数</h3><p>多个参数：</p><ol><li>使用@Param</li></ol><img src="/2023/02/10/mybatis/image-20220116174102775.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220116174102775.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><ol start="2"><li><p>使用对象 </p></li><li><p>按位置(了解)</p></li></ol><img src="/2023/02/10/mybatis/image-20220116182412700.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220116182412700.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><ol start="4"><li><p>使用Map(了解)</p><img src="/2023/02/10/mybatis/image-20220116184807747.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220116184807747.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"></li><li><p>$和#的区别</p><img src="/2023/02/10/mybatis/image-20220116190931501.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220116190931501.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><img src="/2023/02/10/mybatis/image-20220116192234498.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220116192234498.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><blockquote><p>#是占位符 $底层是字符串拼接，可能会出现sql注入：&#x3D;&#x3D;id&#x3D;+”‘李四’”;drop table student if exists;&#x3D;&#x3D;</p></blockquote></li></ol><h2 id="封装MyBatis输出结果"><a href="#封装MyBatis输出结果" class="headerlink" title="封装MyBatis输出结果"></a>封装MyBatis输出结果</h2><h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><p>resultType的值，1、类型的全限定名称  2、类型的别名</p><ol><li><p>简单类型</p><img src="/2023/02/10/mybatis/image-20220116200041809.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220116200041809.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"></li><li><p>对象类型</p><p><strong>resultType</strong>指结果类型，指sql语句执行完毕后，数据转化为的java对象</p><blockquote><p>&#x3D;&#x3D;在mybatis主配置文件中定义，使用<typeAliases>定义别名&#x3D;&#x3D;，之后就可以在resultType中直接使用别名</p><p>方式1、</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--type是全限定名称  alias是别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式2、(让对应的类名称为别名)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.domain&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.vo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>Map (用的比较少)</p></li></ol><blockquote><p> 返回Map，列名是map的key，列值是map的value</p></blockquote><blockquote><p>返回Map最多只能返回一行记录，多于一行就会错误</p></blockquote><h3 id="resultMap-结果映射"><a href="#resultMap-结果映射" class="headerlink" title="resultMap(结果映射)"></a>resultMap(结果映射)</h3><blockquote><p>指定列名和java对象的属性之间的对应关系，<strong>以下几种情况需要</strong>使用resultType</p><ul><li>如果我偏要把id给name属性呢，就要用着&#x3D;&#x3D;结果映射&#x3D;&#x3D;</li><li>当<strong>列名</strong>和<strong>属性名</strong>不同的时候需要使用</li></ul><p>&#x3D;&#x3D;在mapper文件中的配置&#x3D;&#x3D;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如何使用resultMap</span></span><br><span class="line"><span class="comment">1)先定义resultMap</span></span><br><span class="line"><span class="comment">2)在select标签，使用resultMap来引用1）定义的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--标签内 定义列和java对象属性的关系--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--column是列名(sql的)</span></span><br><span class="line"><span class="comment">property是属性名(java对象的)</span></span><br><span class="line"><span class="comment">主键列使用id标签</span></span><br><span class="line"><span class="comment">对于非主键列使用result标签</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   这是第一种方式 </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">select id,name,email,age from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">这是第二种方式：在sql语句中使用别名</span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">select id as 名,name as 名,email as 名,age as 名 from student</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试程序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectAllStudentTest</span><span class="params">()</span>&#123;</span><br><span class="line">        SqlSession sqlSession=MyBatisUtils.getSqlSession();</span><br><span class="line">        StudentDao dao=sqlSession.getMapper(StudentDao.class);</span><br><span class="line">        List&lt;Student&gt; students=dao.selectAllStudent();</span><br><span class="line">        students.forEach(student -&gt; System.out.println(student));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>resultType和resultMap不要一起用，二选一</strong></p></blockquote><h3 id="Like模糊查询"><a href="#Like模糊查询" class="headerlink" title="Like模糊查询"></a>Like模糊查询</h3><blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基本命令</title>
      <link href="/2023/01/20/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/01/20/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a>linux命令</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><hr/><h3 id="快捷操作"><a href="#快捷操作" class="headerlink" title="快捷操作"></a>快捷操作</h3><p>tab &#x3D;&#x3D;&#x3D; 补齐功能</p><p>history [n] &#x3D;&#x3D;&#x3D; 查看历史命令，<code>history n</code> 可执行第n个命令</p><p>上下键 &#x3D;&#x3D;&#x3D; 切换上下命令</p><p>home 和 end &#x3D;&#x3D;&#x3D; 光标移动至行首或行尾</p><p>clear 和 Ctrl + L &#x3D;&#x3D;&#x3D; 清屏</p><p>alias 别名 &#x3D;  ‘ 命令或参数 ‘ &#x3D;&#x3D;&#x3D; 定义快捷命令</p><p>unalias 别名</p><p>id (用户) &#x3D;&#x3D;&#x3D; id信息</p><hr/><h3 id="电源命令"><a href="#电源命令" class="headerlink" title="电源命令"></a>电源命令</h3><p>shutdown &#x3D;&#x3D;&#x3D; 关闭计算机，仅 root 用户可用</p><p> <code>-h</code> 关机后关电源</p><p> <code>r</code> 关机后打开电源（重启）</p><p> <code>-t</code> 在改变到其他运行级别之前，告诉 init 程序多久以后关机</p><p><code>-k</code> 并不是真正的关机，发送关机信号给每位登录用户</p><p><code>-F</code> 重启计算机后强制fsck（文件系统检测）</p><p> <code>- time</code> 设定关机前的时间</p><p>halt &#x3D;&#x3D;&#x3D; 关闭系统</p><p> <code>-n</code> 保存数据后重启</p><p><code>-f</code> 强制关闭</p><p><code>-i</code> 关机前会关掉所有网络接口</p><p><code>d</code> 关闭系统，不留下日志记录</p><p>reboot &#x3D;&#x3D;&#x3D; 重启</p><p><code>-i</code> 重启前关闭网络设置</p><hr/><p>passwd  [用户名] &#x3D;&#x3D;&#x3D; 修改密码</p><p>su username &#x3D;&#x3D;&#x3D; 切换用户</p><p>sh &#x3D;&#x3D;&#x3D; 切换shell操作</p><p>ip addr &#x3D;&#x3D;&#x3D; 查看ip</p><p>chmod &#x3D;&#x3D;&#x3D; 增加文件的可执行权限</p><p>last &#x3D;&#x3D;&#x3D; 登录记录 <code>-n</code> 显示最近n条记录</p><hr/><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>pwd &#x3D;&#x3D;&#x3D; 显示当前工作目录</p><p> <code>-L</code>  目录连接链接时输出连接路径 </p><p> <code>-P</code> 输出物理路径</p><p>cd &#x3D;&#x3D;&#x3D; 返回主目录</p><p> <code>/url</code> 进入 url 目录</p><p> <code>..</code> 返回上一级</p><p> <code>.</code> 进入当前目录</p><p> <code>-</code> 进入前一个目录</p><p> <code>~</code> 进入主目录</p><p>ls &#x3D;&#x3D;&#x3D; 列出当前目录下所有文件和目录</p><p> <code>-a</code> 显示所有文件和目录</p><p> <code>-l</code> 列出详细</p><p> <code>-t</code> 按文件建立时间先后次序列排序</p><p> <code>-R</code> 子目录也列出</p><p>mkdir &#x3D;&#x3D;&#x3D; 创建目录</p><p>cp &#x3D;&#x3D;&#x3D; 复制文件或目录</p><p> <code>-a</code> 保留链接、文件属性</p><p> <code>-p</code> 复制修改时间和访问权限</p><p> <code>-r</code> 复制改目录下的所有子目录和文件</p><p> <code>-l</code> 不复制文件只生成链接文件</p><p>mv &#x3D;&#x3D;&#x3D; 移动文件或目录</p><p> <code>-b</code> 覆盖文件前先备份</p><p> <code>-f</code> 强制移动，如果目标文件已存在，直接覆盖</p><p> <code>-i</code> 若目标文件已存在，则询问是否覆盖</p><p> <code>-u</code> 若目标文件已存在，且 source 比较新，才会更新</p><p>rm &#x3D;&#x3D;&#x3D; 删除文件</p><p> <code>-f</code> 忽略不存在的文件，强制删除</p><p> <code>-i</code> 进行互交式删除</p><p> <code>-r</code> 递归删除</p><p> <code>-v</code> 详细显示进行步骤</p><p>cat &#x3D;&#x3D;&#x3D; 读取文件全部内容，cat &gt;(&gt;&gt;) filename &#x3D;&#x3D;&#x3D; 编辑文件，cat file1 file2 &gt; file3 &#x3D;&#x3D;&#x3D; 将文件合并为file3</p><p> <code>-A</code> 显示不可打印的字符</p><p> <code>-b</code> 对非空输出行编号</p><p> <code>-E</code> 在每行结束处显示$</p><p> <code>-s</code> 当有多个空行在一起时只输出一个空行</p><p> <code>-n</code> 由1开始对输出的所有行编号 </p><hr/><h3 id="分页和查找"><a href="#分页和查找" class="headerlink" title="分页和查找"></a>分页和查找</h3><p>head &#x3D;&#x3D;&#x3D; 显示文件开头10行内容，<code>-n</code> 显示前n行</p><p> <code>-q</code> 隐藏文件名</p><p> <code>-v</code> 显示文件名</p><p> <code>-c</code> 显示字节数</p><p>tail &#x3D;&#x3D;&#x3D; 读取文件尾部</p><p> <code>-f</code> 循环读取</p><p> <code>-q</code> 不显示处理信息</p><p> <code>-v</code> 显示详细的处理信息</p><p> <code>-c</code> &lt;数目&gt;显示的字节数</p><p> <code>-n</code> &lt;行数&gt;显示行数</p><p>more &#x3D;&#x3D;&#x3D; 逐页阅读文件</p><p> <code>+n</code> 从第 n 行开始显示</p><p> <code>-n</code> 定义屏幕大小为 n 行</p><p> <code>+/pattern</code> 搜索改字串（pattern），然后从该字串前两行开始显示</p><p> <code>-c</code> 全屏再显示</p><p>快捷键：</p><p> <code>Enter</code> 向下 n 行，需自己定义</p><p> <code>Ctrl+F</code> or <code>空格键</code> 向下滚动一页</p><p> <code>Ctrl+B</code> 返回上一页</p><p> <code>=</code> 输出当前行的行号</p><p> <code>V</code> 调用 vi 编辑器</p><p> <code>!命令</code> 调用 shell 并执行命令</p><p> <code>q</code> 退出 </p><p>less &#x3D;&#x3D;&#x3D; 读取内容，在查看之前不会加载整个文件</p><p> <code>/字符串</code> 向下搜索</p><p> <code>?字符串</code> 向上搜索</p><p> <code>q</code> 退出</p><p> <code>空格键</code> 滚动一页</p><p> <code>Enter</code> 滚动一行</p><p>find &#x3D;&#x3D;&#x3D; 在指定目录下查找文件</p><p> <code>-name</code> 按照文件名查找</p><p> <code>perm</code> 按照文件权限查找</p><p> <code>-user</code> 按照文件属主查找</p><p> <code>-type</code> d - 目录 f - 一般文件 l - 软链接</p><p> <code>-mtime -n +n</code> 按照文件更改时间查找</p><p>which &#x3D;&#x3D;&#x3D; 在 PATH 所指定的目录中查找可执行文件</p><p>cut &#x3D;&#x3D;&#x3D; 提取列或字段</p><p> <code>-b</code> 仅显示行中指定直接范围的内容</p><p> <code>-c[范围]</code> 仅显示行中指定范围的字符</p><p> <code>-d</code> 指定字段的分隔符，默认字段分隔符为 TAB</p><p> <code>-f[范围]</code> 显示指定第 num 个字段内容，可以用逗号隔开显示多个字段</p><hr/><h3 id="压缩和打包"><a href="#压缩和打包" class="headerlink" title="压缩和打包"></a>压缩和打包</h3><p>gzip &#x3D;&#x3D;&#x3D; 进行压缩或解压文件</p><p> <code>-d</code> or <code>--decompress</code> or <code>---uncompress</code> 解开压缩文件</p><p> <code>-f</code> or <code>-force</code> 强行压缩文件</p><p> <code>-l</code> or <code>--list</code> 列出压缩文件相关信息</p><p> <code>-r</code> or <code>--recursive</code> 递归处理，将指定目录下及子目录一并处理</p><p> <code>-v</code> or <code>--verbose</code> 显示执行过程</p><p>tar &#x3D;&#x3D;&#x3D; 打包文件或目录</p><p> <code>-c</code> 建立新的压缩文件</p><p> <code>-x</code> 从压缩文件中提取文件</p><p> <code>-t</code> 显示压缩文件内容</p><p> <code>-z</code> 支持 gzip 解压文件</p><p> <code>-j</code> 支持 bzip2 解压文件</p><p> <code>-v</code> 显示操作过程</p><p> <code>-C</code> 指定解压的路径</p><p>ln &#x3D;&#x3D;&#x3D; 创建链接文件（默认硬链接）</p><p> <code>-b</code> 删除，覆盖以前建立的链接</p><p> <code>-d</code> 允许超级用户制作目录的硬链接</p><p> <code>-f</code> 强制执行</p><p> <code>-i</code> 交互模式，文件存在则提示用户是否覆盖</p><p> <code>-n</code> 把符号链接视为一般目录</p><p> <code>-s</code> 软连接（符号链接）</p><hr/><h2 id="用户命令"><a href="#用户命令" class="headerlink" title="用户命令"></a>用户命令</h2><p>useradd &#x3D;&#x3D;&#x3D; 创建用户账号，并保存到 &#x2F;etc&#x2F;passwd 文件中</p><h2 id="RPM-DNF"><a href="#RPM-DNF" class="headerlink" title="RPM &amp; DNF"></a>RPM &amp; DNF</h2><p>rpm &#x3D;&#x3D;&#x3D; 用于安装、删除、升级、刷新和查询软件</p><p> <code>-i</code> 指定安装的软件包</p><p> <code>-h</code> 使用 ‘#（hash）’ 符显示 rpm 详细的安装过程及进度</p><p> <code>-v</code> 显示安装的详细过程</p><p> <code>-U</code> 升级指定的软件包</p><p> <code>-q</code> 查询系统是否已安装指定的软件包或查询指定 rpm 包内容信息</p><p> <code>-a</code> 查看系统已安装的所有软件包</p><p> <code>-V</code> 查询已安装的软件包的版本信息</p><p> <code>-c</code> 显示所有配置文件</p><p> <code>-p</code> 查询&#x2F;校验一个软件包文件</p><p>DNF &#x3D;&#x3D;&#x3D; 软件源服务，软件源是 Linux 系统免费的应用程序安装仓库</p><p>安装 DNF 包管理器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必须先安装并启用 epel-release 依赖</span></span><br><span class="line">yum install epel-release (-y)</span><br><span class="line"><span class="comment"># 使用 epel-release 依赖中的 yum 命令来安装 DNF 包</span></span><br><span class="line">yum install dnf</span><br></pre></td></tr></table></figure><p>DNF配置文件（&#x2F;etc&#x2F;dnf&#x2F;dnf.conf）</p><p>配置远程软件源仓库</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=repository_name</span><br><span class="line">baseurl=repository_url</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置本地软件源仓库</span></span><br><span class="line">dnf install createrepo</span><br><span class="line"><span class="comment"># 将需要的软件包放置在目录下</span></span><br><span class="line">createrepo --database /目录</span><br></pre></td></tr></table></figure><h2 id="源代码软件安装"><a href="#源代码软件安装" class="headerlink" title="源代码软件安装"></a>源代码软件安装</h2><ol><li><p>下载源码包并解压（校验包完整性）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget /https://*/*.tgz</span><br><span class="line">tar -zxvf *.tgz</span><br></pre></td></tr></table></figure></li><li><p>查看README和INSTALL文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> README</span><br></pre></td></tr></table></figure></li><li><p>创建Makefile文件 - 通过执行 <code>./configure</code> 脚本命令生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/name</span><br></pre></td></tr></table></figure></li><li><p>编译 - 在包目录下通过 make 命令将源码自动编译成二进制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>安装软件 - 通过 make install 安装命令来将上步编译出来的二进制文件安装到对应的目录中区，默认的安装路径为 <code>/usr/local/</code>，相应的配置文件位置为 <code>/usr/local/etc</code></p></li></ol><h2 id="systemd管理服务"><a href="#systemd管理服务" class="headerlink" title="systemd管理服务"></a>systemd管理服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前正在运行的服务</span></span><br><span class="line">systemctl list -units --<span class="built_in">type</span> service</span><br><span class="line"><span class="comment"># 运行服务</span></span><br><span class="line">systemctl start name.service</span><br><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">systemctl stop name.service</span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">systemctl restart name.service</span><br><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> name.service</span><br><span class="line"><span class="comment"># 禁用服务</span></span><br><span class="line">systemctl <span class="built_in">disable</span> name.service</span><br></pre></td></tr></table></figure><h2 id="磁盘信息"><a href="#磁盘信息" class="headerlink" title="磁盘信息"></a>磁盘信息</h2><p>df -h &#x3D;&#x3D;&#x3D; 查看系统挂载、磁盘空间大小和利用率</p><p>fdisk &#x3D;&#x3D;&#x3D; 查看系统所有磁盘信息（DOS、BSD、SUN方案）</p><p>必要参数：</p><p> <code>-l</code> 列出所有分区表</p><p> <code>-u -l</code> 显示分区数目，会用分区数目取代柱面数目，来表示每个分区的起始地址</p><p> <code>-b&lt;分区大小&gt;</code> 指定没饿过分区的大小</p><p>选择参数：</p><p> <code>-s&lt;分区编号&gt;</code> 如（&#x2F;dev&#x2F;sda1）将指定的分区大小输出到标准输出上，单位为区块</p><p> <code>-v</code> 显示版本信息</p><p>菜单操作说明</p><p> <code>m</code> 显示菜单和帮助信息</p><p> <code>a</code> 活动分区标记 &#x2F; 引导分区</p><p> <code>d</code> 删除分区</p><p> <code>l</code> 显示分区类型</p><p> <code>n</code> 新建分区</p><p> <code>p</code> 显示分区信息</p><p> <code>q</code> 退出不保存</p><p> <code>t</code> 设置分区号</p><p> <code>v</code> 分区检查</p><p> <code>w</code> 保存修改</p><p> <code>x</code> 拓展应用，高级功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前分区情况</span></span><br><span class="line">fdisk -l</span><br><span class="line"><span class="comment"># 显示硬盘的每个分区情况</span></span><br><span class="line">fdisk -lu</span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure><p>parted &#x3D;&#x3D;&#x3D; 分区软件（GPT方案）</p><p> <code>-l</code> 列出分区</p><p> <code>-h</code> 显示帮助信息</p><p> <code>-i</code> 互交模式</p><p> <code>-s</code> 脚本模式</p><p> <code>-v</code> 显示 parted 的版本信息</p><p> <code>/dev/sda</code> 打开存储设备</p><p> <code>command</code> parted 指令，如果没有设置指令，则 parted 将会进入交互模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出分区</span></span><br><span class="line">parted -l</span><br><span class="line"><span class="comment"># 选择操作磁盘</span></span><br><span class="line">parted /dev/sda</span><br><span class="line"><span class="comment"># 设置分区表为 GPT 并输入 yes 开始执行</span></span><br><span class="line">(parted) [mklabel | mktable] gpt <span class="comment"># =&gt; mklabel &amp; mktable 不会创建分区，而是创建分区表</span></span><br><span class="line">Yes/No? ==&gt; Yes</span><br><span class="line"><span class="comment"># 查看存储设备信息</span></span><br><span class="line">(parted) <span class="built_in">print</span></span><br><span class="line"><span class="comment"># 获取帮助</span></span><br><span class="line">(parted) <span class="built_in">help</span> mkpart</span><br><span class="line"><span class="comment"># 创建分区(分区0有1396MB)</span></span><br><span class="line">(parted) mkpart primary 0 1396MB</span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line">(parted) quit</span><br></pre></td></tr></table></figure><h3 id="磁盘格式化"><a href="#磁盘格式化" class="headerlink" title="磁盘格式化"></a>磁盘格式化</h3><p>mkfs &#x3D;&#x3D;&#x3D; 双击<code>tab</code> 可查看支持的文件类型</p><p>mkfs.ext4 &#x2F;dev&#x2F;sdb2 &#x3D;&#x3D;&#x3D; 格式化 sdb2 分区类型为 ext4</p><p><code>device</code> 预备检查的硬盘分区</p><p> <code>-V</code> 详细显示模式</p><p> <code>-t</code> 给定档案系统的形式，Linux 的预设值为 ext2 <code>mkfs -t ext2 /dev/sda</code></p><p> <code>-c</code> 在制作档案系统前，检查该 partition 是否有坏轨</p><p> <code>-l bad_block_file</code> 将有坏轨的 block 资料加到 bad_blocks_file 里面</p><p> <code>block</code> 给定 block 的大小</p><h3 id="磁盘挂载"><a href="#磁盘挂载" class="headerlink" title="磁盘挂载"></a>磁盘挂载</h3><p>磁盘格式化完成后还不能使用，必须挂载才能使用</p><p>ll &#x2F;dev&#x2F;sdb2 &#x3D;&#x3D;&#x3D; 查看磁盘信息</p><p>挂载点目录 &#x3D;&#x3D;&#x3D; 在更目录自己创建一个目录作为挂载点目录</p><p>临时挂载 &#x3D;&#x3D;&#x3D; mount &#x2F;dev&#x2F;sda5 &#x2F;test 意思是 sda5 挂载到 test，重启后失效</p><p>永久挂载 &#x3D;&#x3D;&#x3D; 使用 vim 编辑 &#x2F;etc&#x2F;fstab</p><h3 id="逻辑卷管理"><a href="#逻辑卷管理" class="headerlink" title="逻辑卷管理"></a>逻辑卷管理</h3><p>pvcreate &#x3D;&#x3D;&#x3D; 创建物理卷，可以使用物理磁盘或者磁盘分区创建</p><p> <code>-f</code> 强制创建物理卷，不需要用户确认</p><p> <code>-u</code> 指定设备的UUID</p><p> <code>-y</code> 所有问题都回答 yes</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建物理卷</span></span><br><span class="line">pvcreate /dev/sda</span><br></pre></td></tr></table></figure><p>vgcreate &#x3D;&#x3D;&#x3D; 创建 LVM 卷组，将多个物理卷组织成一个整体</p><p> <code>-l</code> 卷组上允许创建的最大逻辑卷数</p><p> <code>-p</code> 卷组中允许添加的最大物理卷数</p><p> <code>-s</code> 卷组上的物理卷的 PE 大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建卷组 vg1000 并将sdb1和sdb2添加到卷组中</span></span><br><span class="line">vgcreate vg1000 /dev/sdb1 /dev/sdb2</span><br><span class="line"><span class="comment"># 删除 LVM 卷组</span></span><br><span class="line">vgremove vg1000</span><br><span class="line"><span class="comment"># 查看卷组信息</span></span><br><span class="line">vgdisplay vg1000</span><br></pre></td></tr></table></figure><p>vgextend vg1000 &#x2F;dev&#x2F;sda1 &#x3D;&#x3D;&#x3D; 将 sda1 扩容到卷组 vg1000</p><p>lvcreate &#x3D;&#x3D;&#x3D; 创建 LVM 的逻辑卷</p><p> <code>-L</code> 指定逻辑卷的大小，单位为 “kKmMgGtT” 字节</p><p> <code>-l</code> 指定逻辑卷的大小（LE数）</p><blockquote><p>逻辑卷创建完成后同样需要格式化且挂载后才能使用（<code>mkfs</code> 格式化 <code>mount</code> 临时挂载）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在卷组 vg1000 上创建一个200MB的逻辑卷</span></span><br><span class="line">lvcreate -L 200M vg1000</span><br><span class="line"><span class="comment"># 使用 lvdisplay、lvscan 查看卷组信息</span></span><br><span class="line">lvscan <span class="comment"># 扫描所有逻辑卷</span></span><br></pre></td></tr></table></figure><h3 id="逻辑卷扩容"><a href="#逻辑卷扩容" class="headerlink" title="逻辑卷扩容"></a>逻辑卷扩容</h3><ol><li><p>扩容前先检查是否有足够 vg 空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgs</span><br></pre></td></tr></table></figure></li><li><p>使用命令扩容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvextend -L +SIZE lv_device(name)</span><br></pre></td></tr></table></figure></li><li><p>调整文件系统的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resize2fs device lv_device(name)</span><br></pre></td></tr></table></figure></li></ol><h3 id="逻辑卷缩容"><a href="#逻辑卷缩容" class="headerlink" title="逻辑卷缩容"></a>逻辑卷缩容</h3><ol><li>确定缩减后的目标大小，并确定其有足够空间容纳所有原有数据</li><li>卸载文件系统 （<code>umount</code>） 并执行强制检测（<code>e2fsck -f</code>）</li><li>缩减文件系统（<code>resize2fs DEVICE</code>)</li><li>缩减逻辑卷（<code>lvreduce</code>）</li><li>重新挂载使用</li></ol><p>逻辑卷容量变更</p><p>lvresize &#x3D;&#x3D;&#x3D; lvextend + lvreduce</p><p> <code>-L</code> 指定逻辑卷的大小，单位为 “kKmMgGtT” 字节</p><p> <code>-l</code> 指定逻辑卷的大小（LE数）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 lvresize 指令增容</span></span><br><span class="line">lvresize -L +200M /dev/vg1000/lvol0 <span class="comment"># 将逻辑卷空间增加200M</span></span><br></pre></td></tr></table></figure><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h2 id="tmux教程"><a href="#tmux教程" class="headerlink" title="tmux教程"></a>tmux教程</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>分屏</li><li>允许断开 Terminal 连接后，继续运行进程</li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>​一个 tmux 可以包含多个 session，一个 session 可以包含多个 window，一个 window 可以包含多个 pane</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tmux:</span><br><span class="line">session 0:</span><br><span class="line">window 0:</span><br><span class="line">pane 0</span><br><span class="line">pane 1</span><br><span class="line">pane 2</span><br><span class="line">...</span><br><span class="line">window 1</span><br><span class="line">window 2</span><br><span class="line">...</span><br><span class="line">session 1</span><br><span class="line">session 2</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol><li>tmux：新建一个session，其中包含一个 window，window 中包含一个 pane，pane里打开了一个shell对话框。<code>tmux new -s name</code></li><li>按下 Ctrl + b 后手指松开，然后按%：将当前 pane 左右平分成两个pane。</li><li>按下 Ctrl + b 后手指松开，然后按”：将当前pane上下平分成两个 pane。</li><li>Ctrl + d：关闭当前 pane；如果当前 window 的所有 pane 均已关闭，则自动关闭 window；如果当前session 的所有 window 均已关闭，则自动关闭 session。</li><li>鼠标点击可以选 pane。</li><li>按下 ctrl + b 后手指松开，然后按方向键：选择相邻的pane。</li><li>鼠标拖动pane之间的分割线，可以调整分割线的位置。</li><li>按住ctrl + b的同时按方向键，可以调整pane之间分割线的位置。</li><li>按下ctrl + b后手指松开，然后按z：将当前pane全屏&#x2F;取消全屏。</li><li>按下ctrl + b后手指松开，然后按d：挂起当前session。</li><li>tmux a：打开之前挂起的session。</li><li>按下ctrl + a后手指松开，然后按s：选择其它session。<br>    方向键 —— 上：选择上一项 session&#x2F;window&#x2F;pane<br>    方向键 —— 下：选择下一项 session&#x2F;window&#x2F;pane<br>    方向键 —— 右：展开当前项 session&#x2F;window<br>    方向键 —— 左：闭合当前项 session&#x2F;window</li><li>按下Ctrl + a后手指松开，然后按c：在当前session中创建一个新的window。</li><li>按下Ctrl + a后手指松开，然后按w：选择其他window，操作方法与(12)完全相同。</li><li>按下Ctrl + a后手指松开，然后按PageUp：翻阅当前pane内的内容。</li><li>鼠标滚轮：翻阅当前pane内的内容。</li><li>在tmux中选中文本时，需要按住shift键。（仅支持Windows和Linux，不支持Mac，不过该操作并不是必须的，因此影响不大）</li><li>tmux中复制&#x2F;粘贴文本的通用方式：</li></ol><ul><li>按下Ctrl + b后松开手指，然后按[</li><li>用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板</li><li>按下Ctrl + b后松开手指，然后按]，会将剪贴板中的内容粘贴到光标处</li></ul><h2 id="vim教程"><a href="#vim教程" class="headerlink" title="vim教程"></a>vim教程</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><ul><li>命令行模式下的文本编辑器。</li><li>根据文件扩展名自动判别编程语言。支持代码缩进、代码高亮等功能。</li><li>使用方式：vim filename<br>如果已有该文件，则打开它。<br>如果没有该文件，则打开个一个新的文件，并命名为filename</li></ul><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><ul><li><p>一般命令模式<br>默认模式。命令输入方式 <code>：</code> 类似于打游戏放技能，按不同字符，即可进行不同操作。可以复制、粘贴、删除文本等。sudo </p></li><li><p>编辑模式<br>在一般命令模式里按下 <code>i</code>，会进入编辑模式。</p><p>按下 <code>ESC</code> 会退出编辑模式，返回到一般命令模式。</p></li><li><p>命令行模式</p><p>在一般命令模式里按下 <code>:/?</code> 三个字母中的任意一个，会进入命令行模式。命令行在最下面。<br>可以查找、替换、保存、退出、配置编辑器等。</p></li></ul><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><p>​(1) <code>i</code>：进入编辑模式<br>​    (2)  <code>ESC</code> ：进入一般命令模式<br>​    (3)  <code>h</code>  或 左箭头键：光标向左移动一个字符<br>​    (4)  <code>j</code>  或 向下箭头：光标向下移动一个字符<br>​    (5)  <code>k</code>  或 向上箭头：光标向上移动一个字符<br>​    (6)  <code>l</code>  或 向右箭头：光标向右移动一个字符<br>​    (7)  <code>n&lt;Space&gt;</code> ：n表示数字，按下数字后再按空格，光标会向右移动这一行的n个字符<br>​    (8)  <code>0</code>  或 功能键 <code>[Home] </code>：光标移动到本行开头<br>​    (9)  <code>$</code>  或 功能键 <code>[End]</code> ：光标移动到本行末尾<br>​    (10) <code>G</code>：光标移动到最后一行<br>​    (11) <code>:n</code> 或 <code>nG：n</code>为数字，光标移动到第n行<br>​    (12) gg：光标移动到第一行，相当于1G<br>​    (13) n<Enter>：n为数字，光标向下移动n行<br>​    (14) &#x2F;word：向光标之下寻找第一个值为word的字符串。<br>​    (15) ?word：向光标之上寻找第一个值为word的字符串。<br>​    (16) n：重复前一个查找操作<br>​    (17) N：反向重复前一个查找操作<br>​    (18) :n1,n2s&#x2F;word1&#x2F;word2&#x2F;g：n1与n2为数字，在第n1行与n2行之间寻找word1这个字符串，并将该字符串替换为word2<br>​    (19) :1,$s&#x2F;word1&#x2F;word2&#x2F;g：将全文的word1替换为word2<br>​    (20) :1,$s&#x2F;word1&#x2F;word2&#x2F;gc：将全文的word1替换为word2，且在替换前要求用户确认。<br>​    (21) v：选中文本<br>​    (22) d：删除选中的文本<br>​    (23) dd: 删除当前行<br>​    (24) y：复制选中的文本<br>​    (25) yy: 复制当前行<br>​    (26) p: 将复制的数据在光标的下一行&#x2F;下一个位置粘贴<br>​    (27) u：撤销<br>​    (28) Ctrl + r：取消撤销<br>​    (29) 大于号 &gt;：将选中的文本整体向右缩进一次<br>​(30) 小于号 &lt;：将选中的文本整体向左缩进一次<br>​    (31) :w 保存<br>​    (32) :w! 强制保存<br>​    (33) :q 退出<br>​    (34) :q! 强制退出<br>​    (35) :wq 保存并退出<br>​    (36) :set paste 设置成粘贴模式，取消代码自动缩进<br>​    (37) :set nopaste 取消粘贴模式，开启代码自动缩进<br>​    (38) :set nu 显示行号<br>​    (39) :set nonu 隐藏行号<br>​    (40) gg&#x3D;G：将全文代码格式化<br>​    (41) :noh 关闭查找关键词高亮<br>​    (42) Ctrl + q：当vim卡死时，可以取消当前正在执行的命令</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>每次用vim编辑文件时，会自动创建一个.filename.swp的临时文件。<br>如果打开某个文件时，该文件的swp文件已存在，则会报错。此时解决办法有两种：</p><ul><li>找到正在打开该文件的程序，并退出</li><li>直接删掉该swp文件即可</li></ul><h2 id="shell语法-脚本"><a href="#shell语法-脚本" class="headerlink" title="shell语法(脚本)"></a>shell语法(脚本)</h2><h3 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h3><p>shell是我们通过命令行与操作系统沟通的语言。</p><p>shell脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。<br>AC Terminal中的命令行可以看成是一个“shell脚本在逐行执行”。</p><p>Linux中常见的shell脚本有很多种，常见的有：</p><p>Bourne Shell(&#x2F;usr&#x2F;bin&#x2F;sh或&#x2F;bin&#x2F;sh)<br>Bourne Again Shell(&#x2F;bin&#x2F;bash)<br>C Shell(&#x2F;usr&#x2F;bin&#x2F;csh)<br>K Shell(&#x2F;usr&#x2F;bin&#x2F;ksh)<br>zsh<br>…<br>Linux系统中一般默认使用 <code>bash</code>，所以接下来讲解 <code>bash</code> 中的语法。<br>文件开头需要写 <code>#!/bin/bash</code>，指明 <code>bash</code> 为脚本解释器。</p><h3 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h3><p>新建一个 test.sh 文件，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">echo &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure><p>作为可执行文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh  # 使脚本具有可执行权限</span><br><span class="line">./test.sh  # 当前路径下执行</span><br><span class="line">Hello World!  # 脚本输出</span><br><span class="line">/home/acs/test.sh  # 绝对路径下执行</span><br><span class="line">Hello World!  # 脚本输出</span><br><span class="line">~/test.sh  # 家目录路径下执行</span><br><span class="line">Hello World!  # 脚本输出</span><br></pre></td></tr></table></figure><p>解释器执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">bash test.sh</span></span><br><span class="line">Hello World!  # 脚本输出</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是一行注释</span></span><br></pre></td></tr></table></figure><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;EOF#(不加冒号也可注释，EOF是自定义的)</span><br><span class="line">第一行注释</span><br><span class="line">第二行注释</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><p>定义变量，不需要加 <code>$</code> 符号，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name1=&#x27;yxc&#x27;  # 单引号定义字符串</span><br><span class="line">name2=&quot;yxc&quot;  # 双引号定义字符串</span><br><span class="line">name3=yxc    # 也可以不加引号，同样表示字符串</span><br></pre></td></tr></table></figure><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><p>使用变量，需要加上 <code>$</code> 符号，或者 <code>$&#123;&#125;</code> 符号。花括号是<strong>可选的</strong>，主要为了帮助解释器识别变量边界。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line">echo $name  # 输出yxc</span><br><span class="line">echo $&#123;name&#125;  # 输出yxc</span><br><span class="line">echo $&#123;name&#125;acwing  # 输出yxcacwing</span><br></pre></td></tr></table></figure><h4 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h4><p>使用 <code>readonly</code> 或者 <code>declare</code> 可以将变量变为只读。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line">readonly name</span><br><span class="line">declare -r name  # 两种写法均可</span><br><span class="line"></span><br><span class="line">name=abc  # 会报错，因为此时name只读</span><br></pre></td></tr></table></figure><h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h4><p><code>unset</code> 可以删除变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line">unset name</span><br><span class="line">echo $name  # 输出空行</span><br></pre></td></tr></table></figure><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><ul><li>自定义变量（局部变量），子进程不能访问的变量</li><li>环境变量（全局变量），子进程可以访问的变量</li></ul><p>自定义变量改成环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">name=yxc  <span class="comment"># 定义变量</span></span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">export</span> name  <span class="comment"># 第一种方法</span></span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">declare</span> -x name  <span class="comment"># 第二种方法</span></span></span><br></pre></td></tr></table></figure><p>环境变量改为自定义变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">export</span> name=yxc  <span class="comment"># 定义环境变量</span></span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">declare</span> +x name  <span class="comment"># 改为自定义变量</span></span></span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p><strong>单</strong>引号与<strong>双</strong>引号的区别：</p><ul><li>单引号中的内容会原样输出，不会执行、不会取变量；</li><li>双引号中的内容可以执行、可以取变量；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=yxc  # 不用引号</span><br><span class="line">echo &#x27;hello, $name \&quot;hh\&quot;&#x27;  # 单引号字符串，输出 hello, $name \&quot;hh\&quot;</span><br><span class="line">echo &quot;hello, $name \&quot;hh\&quot;&quot;  # 双引号字符串，输出 hello, yxc &quot;hh&quot;</span><br></pre></td></tr></table></figure><p>获取字符串长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;yxc&quot;</span><br><span class="line">echo $&#123;#name&#125;  # 输出3</span><br></pre></td></tr></table></figure><p>提取子串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;hello, yxc&quot;</span><br><span class="line">echo $&#123;name:0:5&#125;  # 提取从0开始的5个字符</span><br></pre></td></tr></table></figure><h3 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h3><h4 id="文件参数变量"><a href="#文件参数变量" class="headerlink" title="文件参数变量"></a>文件参数变量</h4><p>在执行shell脚本时，可以向脚本传递参数。<code>$1</code> 是第一个参数，<code>$2</code> 是第二个参数，以此类推。特殊的，<code>$0</code> 是文件名（包含路径）。例如：</p><p>创建文件 <code>test.sh</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;文件名：&quot;$0</span><br><span class="line">echo &quot;第一个参数：&quot;$1</span><br><span class="line">echo &quot;第二个参数：&quot;$2</span><br><span class="line">echo &quot;第三个参数：&quot;$3</span><br><span class="line">echo &quot;第四个参数：&quot;$4</span><br></pre></td></tr></table></figure><p>执行该脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">chmod</span> +x test.sh</span> </span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">./test.sh 1 2 3 4</span></span><br><span class="line">文件名：./test.sh</span><br><span class="line">第一个参数：1</span><br><span class="line">第二个参数：2</span><br><span class="line">第三个参数：3</span><br><span class="line">第四个参数：4</span><br></pre></td></tr></table></figure><h4 id="其它参数相关变量"><a href="#其它参数相关变量" class="headerlink" title="其它参数相关变量"></a>其它参数相关变量</h4><table><thead><tr><th align="left">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left">$#</td><td align="center">代表文件传入的参数个数，如上例中值为4</td></tr><tr><td align="left">$*</td><td align="center">由所有参数构成的用空格隔开的字符串，如上例中值为”$1 $2 $3 $4”</td></tr><tr><td align="left">$@</td><td align="center">每个参数分别用双引号括起来的字符串，如上例中值为”$1” “$2” “$3” “$4”</td></tr><tr><td align="left">$$</td><td align="center">脚本当前运行的进程ID</td></tr><tr><td align="left">$?</td><td align="center">上一条命令的退出状态（注意不是stdout，而是exit code）。0表示正常退出，其他值表示错误</td></tr><tr><td align="left">$(command)</td><td align="center">返回command这条命令的stdout（可嵌套）</td></tr><tr><td align="left"><code>command</code> (前后加&#96;)</td><td align="center">返回command这条命令的stdout（不可嵌套）</td></tr></tbody></table><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。数组下标从0开始。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>数组用小括号表示，元素之间用空格隔开。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yxc)</span><br></pre></td></tr></table></figure><p>也可以直接定义数组中某个元素的值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array[0]=1</span><br><span class="line">array[1]=abc</span><br><span class="line">array[2]=&quot;def&quot;</span><br><span class="line">array[3]=yxc</span><br></pre></td></tr></table></figure><h4 id="读取数组中某个元素的值"><a href="#读取数组中某个元素的值" class="headerlink" title="读取数组中某个元素的值"></a>读取数组中某个元素的值</h4><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;array[index]&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yxc)</span><br><span class="line">echo $&#123;array[0]&#125;</span><br><span class="line">echo $&#123;array[1]&#125;</span><br><span class="line">echo $&#123;array[2]&#125;</span><br><span class="line">echo $&#123;array[3]&#125;</span><br></pre></td></tr></table></figure><p>读取整个数组</p><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;array[@]&#125;  <span class="comment"># 第一种写法</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;array[*]&#125;  <span class="comment"># 第二种写法</span></span></span><br></pre></td></tr></table></figure><h4 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h4><p>类似于字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;<span class="comment">#array[@]&#125;  # 第一种写法</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;<span class="comment">#array[*]&#125;  # 第二种写法</span></span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yxc)</span><br><span class="line"></span><br><span class="line">echo $&#123;#array[@]&#125;  # 第一种写法</span><br><span class="line">echo $&#123;#array[*]&#125;  # 第二种写法</span><br></pre></td></tr></table></figure><h3 id="expr命令"><a href="#expr命令" class="headerlink" title="expr命令"></a>expr命令</h3><p>expr命令用于求表达式的值，格式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr 表达式</span><br></pre></td></tr></table></figure><h4 id="表达式说明"><a href="#表达式说明" class="headerlink" title="表达式说明"></a>表达式说明</h4><ul><li>用空格隔开每一项</li><li>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）</li><li>对包含空格和其他特殊字符的字符串要用引号括起来</li><li>expr会在stdout中输出结果。如果为逻辑关系表达式，则结果为真时，stdout输出1，否则输出0。</li><li>expr的exit code：如果为逻辑关系表达式，则结果为真时，exit code为0，否则为1。</li></ul><h4 id="字符串表达式"><a href="#字符串表达式" class="headerlink" title="字符串表达式"></a>字符串表达式</h4><ul><li><p><code>length STRING</code> 返回STRING的长度</p></li><li><p><code>index STRING CHARSET</code> CHARSET中任意单个字符在 STRING 中最前面的字符位置，下标从1开始。如果在 STRING 中完全不存在 CHARSET 中的字符，则返回0。</p></li><li><p><code>substr STRING POSITION LENGTH</code> 返回 STRING 字符串中从 POSITION 开始，长度最大为 LENGTH 的子串。如果 POSITION 或 LENGTH 为负数，0或非数值，则返回空字符串。</p></li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;Hello World!&quot;</span><br><span class="line"></span><br><span class="line">echo `expr length &quot;$str&quot;`  # ``不是单引号，表示执行该命令，输出12</span><br><span class="line">echo `expr index &quot;$str&quot; aWd`  # 输出7，下标从1开始</span><br><span class="line">echo `expr substr &quot;$str&quot; 2 3`  # 输出 ell</span><br></pre></td></tr></table></figure><h4 id="整数表达式"><a href="#整数表达式" class="headerlink" title="整数表达式"></a>整数表达式</h4><p><code>expr</code> 支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。 </p><ul><li><p><code>+ -</code> 加减运算。两端参数会转换为整数，如果转换失败则报错。</p></li><li><p><code>*</code> <code>/</code> <code>%</code> 乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</p></li><li><p><code>()</code> 可以改变优先级，但需要用反斜杠转义</p></li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">echo `expr $a + $b`  # 输出7</span><br><span class="line">echo `expr $a - $b`  # 输出-1</span><br><span class="line">echo `expr $a \* $b`  # 输出12，*需要转义</span><br><span class="line">echo `expr $a / $b`  # 输出0，整除</span><br><span class="line">echo `expr $a % $b` # 输出3</span><br><span class="line">echo `expr \( $a + 1 \) \* \( $b + 1 \)`  # 输出20，值为(a + 1) * (b + 1)</span><br></pre></td></tr></table></figure><h4 id="逻辑关系表达式"><a href="#逻辑关系表达式" class="headerlink" title="逻辑关系表达式"></a>逻辑关系表达式</h4><ul><li><code>|</code> 如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。</li><li><code>&amp;</code> 如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</li><li><code>&lt; &lt;= = == != &gt;= &gt;</code> 比较两端的参数，如果为true，则返回1，否则返回0。”&#x3D;&#x3D;”是”&#x3D;”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</li><li><code>()</code> 可以改变优先级，但需要用反斜杠转义</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">echo `expr $a \&gt; $b`  # 输出0，&gt;需要转义</span><br><span class="line">echo `expr $a &#x27;&lt;&#x27; $b`  # 输出1，也可以将特殊字符用引号引起来</span><br><span class="line">echo `expr $a &#x27;&gt;=&#x27; $b`  # 输出0</span><br><span class="line">echo `expr $a \&lt;\= $b`  # 输出1</span><br><span class="line"></span><br><span class="line">c=0</span><br><span class="line">d=5</span><br><span class="line"></span><br><span class="line">echo `expr $c \&amp; $d`  # 输出0</span><br><span class="line">echo `expr $a \&amp; $b`  # 输出3</span><br><span class="line">echo `expr $c \| $d`  # 输出5</span><br><span class="line">echo `expr $a \| $b`  # 输出3</span><br></pre></td></tr></table></figure><h3 id="read命令"><a href="#read命令" class="headerlink" title="read命令"></a>read命令</h3><p><code>read</code> 命令用于从标准输入中读取单行数据。当读到文件结束符时，exit code为1，否则为0。</p><p>参数说明</p><ul><li><code>-p</code> ：后面可以接提示信息</li><li><code>-t</code> ：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令</li></ul><p>实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">read</span> name  <span class="comment"># 读入name的值</span></span></span><br><span class="line">acwing yxc  # 标准输入</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出name的值</span></span></span><br><span class="line">acwing yxc  #标准输出</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">read</span> -p <span class="string">&quot;Please input your name: &quot;</span> -t 30 name  <span class="comment"># 读入name的值，等待时间30秒</span></span></span><br><span class="line">Please input your name: acwing yxc  # 标准输入</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出name的值</span></span></span><br><span class="line">acwing yxc  # 标准输出</span><br></pre></td></tr></table></figure><h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><p><code>echo</code> 用于输出字符串。命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo STRING</span><br></pre></td></tr></table></figure><h4 id="显示普通字符串"><a href="#显示普通字符串" class="headerlink" title="显示普通字符串"></a>显示普通字符串</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello AC Terminal&quot;</span><br><span class="line">echo Hello AC Terminal  # 引号可以省略</span><br></pre></td></tr></table></figure><h4 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a>显示转义字符</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello AC Terminal&quot;</span><br><span class="line">echo Hello AC Terminal  # 引号可以省略</span><br></pre></td></tr></table></figure><h4 id="显示转义字符-1"><a href="#显示转义字符-1" class="headerlink" title="显示转义字符"></a>显示转义字符</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;\&quot;Hello AC Terminal\&quot;&quot;  # 注意只能使用双引号，如果使用单引号，则不转义</span><br><span class="line">echo \&quot;Hello AC Terminal\&quot;  # 也可以省略双引号</span><br></pre></td></tr></table></figure><h4 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a>显示变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line">echo &quot;My name is $name&quot;  # 输出 My name is yxc</span><br></pre></td></tr></table></figure><h4 id="显示换行"><a href="#显示换行" class="headerlink" title="显示换行"></a>显示换行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hi\n&quot;  # -e 开启转义</span><br><span class="line">echo &quot;acwing&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hi</span><br><span class="line"></span><br><span class="line">acwing</span><br></pre></td></tr></table></figure><h4 id="显示不换行"><a href="#显示不换行" class="headerlink" title="显示不换行"></a>显示不换行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hi \c&quot; # -e 开启转义 \c 不换行</span><br><span class="line">echo &quot;acwing&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi acwing</span><br></pre></td></tr></table></figure><h4 id="显示结果定向至文件"><a href="#显示结果定向至文件" class="headerlink" title="显示结果定向至文件"></a>显示结果定向至文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello World&quot; &gt; output.txt  # 将内容以覆盖的方式输出到output.txt中</span><br></pre></td></tr></table></figure><h4 id="原样输出字符串，不进行转义或取变量-用单引号"><a href="#原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="原样输出字符串，不进行转义或取变量(用单引号)"></a>原样输出字符串，不进行转义或取变量(用单引号)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=acwing</span><br><span class="line">echo &#x27;$name\&quot;&#x27;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">name\&quot;</span></span><br></pre></td></tr></table></figure><h4 id="显示命令的执行结果"><a href="#显示命令的执行结果" class="headerlink" title="显示命令的执行结果"></a>显示命令的执行结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo `date`</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Wed Sep 1 11:45:33 CST 2021</span><br></pre></td></tr></table></figure><h3 id="printf命令"><a href="#printf命令" class="headerlink" title="printf命令"></a>printf命令</h3><p><code>printf</code> 命令用于格式化输出，类似于C&#x2F;C++中的printf函数。</p><p>默认不会在字符串末尾添加换行符。</p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf format-string [arguments...]</span><br></pre></td></tr></table></figure><h4 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h4><p>脚本内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%10d.\n&quot; 123  # 占10位，右对齐</span><br><span class="line">printf &quot;%-10.2f.\n&quot; 123.123321  # 占10位，保留2位小数，左对齐</span><br><span class="line">printf &quot;My name is %s\n&quot; &quot;yxc&quot;  # 格式化输出字符串</span><br><span class="line">printf &quot;%d * %d = %d\n&quot;  2 3 `expr 2 \* 3` # 表达式的值作为参数</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       123.</span><br><span class="line">123.12    .</span><br><span class="line">My name is yxc</span><br><span class="line">2 * 3 = 6</span><br></pre></td></tr></table></figure><h3 id="test命令与判断符号"><a href="#test命令与判断符号" class="headerlink" title="test命令与判断符号[]"></a>test命令与判断符号[]</h3><h4 id="逻辑运算符-和"><a href="#逻辑运算符-和" class="headerlink" title="逻辑运算符&amp;&amp;和||"></a>逻辑运算符&amp;&amp;和||</h4><ul><li>&amp;&amp; 表示与，|| 表示或</li><li>二者具有短路原则：</li></ul><p>​expr1 &amp;&amp; expr2：当expr1为假时，直接忽略expr2<br>​expr1 || expr2：当expr1为真时，直接忽略expr2</p><ul><li>表达式的exit code为0，表示真；为非零，表示假。（与C&#x2F;C++中的定义相反）</li></ul><h4 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h4><p>在命令行中输入man test，可以查看test命令的用法。</p><p>test命令用于判断文件类型，以及对变量做比较。</p><p>test命令用exit code返回结果，而不是使用stdout。0表示真，非0表示假。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test 2 -lt 3  # 为真，返回值为0</span><br><span class="line">echo $?  # 输出上个命令的返回值，输出0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">ls</span>  <span class="comment"># 列出当前目录下的所有文件</span></span></span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">test</span> -e test.sh &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span></span><br><span class="line">exist  # test.sh 文件存在</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">test</span> -e test2.sh &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span></span><br><span class="line">Not exist  # testh2.sh 文件不存在</span><br></pre></td></tr></table></figure><h4 id="文件类型判断"><a href="#文件类型判断" class="headerlink" title="文件类型判断"></a>文件类型判断</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test -e filename  # 判断文件是否存在</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">测试参数</th><th align="center">代表意义</th></tr></thead><tbody><tr><td align="center">-e</td><td align="center">文件是否存在</td></tr><tr><td align="center">-f</td><td align="center">是否为文件</td></tr><tr><td align="center">-d</td><td align="center">是否为目录</td></tr></tbody></table><h4 id="文件权限判断"><a href="#文件权限判断" class="headerlink" title="文件权限判断"></a>文件权限判断</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test -r filename  # 判断文件是否可读</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">测试参数</th><th align="center">代表意义</th></tr></thead><tbody><tr><td align="center">-eq</td><td align="center">a是否等于b</td></tr><tr><td align="center">-ne</td><td align="center">a是否不等于b</td></tr><tr><td align="center">-gt</td><td align="center">a是否大于b</td></tr><tr><td align="center">-lt</td><td align="center">a是否小于b</td></tr><tr><td align="center">-ge</td><td align="center">a是否大于等于b</td></tr><tr><td align="center">-le</td><td align="center">a是否小于等于b</td></tr></tbody></table><h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><table><thead><tr><th align="center">测试参数</th><th align="center">代表意义</th></tr></thead><tbody><tr><td align="center">test -z STRING</td><td align="center">判断STRING是否为空，如果为空，则返回true</td></tr><tr><td align="center">test -n STRING</td><td align="center">判断STRING是否非空，如果非空，则返回true（-n可以省略）</td></tr><tr><td align="center">test str1 &#x3D;&#x3D; str2</td><td align="center">判断str1是否等于str2</td></tr><tr><td align="center">test str1 !&#x3D; str2</td><td align="center">判断str1是否不等于str2</td></tr></tbody></table><h4 id="多重条件判定"><a href="#多重条件判定" class="headerlink" title="多重条件判定"></a>多重条件判定</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test -r filename -a -x filename</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">测试参数</th><th align="center">代表意义</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">两条件是否同时成立</td></tr><tr><td align="center">-o</td><td align="center">两条件是否至少一个成立</td></tr><tr><td align="center">!</td><td align="center">取反。如 test ! -x file，当file不可执行时，返回true</td></tr></tbody></table><h4 id="判断符号"><a href="#判断符号" class="headerlink" title="判断符号[]"></a>判断符号[]</h4><p>[]与test用法几乎一模一样，更常用于if语句中。另外[[]]是[]的加强版，支持的特性更多。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ 2 -lt 3 ]  # 为真，返回值为0</span><br><span class="line">echo $?  # 输出上个命令的返回值，输出0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">ls</span>  <span class="comment"># 列出当前目录下的所有文件</span></span></span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">[ -e test.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span></span><br><span class="line">exist  # test.sh 文件存在</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">[ -e test2.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span></span><br><span class="line">Not exist  # testh2.sh 文件不存在</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>[]内的每一项都要用空格隔开</li><li>中括号内的变量，最好用双引号括起来</li><li>中括号内的常数，最好用单或双引号括起来</li></ul><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;acwing yxc&quot;</span><br><span class="line">[ $name == &quot;acwing yxc&quot; ]  # 错误，等价于 [ acwing yxc == &quot;acwing yxc&quot; ]，参数太多</span><br><span class="line">[ &quot;$name&quot; == &quot;acwing yxc&quot; ]  # 正确</span><br></pre></td></tr></table></figure><h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><h4 id="if…then形式"><a href="#if…then形式" class="headerlink" title="if…then形式"></a>if…then形式</h4><p>类似于C&#x2F;C++中的if-else语句。</p><h4 id="单层if"><a href="#单层if" class="headerlink" title="单层if"></a>单层if</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">if [ &quot;$a&quot; -lt &quot;$b&quot; ] &amp;&amp; [ &quot;$a&quot; -gt 2 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;在范围内</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3在范围内</span><br></pre></td></tr></table></figure><h4 id="单层if-else"><a href="#单层if-else" class="headerlink" title="单层if-else"></a>单层if-else</h4><p>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">else</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">if ! [ &quot;$a&quot; -lt &quot;$b&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;不小于$&#123;b&#125;</span><br><span class="line">else</span><br><span class="line">    echo $&#123;a&#125;小于$&#123;b&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3小于4</span><br></pre></td></tr></table></figure><h4 id="多层if-elif-elif-else"><a href="#多层if-elif-elif-else" class="headerlink" title="多层if-elif-elif-else"></a>多层if-elif-elif-else</h4><p>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">elif condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">elif condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">else</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line">if [ $a -eq 1 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;等于1</span><br><span class="line">elif [ $a -eq 2 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;等于2</span><br><span class="line">elif [ $a -eq 3 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;等于3</span><br><span class="line">else</span><br><span class="line">    echo 其他</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其他</span><br></pre></td></tr></table></figure><h4 id="case…esac形式"><a href="#case…esac形式" class="headerlink" title="case…esac形式"></a>case…esac形式</h4><p>类似于C&#x2F;C++中的switch语句。</p><p>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">case $变量名称 in</span><br><span class="line">    值1)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;  # 类似于C/C++中的break</span><br><span class="line">    值2)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">    *)  # 类似于C/C++中的default</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line">case $a in</span><br><span class="line">    1)</span><br><span class="line">        echo $&#123;a&#125;等于1</span><br><span class="line">        ;;  </span><br><span class="line">    2)</span><br><span class="line">        echo $&#123;a&#125;等于2</span><br><span class="line">        ;;  </span><br><span class="line">    3)                                                </span><br><span class="line">        echo $&#123;a&#125;等于3</span><br><span class="line">        ;;  </span><br><span class="line">    *)</span><br><span class="line">        echo 其他</span><br><span class="line">        ;;  </span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其他</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="for…in…do…done"><a href="#for…in…do…done" class="headerlink" title="for…in…do…done"></a>for…in…do…done</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for var in val1 val2 val3</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例1，输出a 2 cc，每个元素一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in a 2 cc</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例2，输出当前路径下的所有文件名，每个文件名一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for file in `ls`</span><br><span class="line">do</span><br><span class="line">    echo $file</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例3，输出1-10</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in $(seq 1 10)</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例4，使用{1..10} 或者 {a..z}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;a..z&#125;</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="for-…-…-…-do…done"><a href="#for-…-…-…-do…done" class="headerlink" title="for ((…;…;…)) do…done"></a>for ((…;…;…)) do…done</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for ((expression; condition; expression))</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，输出1-10，每个数占一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for ((i=1; i&lt;=10; i++))</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done0</span><br></pre></td></tr></table></figure><h4 id="while…do…done循环"><a href="#while…do…done循环" class="headerlink" title="while…do…done循环"></a>while…do…done循环</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，文件结束符为Ctrl+d，输入文件结束符后read指令返回false。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while read name</span><br><span class="line">do</span><br><span class="line">    echo $name</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="until…do…done循环"><a href="#until…do…done循环" class="headerlink" title="until…do…done循环"></a>until…do…done循环</h4><p>当条件为真时结束。</p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，当用户输入yes或者YES时结束，否则一直等待读入。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ &quot;$&#123;word&#125;&quot; == &quot;yes&quot; ] || [ &quot;$&#123;word&#125;&quot; == &quot;YES&quot; ]</span><br><span class="line">do</span><br><span class="line">    read -p &quot;Please input yes/YES to stop this program: &quot; word</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="break命令"><a href="#break命令" class="headerlink" title="break命令"></a>break命令</h4><p>跳出当前一层循环，注意与C&#x2F;C++不同的是：break不能跳出case语句。</p><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">while read name</span><br><span class="line">do</span><br><span class="line">    for ((i=1;i&lt;=10;i++))</span><br><span class="line">    do</span><br><span class="line">        case $i in</span><br><span class="line">            8)</span><br><span class="line">                break</span><br><span class="line">                ;;</span><br><span class="line">            *)</span><br><span class="line">                echo $i</span><br><span class="line">                ;;</span><br><span class="line">        esac</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>该示例每读入非EOF的字符串，会输出一遍1-7。<br>该程序可以输入Ctrl+d文件结束符来结束，也可以直接用Ctrl+c杀掉该进程。</p><h4 id="continue命令"><a href="#continue命令" class="headerlink" title="continue命令"></a>continue命令</h4><p>跳出当前循环。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for ((i=1;i&lt;=10;i++))</span><br><span class="line">do</span><br><span class="line">    if [ `expr $i % 2` -eq 0 ]</span><br><span class="line">    then</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>该程序输出1-10中的所有奇数。</p><h4 id="死循环的处理方式"><a href="#死循环的处理方式" class="headerlink" title="死循环的处理方式"></a>死循环的处理方式</h4><p>如果AC Terminal可以打开该程序，则输入Ctrl+c即可。</p><p>否则可以直接关闭进程：</p><ol><li>使用top命令找到进程的PID</li><li>输入kill -9 PID即可关掉此进程</li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>bash中的函数类似于C&#x2F;C++中的函数，但return的返回值与C&#x2F;C++不同，返回的是exit code，取值为0-255，0表示正常结束。</p><p>如果想获取函数的输出结果，可以通过echo输出到stdout中，然后通过$(function_name)来获取stdout中的结果。</p><p>函数的return值可以通过$?来获取。</p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[function] func_name() &#123;  # function关键字可以省略</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不获取-return值和stdout值"><a href="#不获取-return值和stdout值" class="headerlink" title="不获取 return值和stdout值"></a>不获取 return值和stdout值</h4><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;</span><br><span class="line">    name=yxc</span><br><span class="line">    echo &quot;Hello $name&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello yxc</span><br></pre></td></tr></table></figure><h4 id="获取-return值和stdout值"><a href="#获取-return值和stdout值" class="headerlink" title="获取 return值和stdout值"></a>获取 return值和stdout值</h4><p>不写return时，默认return 0。</p><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;</span><br><span class="line">    name=yxc</span><br><span class="line">    echo &quot;Hello $name&quot;</span><br><span class="line"></span><br><span class="line">    return 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output=$(func)</span><br><span class="line">ret=$?</span><br><span class="line"></span><br><span class="line">echo &quot;output = $output&quot;</span><br><span class="line">echo &quot;return = $ret&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output = Hello yxc</span><br><span class="line">return = 123</span><br></pre></td></tr></table></figure><h4 id="函数的输入参数"><a href="#函数的输入参数" class="headerlink" title="函数的输入参数"></a>函数的输入参数</h4><p>在函数内，$1表示第一个输入参数，$2表示第二个输入参数，依此类推。</p><p>注意：函数内的$0仍然是文件名，而不是函数名。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;  # 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span><br><span class="line">    word=&quot;&quot;</span><br><span class="line">    while [ &quot;$&#123;word&#125;&quot; != &#x27;y&#x27; ] &amp;&amp; [ &quot;$&#123;word&#125;&quot; != &#x27;n&#x27; ]</span><br><span class="line">    do</span><br><span class="line">        read -p &quot;要进入func($1)函数吗？请输入y/n：&quot; word</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    if [ &quot;$word&quot; == &#x27;n&#x27; ]</span><br><span class="line">    then</span><br><span class="line">        echo 0</span><br><span class="line">        return 0</span><br><span class="line">    fi  </span><br><span class="line"></span><br><span class="line">    if [ $1 -le 0 ] </span><br><span class="line">    then</span><br><span class="line">        echo 0</span><br><span class="line">        return 0</span><br><span class="line">    fi  </span><br><span class="line"></span><br><span class="line">    sum=$(func $(expr $1 - 1))</span><br><span class="line">    echo $(expr $sum + $1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo $(func 10)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">55</span><br></pre></td></tr></table></figure><h4 id="函数内的局部变量"><a href="#函数内的局部变量" class="headerlink" title="函数内的局部变量"></a>函数内的局部变量</h4><p>可以在函数内定义局部变量，作用范围仅在当前函数内。</p><p>可以在递归函数中定义局部变量。</p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local 变量名=变量值</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">func() &#123;</span><br><span class="line">    local name=yxc</span><br><span class="line">    echo $name</span><br><span class="line">&#125;</span><br><span class="line">func</span><br><span class="line"></span><br><span class="line">echo $name</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yxc</span><br></pre></td></tr></table></figure><p>第一行为函数内的name变量，第二行为函数外调用name变量，会发现此时该变量不存在。</p><h3 id="exit命令"><a href="#exit命令" class="headerlink" title="exit命令"></a>exit命令</h3><p>exit命令用来退出当前shell进程，并返回一个退出状态；使用$?可以接收这个退出状态。</p><p>exit命令可以接受一个整数值作为参数，代表退出状态。如果不指定，默认状态值是 0。</p><p>exit退出状态只能是一个介于 0~255 之间的整数，其中只有 0 表示成功，其它值都表示失败。</p><p>示例：</p><p>创建脚本test.sh，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ $# -ne 1 ]  # 如果传入参数个数等于1，则正常退出；否则非正常退出。</span><br><span class="line">then</span><br><span class="line">    echo &quot;arguments not valid&quot;</span><br><span class="line">    exit 1</span><br><span class="line">else</span><br><span class="line">    echo &quot;arguments valid&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行该脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">chmod</span> +x test.sh</span> </span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">./test.sh acwing</span></span><br><span class="line">arguments valid</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">echo</span> $?  <span class="comment"># 传入一个参数，则正常退出，exit code为0</span></span></span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">./test.sh</span> </span><br><span class="line">arguments not valid</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">echo</span> $?  <span class="comment"># 传入参数个数不是1，则非正常退出，exit code为1</span></span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="文件重定向"><a href="#文件重定向" class="headerlink" title="文件重定向"></a>文件重定向</h3><p>每个进程默认打开3个文件描述符：</p><ul><li><code>stdin</code> 标准输入，从命令行读取数据，文件描述符为0</li><li><code>stdout</code> 标准输出，向命令行输出数据，文件描述符为1</li><li><code>stderr</code> 标准错误输出，向命令行输出数据，文件描述符为2</li></ul><p>可以用文件重定向将这三个文件重定向到其他文件中。</p><h4 id="重定向命令列表"><a href="#重定向命令列表" class="headerlink" title="重定向命令列表"></a>重定向命令列表</h4><table><thead><tr><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">command &gt; file</td><td align="center">将stdout重定向到file中</td></tr><tr><td align="center">command &lt; file</td><td align="center">将stdin重定向到file中</td></tr><tr><td align="center">command &gt;&gt; file</td><td align="center">将stdout以追加方式重定向到file中</td></tr><tr><td align="center">command n&gt; file</td><td align="center">将文件描述符n重定向到file中</td></tr><tr><td align="center">command n&gt;&gt; file</td><td align="center">将文件描述符n以追加方式重定向到file中</td></tr></tbody></table><h4 id="输入和输出重定向"><a href="#输入和输出重定向" class="headerlink" title="输入和输出重定向"></a>输入和输出重定向</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hello \c&quot; &gt; output.txt  # 将stdout重定向到output.txt中</span><br><span class="line">echo &quot;World&quot; &gt;&gt; output.txt  # 将字符串追加到output.txt中</span><br><span class="line"></span><br><span class="line">read str &lt; output.txt  # 从output.txt中读取字符串</span><br><span class="line"></span><br><span class="line">echo $str  # 输出结果：Hello World</span><br></pre></td></tr></table></figure><h4 id="同时重定向stdin和stdout"><a href="#同时重定向stdin和stdout" class="headerlink" title="同时重定向stdin和stdout"></a>同时重定向stdin和stdout</h4><p>创建bash脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">read a</span><br><span class="line">read b</span><br><span class="line"></span><br><span class="line">echo $(expr &quot;$a&quot; + &quot;$b&quot;)</span><br></pre></td></tr></table></figure><p>创建input.txt，里面的内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">chmod</span> +x test.sh  <span class="comment"># 添加可执行权限</span></span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">./test.sh &lt; input.txt &gt; output.txt  <span class="comment"># 从input.txt中读取内容，将输出写入output.txt中</span></span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">cat</span> output.txt  <span class="comment"># 查看output.txt中的内容</span></span></span><br><span class="line">7</span><br></pre></td></tr></table></figure><h3 id="引入外部脚本"><a href="#引入外部脚本" class="headerlink" title="引入外部脚本"></a>引入外部脚本</h3><p>类似于C&#x2F;C++中的include操作，bash也可以引入其他文件中的代码。</p><p>语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">. filename  # 注意点和文件名之间有一个空格</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">source filename</span><br></pre></td></tr></table></figure><p>示例</p><p>创建test1.sh，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">name=yxc  # 定义变量name</span><br></pre></td></tr></table></figure><p>然后创建test2.sh，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">source test1.sh # 或 . test1.sh</span><br><span class="line"></span><br><span class="line">echo My name is: $name  # 可以使用test1.sh中的变量</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">chmod</span> +x test2.sh</span> </span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">./test2.sh</span> </span><br><span class="line">My name is: yxc</span><br></pre></td></tr></table></figure><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><h3 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h3><p>安装ssh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ssh</span><br></pre></td></tr></table></figure><p>启动 ssh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd start</span><br></pre></td></tr></table></figure><p>查看ssh服务状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service sshd status</span><br></pre></td></tr></table></figure><p>安装ssh服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install sshd</span><br></pre></td></tr></table></figure><p>开启ssh服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service sshd </span><br></pre></td></tr></table></figure><p>检验服务是否启动成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure><p>远程登录服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname</span><br></pre></td></tr></table></figure><ul><li><code>user</code> ：用户名</li><li><code>hostname</code> ：IP地址或域名</li></ul><p>第一次登录时会提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#x27;123.57.47.211 (123.57.47.211)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:iy237yysfCe013/l+kpDGfEG9xxHxm0dnxnAbJTPpG8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span><br></pre></td></tr></table></figure><p>输入yes，然后回车即可。</p><p>这样会将该服务器的信息记录在 ~&#x2F;.ssh&#x2F;known_hosts 文件中。</p><p>然后输入密码即可登录到远程服务器中。</p><hr><p>默认登录端口号为22。如果想登录某一特定端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname -p 22</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>创建文件 ~&#x2F;.ssh&#x2F;config</p><p>然后在文件中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host myserver1</span><br><span class="line">    HostName IP地址或域名</span><br><span class="line">    User 用户名</span><br><span class="line"></span><br><span class="line">Host myserver2</span><br><span class="line">    HostName IP地址或域名</span><br><span class="line">    User 用户名</span><br></pre></td></tr></table></figure><p>之后再使用服务器时，可以直接使用别名myserver1、myserver2。</p><h4 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h4><p>创建密钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>然后一直回车即可。</p><p>执行结束后，~&#x2F;.ssh&#x2F;目录下会多两个文件：</p><ul><li><code>id_rsa</code> ：私钥</li><li><code>id_rsa.pub</code> ：公钥</li></ul><p>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</p><p>例如，想免密登录myserver服务器。则将公钥中的内容，复制到myserver中的~&#x2F;.ssh&#x2F;authorized_keys文件里即可。</p><p>也可以使用如下命令一键添加公钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id myserver</span><br></pre></td></tr></table></figure><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname command</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname ls -a</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单引号中的<span class="variable">$i</span>可以求值</span></span><br><span class="line">ssh myserver &#x27;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&#x27;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">双引号中的<span class="variable">$i</span>不可以求值</span></span><br><span class="line">ssh myserver &quot;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&quot;</span><br></pre></td></tr></table></figure><h3 id="scp传文件"><a href="#scp传文件" class="headerlink" title="scp传文件"></a>scp传文件</h3><p>基本用法</p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp source destination</span><br></pre></td></tr></table></figure><p>将source路径下的文件复制到destination中</p><p>一次复制多个文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp source1 source2 destination</span><br></pre></td></tr></table></figure><p>复制文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/tmp myserver:/home/acs/</span><br></pre></td></tr></table></figure><p>将本地家目录中的tmp文件夹复制到myserver服务器中的&#x2F;home&#x2F;acs&#x2F;目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/tmp myserver:homework/</span><br></pre></td></tr></table></figure><p>将本地家目录中的tmp文件夹复制到myserver服务器中的~&#x2F;homework&#x2F;目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r myserver:homework .</span><br></pre></td></tr></table></figure><p>将myserver服务器中的~&#x2F;homework&#x2F;文件夹复制到本地的当前路径下。</p><hr><p>指定服务器的端口号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 22 source1 source2 destination</span><br></pre></td></tr></table></figure><p>注意： scp的-r -P等参数尽量加在source和destination之前。</p><h4 id="使用scp配置其他服务器的vim和tmux"><a href="#使用scp配置其他服务器的vim和tmux" class="headerlink" title="使用scp配置其他服务器的vim和tmux"></a>使用scp配置其他服务器的vim和tmux</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.vimrc ~/.tmux.conf myserver:</span><br></pre></td></tr></table></figure><h2 id="thrift"><a href="#thrift" class="headerlink" title="thrift"></a>thrift</h2><h2 id="管道、环境变量与常用命令"><a href="#管道、环境变量与常用命令" class="headerlink" title="管道、环境变量与常用命令"></a>管道、环境变量与常用命令</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>管道类似于文件重定向，可以将前一个命令的stdout重定向到下一个命令的stdin。</p><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul><li>管道命令仅处理stdout，会忽略stderr。</li><li>管道右边的命令必须能接受stdin。</li><li>多个管道命令可以串联。</li></ul><h3 id="与文件重定向的区别"><a href="#与文件重定向的区别" class="headerlink" title="与文件重定向的区别"></a>与文件重定向的区别</h3><ul><li>文件重定向左边为命令，右边为文件。</li><li>管道左右两边均为命令，左边有stdout，右边有stdin。</li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>统计当前目录下所有python文件的总行数，其中find、xargs、wc等命令可以参考常用命令这一节内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &#x27;*.py&#x27; | xargs cat | wc -l</span><br></pre></td></tr></table></figure><h2 id="租云服务器及配环境"><a href="#租云服务器及配环境" class="headerlink" title="租云服务器及配环境"></a>租云服务器及配环境</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="云平台的作用"><a href="#云平台的作用" class="headerlink" title="云平台的作用:"></a>云平台的作用:</h4><ul><li>存放我们的docker容器，让计算跑在云端。</li><li>获得公网IP地址，让每个人可以访问到我们的服务。</li></ul><h4 id="任选一个云平台即可，推荐配置："><a href="#任选一个云平台即可，推荐配置：" class="headerlink" title="任选一个云平台即可，推荐配置："></a>任选一个云平台即可，推荐配置：</h4><ul><li>1核 2GB（后期可以动态扩容，前期配置低一些没关系）</li><li>网络带宽采用按量付费，最大带宽拉满即可（费用取决于用量，与最大带宽无关）</li><li>系统版本：ubuntu 20.04 LTS（推荐用统一版本，避免后期出现配置不兼容的问题）</li></ul><h3 id="租云服务器及安装docker"><a href="#租云服务器及安装docker" class="headerlink" title="租云服务器及安装docker"></a>租云服务器及安装docker</h3><h4 id="阿里腾讯华为云"><a href="#阿里腾讯华为云" class="headerlink" title="阿里腾讯华为云"></a>阿里腾讯华为云</h4><h5 id="创建工作用户acs并赋予sudo权限"><a href="#创建工作用户acs并赋予sudo权限" class="headerlink" title="创建工作用户acs并赋予sudo权限"></a>创建工作用户acs并赋予sudo权限</h5><p>登录到新服务器。打开AC Terminal，然后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@xxx.xxx.xxx.xxx  # xxx.xxx.xxx.xxx替换成新服务器的公网IP</span><br></pre></td></tr></table></figure><p>创建acs用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser acs  # 创建用户acs</span><br><span class="line">usermod -aG sudo acs  # 给用户acs分配sudo权限（sudo）</span><br></pre></td></tr></table></figure><h5 id="配置免密登录方式"><a href="#配置免密登录方式" class="headerlink" title="配置免密登录方式"></a>配置免密登录方式</h5><p>退回AC Terminal，然后配置acs用户的别名和免密登录。</p><h5 id="配置新服务器的工作环境"><a href="#配置新服务器的工作环境" class="headerlink" title="配置新服务器的工作环境"></a>配置新服务器的工作环境</h5><p>将AC Terminal的配置传到新服务器上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp .bashrc .vimrc .tmux.conf server_name:  # server_name需要换成自己配置的别名</span><br></pre></td></tr></table></figure><h5 id="安装tmux和docker"><a href="#安装tmux和docker" class="headerlink" title="安装tmux和docker"></a>安装tmux和docker</h5><p>登录自己的服务器，然后安装tmux：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install tmux</span><br></pre></td></tr></table></figure><p>打开tmux。（养成好习惯，所有工作都在tmux里进行，防止意外关闭终端后，工作进度丢失）</p><p>然后在tmux中根据docker安装教程安装docker即可。</p><h3 id="docker教程"><a href="#docker教程" class="headerlink" title="docker教程"></a>docker教程</h3><h4 id="将当前用户添加到docker用户组"><a href="#将当前用户添加到docker用户组" class="headerlink" title="将当前用户添加到docker用户组"></a>将当前用户添加到docker用户组</h4><p>为了避免每次使用docker命令都需要加上sudo权限，可以将当前用户加入安装中自动创建的docker用户组(可以参考官方文档)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>执行完此操作后，需要退出服务器，再重新登录回来，才可以省去sudo权限。</p><h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">docker run hello-world # test success or not (hello from Docker!)</span><br><span class="line">docker version</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><h4 id="镜像（images）"><a href="#镜像（images）" class="headerlink" title="镜像（images）"></a>镜像（images）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker search [image]</span><br><span class="line">docker pull [image](:[tag])</span><br><span class="line">docker rmi -f [image_name | image_id]</span><br></pre></td></tr></table></figure><h4 id="镜像（images）-1"><a href="#镜像（images）-1" class="headerlink" title="镜像（images）"></a>镜像（images）</h4><ol><li>docker [container] commit CONTAINER IMAGE_NAME:TAG：创建某个container的镜像</li><li>docker save -o ubuntu_20_04.tar ubuntu:20.04：将镜像ubuntu:20.04导出到本地文件ubuntu_20_04.tar中</li><li>docker load -i ubuntu_20_04.tar：将镜像ubuntu:20.04从本地文件ubuntu_20_04.tar中加载出来</li></ol><h4 id="容器-container"><a href="#容器-container" class="headerlink" title="容器(container)"></a>容器(container)</h4><p>注意：有了镜像才能创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] [image] [src(/bin/bash)]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span> </span><br><span class="line">--name=&quot;&quot;</span><br><span class="line">-d后台运行</span><br><span class="line">-it使用交互方式运行，进入容器查看内容</span><br><span class="line">-P指定容器端口 -p 主机端口:容器端口</span><br><span class="line">-p随机指定端口</span><br><span class="line">exit # 直接退出容器</span><br><span class="line">ctrl + p + q # 容器后台运行</span><br><span class="line">docker rm [容器id] # 删除指定容器</span><br><span class="line">docker rm -f $(docker ps -aq) # 删除所有容器</span><br><span class="line">docker ps -a -q|xargs docker rm # 删除所有容器</span><br><span class="line">docker start [容器id] # 启动容器</span><br><span class="line">docker restart</span><br><span class="line">docker stop</span><br><span class="line">docker kill</span><br><span class="line">docker logs -f -t --tail [num] [容器id]</span><br><span class="line">-tf # 显示日志</span><br><span class="line">--tail # 要显示的日志条数</span><br><span class="line">docker inspect [容器id] # 查看容器元数据</span><br><span class="line">docker exec -it [容器id] [src] # 进入容器(开启新终端)</span><br><span class="line">docker attach [容器id] [src] # 进入容器(进入正在执行的终端)</span><br><span class="line">docker cp [容器id]:[容器路径] [目标]</span><br></pre></td></tr></table></figure><h4 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h4><blockquote><p>方式一：直接使用命令来挂载 -v</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器目录</span><br></pre></td></tr></table></figure><h4 id="实战：安装MySQL"><a href="#实战：安装MySQL" class="headerlink" title="实战：安装MySQL"></a>实战：安装MySQL</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7 # 获取镜像</span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:5.7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行容器</span></span><br><span class="line">-v 卷挂载</span><br><span class="line">-e 环境配置</span><br><span class="line">--name 容器名字</span><br><span class="line">docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br></pre></td></tr></table></figure><ol><li>docker [container] create -it ubuntu:20.04：利用镜像ubuntu:20.04创建一个容器。</li><li>docker ps -a：查看本地的所有容器</li><li>docker [container] start CONTAINER：启动容器</li><li>docker [container] stop CONTAINER：停止容器</li><li>docker [container] restart CONTAINER：重启容器</li><li>docker [contaienr] run -itd ubuntu:20.04：创建并启动一个容器</li><li>docker [container] attach CONTAINER：进入容器<ul><li>先按Ctrl-p，再按Ctrl-q可以挂起容器</li></ul></li><li>docker [container] exec CONTAINER COMMAND：在容器中执行命令</li><li>docker [container] rm CONTAINER：删除容器</li><li>docker container prune：删除所有已停止的容器</li><li>docker export -o xxx.tar CONTAINER：将容器CONTAINER导出到本地文件xxx.tar中</li><li>docker import xxx.tar image_name:tag：将本地文件xxx.tar导入成镜像，并将镜像命名为image_name:tag</li><li>docker export&#x2F;import与docker save&#x2F;load的区别：<ul><li>export&#x2F;import会丢弃历史记录和元数据信息，仅保存容器当时的快照状态</li><li>save&#x2F;load会保存完整记录，体积更大</li></ul></li><li>docker top CONTAINER：查看某个容器内的所有进程</li><li>docker stats：查看所有容器的统计信息，包括CPU、内存、存储、网络等信息</li><li>docker cp xxx CONTAINER:xxx 或 docker cp CONTAINER:xxx xxx：在本地和容器间复制文件</li><li>docker rename CONTAINER1 CONTAINER2：重命名容器</li><li>docker update CONTAINER –memory 500MB：修改容器限制</li></ol><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><p>进入AC Terminal，然后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scp /var/lib/acwing/docker/images/docker_lesson_1_0.tar server_name:  # 将镜像上传到自己租的云端服务器</span><br><span class="line">ssh server_name  # 登录自己的云端服务器</span><br><span class="line"></span><br><span class="line">docker load -i docker_lesson_1_0.tar  # 将镜像加载到本地</span><br><span class="line">docker run -p 20000:22 --name my_docker_server -itd docker_lesson:1.0  # 创建并运行docker_lesson:1.0镜像</span><br><span class="line"></span><br><span class="line">docker attach my_docker_server  # 进入创建的docker容器</span><br><span class="line">passwd  # 设置root密码</span><br></pre></td></tr></table></figure><p>去云平台控制台中修改安全组配置，放行端口20000。</p><p>返回AC Terminal，即可通过ssh登录自己的docker容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@xxx.xxx.xxx.xxx -p 20000  # 将xxx.xxx.xxx.xxx替换成自己租的服务器的IP地址</span><br></pre></td></tr></table></figure><p>创建工作账户acs。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql基础命令</title>
      <link href="/2023/01/10/mysql%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/01/10/mysql%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-基础"><a href="#MySQL-基础" class="headerlink" title="MySQL 基础"></a>MySQL 基础</h1><p>以管理员身份打开命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net start mysql80 // 启动服务</span><br><span class="line">net stop mysql80 // 停止服务</span><br></pre></td></tr></table></figure><h2 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h2><blockquote><p>方式一：MySQL提供的命令行工具</p></blockquote><p>例：MySQL 8.0 Command Line Client</p><blockquote><p>方式二：系统自带命令行工具</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql [-h 127.0.0.1] [-p 3306] -u root -p</span><br><span class="line">-h# MySQL服务所在主机ip</span><br><span class="line">-p# MySQL服务端口号，默认3306</span><br><span class="line">-u# MySQL数据库用户名</span><br><span class="line">-P# MySQL密码</span><br></pre></td></tr></table></figure><p style="color: #F56C6C;">注意：使用此方式进行连接需配置PATH环境</p><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><p>SQL语句，根据其功能，主要分为四类：<code>DDL</code>、<code>DML</code>、<code>DQL</code>、<code>DCL</code>。</p><table><thead><tr><th align="center">分类</th><th align="center">全称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">DDL</td><td align="center">Data Definition Language</td><td align="center">数据定义语言，用来定义数据库对象(数据库，表， 字段)</td></tr><tr><td align="center">DML</td><td align="center">Data Manipulation Language</td><td align="center">数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td align="center">DQL</td><td align="center">Data Query Language</td><td align="center">数据查询语言，用来查询数据库中表的记录</td></tr><tr><td align="center">DCL</td><td align="center">Data Control Language</td><td align="center">数据控制语言，用来创建数据库用户、控制数据库的 访问权限</td></tr></tbody></table><h3 id="DDL-数据库操作"><a href="#DDL-数据库操作" class="headerlink" title="DDL-数据库操作"></a>DDL-数据库操作</h3><p>Data Definition Language，数据定义语言，用来定义数据库对象(数据库，表，字段) 。</p><blockquote><p><strong>查询</strong></p></blockquote><p>查询所有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>查询当前数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE()</span><br></pre></td></tr></table></figure><blockquote><p><strong>创建</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 数据库名 [<span class="keyword">DEFAULT</span> CHARSET 字符集] [<span class="keyword">COLLATE</span> 排序规则];</span><br></pre></td></tr></table></figure><blockquote><p><strong>删除</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p><strong>切换</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><p>查询当前库所有表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p>查看某表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure><p>查询某表的建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><p>创建表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 类型 [comment 字段<span class="number">1</span>注释],</span><br><span class="line">字段<span class="number">2</span> 类型 [comment 字段<span class="number">2</span>注释]</span><br><span class="line">)[comment 表注释];</span><br></pre></td></tr></table></figure><p>修改表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 类型 [comment 注释] [约束];</span><br></pre></td></tr></table></figure><p>修改数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 字段名 新数据类型;</span><br></pre></td></tr></table></figure><p>修改字段名和字段类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧字段名 新字段名 类型 [comment 注释] [约束];</span><br></pre></td></tr></table></figure><p>删除字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br></pre></td></tr></table></figure><p>修改表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 rename <span class="keyword">to</span> 新表名;</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [if <span class="keyword">exists</span>] 表名;</span><br></pre></td></tr></table></figure><p>重置表（删除重创）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型。</p><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">有符号范围</th><th align="center">无符号范围</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">TINYINT</td><td align="center">1byte</td><td align="center">（-128，127）</td><td align="center">（0，255）</td><td align="center">小整数值</td></tr><tr><td align="center">SMALLINT</td><td align="center">2bytes</td><td align="center">(-32768，32767)</td><td align="center">(0，65535)</td><td align="center">大整数值</td></tr><tr><td align="center">MEDIUMINT</td><td align="center">3bytes</td><td align="center">(-8388608，8388607)</td><td align="center">(0，16777215)</td><td align="center">大整数值</td></tr><tr><td align="center">INT&#x2F;INTEGER</td><td align="center">4bytes</td><td align="center">(-2147483648， 2147483647)</td><td align="center">(0，4294967295)</td><td align="center">大整数值</td></tr><tr><td align="center">BIGINT</td><td align="center">8bytes</td><td align="center">(-2^63，2^63-1)</td><td align="center">(0，2^64-1)</td><td align="center">极大整数值</td></tr><tr><td align="center">FLOAT</td><td align="center">4bytes</td><td align="center">(-3.402823466 E+38， 3.402823466351 E+38)</td><td align="center">0 和 (1.175494351 E38，3.402823466 E+38)</td><td align="center">单精度浮点数值</td></tr><tr><td align="center">DOUBLE</td><td align="center">8bytes</td><td align="center">(-1.7976931348623157 E+308， 1.7976931348623157 E+308)</td><td align="center">0 和 (2.2250738585072014 E-308， 1.7976931348623157 E+308)</td><td align="center">双精度浮点数值</td></tr><tr><td align="center">DECIMAL</td><td align="center"></td><td align="center">依赖于M(精度)和D(标度) 的值</td><td align="center">依赖于M(精度)和D(标度)的 值</td><td align="center">小数值(精确定点数)</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">年龄字段 <span class="comment">-- 不会出现负数, 而且人的年龄不会太大</span></span><br><span class="line">age tinyint unsigned</span><br><span class="line">分数 <span class="comment">-- 总分100分, 最多出现一位小数</span></span><br><span class="line">score <span class="keyword">double</span>(<span class="number">4</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">CHAR</td><td align="center">0-255 bytes</td><td align="center">定长字符串(需要指定长度)</td></tr><tr><td align="center">VARCHAR</td><td align="center">0-65535 bytes</td><td align="center">变长字符串(需要指定长度)</td></tr><tr><td align="center">TINYBLOB</td><td align="center">0-255 bytes</td><td align="center">不超过255个字符的二进制数据</td></tr><tr><td align="center">TINYTEXT</td><td align="center">0-255 bytes</td><td align="center">短文本字符串</td></tr><tr><td align="center">BLOB</td><td align="center">0-65 535 bytes</td><td align="center">二进制形式的长文本数据</td></tr><tr><td align="center">TEXT</td><td align="center">0-65 535 bytes</td><td align="center">长文本数据</td></tr><tr><td align="center">MEDIUMBLOB</td><td align="center">0-16 777 215 bytes</td><td align="center">二进制形式的中等长度文本数据</td></tr><tr><td align="center">MEDIUMTEXT</td><td align="center">0-16 777 215 bytes</td><td align="center">中等长度文本数据</td></tr><tr><td align="center">LONGBLOB</td><td align="center">0-4 294 967 295 bytes</td><td align="center">二进制形式的极大文本数据</td></tr><tr><td align="center">LONGTEXT</td><td align="center">0-4 294 967 295 bytes</td><td align="center">极大文本数据</td></tr></tbody></table><h5 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h5><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">范围</th><th align="center">格式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">DATE</td><td align="center">3</td><td align="center">1000-01-01 至 9999-12-31</td><td align="center">YYYY-MM-DD</td><td align="center">日期值</td></tr><tr><td align="center">TIME</td><td align="center">3</td><td align="center">-838:59:59 至 838:59:59</td><td align="center">HH:MM:SS</td><td align="center">时间值或持续时间</td></tr><tr><td align="center">YEAR</td><td align="center">1</td><td align="center">1901 至 2155</td><td align="center">YYYY</td><td align="center">年份值</td></tr><tr><td align="center">DATETIME</td><td align="center">8</td><td align="center">1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">混合日期和时间值</td></tr><tr><td align="center">TIMESTAMP</td><td align="center">4</td><td align="center">1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">混合日期和时间值，时间戳</td></tr></tbody></table><h3 id="DML-表内数据操作"><a href="#DML-表内数据操作" class="headerlink" title="DML-表内数据操作"></a>DML-表内数据操作</h3><p>DML英文全称是Data Manipulation Language(数据操作语言)，用来对数据库中表的数据记录进 行增、删、改操作。</p><h4 id="添加数据（INSERT）"><a href="#添加数据（INSERT）" class="headerlink" title="添加数据（INSERT）"></a>添加数据（INSERT）</h4><p>给全部字段添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2</span>，...);</span><br></pre></td></tr></table></figure><p>给某字段添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名<span class="number">1</span>，字段<span class="number">2</span>，...) <span class="keyword">value</span>(值<span class="number">1</span>，值<span class="number">2</span>，...);</span><br></pre></td></tr></table></figure><p>批量添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名[()] <span class="keyword">value</span>(),(),();</span><br></pre></td></tr></table></figure><h4 id="修改数据（UPDATE）"><a href="#修改数据（UPDATE）" class="headerlink" title="修改数据（UPDATE）"></a>修改数据（UPDATE）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span>，字段<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span>，...[<span class="keyword">where</span> 条件]; # 不加条件则指向所有数据</span><br></pre></td></tr></table></figure><h4 id="删除数据（DELETE）"><a href="#删除数据（DELETE）" class="headerlink" title="删除数据（DELETE）"></a>删除数据（DELETE）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件]; # 不加条件则指向所有数据</span><br></pre></td></tr></table></figure><h3 id="DQL-数据查询"><a href="#DQL-数据查询" class="headerlink" title="DQL-数据查询"></a>DQL-数据查询</h3><p>DQL英文全称是Data Query Language(数据查询语言)，数据查询语言，用来查询数据库中表的记录。</p><blockquote><p>基本语法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><p>完整语法进行拆分，分为以下几个部分：</p><ul><li>基本查询（不带任何条件）</li><li>条件查询（WHERE）</li><li>聚合函数（count、max、min、avg、sum）</li><li>分组查询（group by）</li><li>排序查询（order by）</li><li>分页查询（limit）</li></ul><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><p>查询多个字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>，字段<span class="number">2</span>，... <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><p>字段设置别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span> [<span class="keyword">as</span> 别名<span class="number">1</span>], 字段<span class="number">2</span> [<span class="keyword">as</span> 别名<span class="number">2</span>] ... <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span> [别名<span class="number">1</span>], 字段<span class="number">2</span> [别名<span class="number">2</span>] ... <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><p>去除重复记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段列表 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件列表;</span><br></pre></td></tr></table></figure><p>条件</p><blockquote><p>比较运算符</p></blockquote><table><thead><tr><th align="center">比较运算符</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>&gt;</code> <code>=</code> <code>&lt;</code></td><td align="center"><code>大于</code> <code>等于</code> <code>小于</code></td></tr><tr><td align="center"><code>&lt;&gt;</code></td><td align="center"><code>!=</code></td></tr><tr><td align="center">BETWEEN … AND …</td><td align="center">在某个范围之内(含最小、最大值)</td></tr><tr><td align="center">IN(…)</td><td align="center">在in之后的列表中的值，多选一</td></tr><tr><td align="center">LIKE 占位符</td><td align="center">模糊匹配(<code>_</code>匹配单个字符, <code>%</code>匹配任意个字符)</td></tr><tr><td align="center">is null</td><td align="center">是NULL</td></tr></tbody></table><blockquote><p>逻辑运算符</p></blockquote><table><thead><tr><th align="center">逻辑运算符</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>and</code></td><td align="center"><code>&amp;&amp;</code></td></tr><tr><td align="center"><code>or</code></td><td align="center"><code>||</code></td></tr><tr><td align="center"><code>not</code></td><td align="center"><code>!</code></td></tr></tbody></table><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p>将一列数据作为一个整体，进行纵向计算 。</p><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 聚合函数（字段列表） <span class="keyword">from</span> 表名; # <span class="keyword">NULL</span>值是不参与所有聚合函数运算的</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">count</td><td align="center">统计数量</td></tr><tr><td align="center">max</td><td align="center">最大值</td></tr><tr><td align="center">min</td><td align="center">最小值</td></tr><tr><td align="center">avg</td><td align="center">平均值</td></tr><tr><td align="center">sum</td><td align="center">求和</td></tr></tbody></table><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件] <span class="keyword">group</span> <span class="keyword">by</span> 分组字段名 [<span class="keyword">having</span> 分组后过滤条件];</span><br></pre></td></tr></table></figure><blockquote><p>where与having区别</p></blockquote><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组 之后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p style="color: #E6A23C">注意：</p><ul><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li><li>执行顺序: where &gt; 聚合函数 &gt; having</li><li>支持多字段分组, 具体语法为 : group by columnA,columnB</li></ul><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p> 语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span>，字段<span class="number">2</span> 排序方式<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>排序方式</p><ul><li>ASC：升序（默认值）</li><li>DESC：降序</li></ul><p style="color: #E6A23C">注意：</p><ul><li>如果是升序, 可以不指定排序方式ASC </li><li>如果是多字段排序，当字段1值相同时，才会根据字段2进行排序</li></ul><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 limit 起始索引，查询记录数; # 起始索引 <span class="operator">=</span>（页码 <span class="operator">-</span> <span class="number">1</span>）<span class="operator">*</span> 查询记录数</span><br></pre></td></tr></table></figure><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><h3 id="DCL-数据权限控制"><a href="#DCL-数据权限控制" class="headerlink" title="DCL-数据权限控制"></a>DCL-数据权限控制</h3><p>DCL英文全称是Data Control Language(数据控制语言)，用来管理数据库用户、控制数据库的访问权限。</p><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.user</span><br></pre></td></tr></table></figure><p>查询结果</p><p>其中 Host代表当前用户访问的主机, 如果为localhost, 仅代表只能够在当前本机访问，是不可以 远程访问的。 User代表的是访问该数据库的用户名。在MySQL中需要通过Host和User来唯一标识一 个用户</p><p>创建用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>; # 主机名可以使用 <span class="operator">%</span> 通配</span><br></pre></td></tr></table></figure><p>修改用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p>删除用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><table><thead><tr><th align="center">权限</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ALL, ALL PRIVILEGES</td><td align="center">所有权限</td></tr><tr><td align="center">SELECT</td><td align="center">查询数据</td></tr><tr><td align="center">INSERT</td><td align="center">插入数据</td></tr><tr><td align="center">UPDATE</td><td align="center">修改数据</td></tr><tr><td align="center">DELETE</td><td align="center">删除数据</td></tr><tr><td align="center">ALTER</td><td align="center">修改表</td></tr><tr><td align="center">DROP</td><td align="center">删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td align="center">CREATE</td><td align="center">创建数据库&#x2F;表</td></tr></tbody></table><p>上述只是简单罗列了常见的几种权限描述，其他权限描述及含义，可以直接参考<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html">官方文档</a>。</p><h5 id="查询权限"><a href="#查询权限" class="headerlink" title="查询权限"></a>查询权限</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>; # 多个权限之间，使用逗号分隔</span><br></pre></td></tr></table></figure><h5 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remove 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">from</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>; # 授权时， 数据库名和表名可以使用 <span class="operator">*</span> 进行通配，代表所有</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">CONCAT(S1,S2,…Sn)</td><td align="center">字符串拼接，将S1，S2，… Sn拼接成一个字符串</td></tr><tr><td align="center">LOWER(str)</td><td align="center">将字符串str全部转为小写</td></tr><tr><td align="center">UPPER(str)</td><td align="center">将字符串str全部转为大写</td></tr><tr><td align="center">LPAD(str,n,pad)</td><td align="center">左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td align="center">RPAD(str,n,pad)</td><td align="center">右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td align="center">TRIM(str)</td><td align="center">去掉字符串头部和尾部的空格</td></tr><tr><td align="center">SUBSTRING(str,start,len)</td><td align="center">返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">CEIL(x)</td><td align="center">向上取整</td></tr><tr><td align="center">FLOOR(x)</td><td align="center">向下取整</td></tr><tr><td align="center">MOD(x,y)</td><td align="center">返回x&#x2F;y的模</td></tr><tr><td align="center">RAND()</td><td align="center">返回0~1内的随机数</td></tr><tr><td align="center">ROUND(x,y)</td><td align="center">求参数x的四舍五入的值，保留y位小数</td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">CURDATE()</td><td align="center">返回当前日期</td></tr><tr><td align="center">CURTIME()</td><td align="center">返回当前时间</td></tr><tr><td align="center">NOW()</td><td align="center">返回当前日期和时间</td></tr><tr><td align="center">YEAR(date)</td><td align="center">获取指定date的年份</td></tr><tr><td align="center">MONTH(date)</td><td align="center">获取指定date的月份</td></tr><tr><td align="center">DAY(date)</td><td align="center">获取指定date的日期</td></tr><tr><td align="center">DATE_ADD(date, INTERVAL expr type)</td><td align="center">返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td></tr><tr><td align="center">DATEDIFF(date1,date2)</td><td align="center">返回起始时间date1 和 结束时间date2之间的天数</td></tr></tbody></table><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">IF(value , t , f)</td><td align="center">如果value为true，则返回t，否则返回f</td></tr><tr><td align="center">IFNULL(value1 , value2)</td><td align="center">如果value1不为空，返回value1，否则 返回value2</td></tr><tr><td align="center">CASE WHEN [ val1 ] THEN [res1] … ELSE [ default ] END</td><td align="center">如果val1为true，返回res1，… 否 则返回default默认值</td></tr><tr><td align="center">CASE [ expr ] WHEN [ val1 ] THEN [res1] … ELSE [ default ] END</td><td align="center">如果expr的值等于val1，返回 res1，… 否则返回default默认值</td></tr></tbody></table><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p><p>目的：保证数据库中数据的正确、有效性和完整性。</p><table><thead><tr><th align="center">约束</th><th align="center">描述</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">非空约束</td><td align="center">限制该字段的数据不能为null</td><td align="center">NOT NULL</td></tr><tr><td align="center">唯一约束</td><td align="center">保证该字段的所有数据都是唯一、不重复的</td><td align="center">UNIQUE</td></tr><tr><td align="center">主键约束</td><td align="center">主键是一行数据的唯一标识，要求非空且唯一</td><td align="center">PRIMARY KEY</td></tr><tr><td align="center">默认约束</td><td align="center">保存数据时，如果未指定该字段的值，则采用默认值</td><td align="center">DEFAULT</td></tr><tr><td align="center">检查约束(8.0.16版本之后)</td><td align="center">保证字段值满足某一个条件</td><td align="center">CHECK</td></tr><tr><td align="center">外键约束</td><td align="center">用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td align="center">FOREIGN KEY</td></tr></tbody></table><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>外键：用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</p><h3 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">    ···</span><br><span class="line">    [<span class="keyword">constraint</span>] [外键名称] <span class="keyword">foreign</span> key (外键字段名) <span class="keyword">references</span>  主表(主表列名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> key (外键字段名) <span class="keyword">references</span> 主表(主表列名);</span><br></pre></td></tr></table></figure><h3 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">foreign</span> key 外键名称;</span><br></pre></td></tr></table></figure><h4 id="删除-更新行为"><a href="#删除-更新行为" class="headerlink" title="删除&#x2F;更新行为"></a>删除&#x2F;更新行为</h4><p>添加了外键之后，再删除父表数据时产生的约束行为，我们就称为删除&#x2F;更新行为。具体的删除&#x2F;更新行</p><table><thead><tr><th align="center">行为</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">NO ACTION</td><td align="center">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不 允许删除&#x2F;更新。 (与 RESTRICT 一致) 默认行为</td></tr><tr><td align="center">RESTRICT</td><td align="center">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不 允许删除&#x2F;更新。 (与 NO ACTION 一致) 默认行为</td></tr><tr><td align="center">CASCADE</td><td align="center">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则 也删除&#x2F;更新外键在子表中的记录。</td></tr><tr><td align="center">SET NULL</td><td align="center">当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表 中该外键值为null（这就要求该外键允许取null）。</td></tr><tr><td align="center">SET DEFAULT</td><td align="center">父表有变更时，子表将外键列设置成一个默认的值 (Innodb不支持)</td></tr></tbody></table><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> key (外键字段) <span class="keyword">references</span> 主表名(主表字段名) <span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade;</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：</p><ul><li>一对多(多对一)</li><li>多对多</li><li>一对一</li></ul><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><ul><li>案例: 部门 与 员工的关系</li><li>关系: 一个部门对应多个员工，一个员工对应一个部门</li><li>实现: 在多的一方建立外键，指向一的一方的主键</li></ul><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><ul><li>案例: 学生 与 课程的关系</li><li>关系: 一个学生可以选修多门课程，一门课程也可以供多个学生选择</li><li>实现: 建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</li></ul><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><ul><li>案例: 用户 与 用户详情的关系</li><li>关系: 一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另 一张表中，以提升操作效率</li><li>实现: 在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</li></ul><h2 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询"></a>多表查询</h2><ul><li>连接查询<ul><li>内连接：相当于查询A、B交集部分数据</li><li>外连接：</li><li>左外连接：查询左表所有数据，以及两张表交集部分数据</li><li>右外连接：查询右表所有数据，以及两张表交集部分数据</li><li>自连接：当前表与自身的连接查询，自连接必须使用表别名</li></ul></li><li>子查询</li></ul><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>内连接查询的是两张表交集部分的数 据。(也就是绿色部分的数据)</p><p>内连接的语法分为两种: 隐式内连接、显式内连接。先来学习一下具体的语法结构。</p><p><strong>隐式内连接</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span>，表<span class="number">2</span> <span class="keyword">where</span> 条件 ···;</span><br></pre></td></tr></table></figure><p><strong>显式内连接</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> [<span class="keyword">inner</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件 ···;</span><br></pre></td></tr></table></figure><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
