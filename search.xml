<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>熟悉mybatis</title>
      <link href="/2023/02/10/mybatis/"/>
      <url>/2023/02/10/mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="框架概述"><a href="#框架概述" class="headerlink" title="框架概述"></a>框架概述</h2><p>（说明：ctrl+p是查看函数参数，ctrl+h查看接口实现类）</p><p>mvc—web开发架构模型，m是数据，v是视图，c是控制器</p><p>&#x3D;&#x3D;三层架构&#x3D;&#x3D;：界面层(jsp,serverlet,html，controller包)，业务逻辑层(service调用dao)、数据访问层(增删改查，dao)</p><p>三层中类的交互：界面层–&gt;业务逻辑层–&gt;数据访问层(持久层)–&gt;数据库(mysql)</p><p>三层对应的处理框架：</p><blockquote><ul><li>界面层—servlet–springmvc</li><li>业务逻辑层–service–spring</li><li>数据访问层–dao–mybatis</li></ul></blockquote><img src="/2023/02/10/mybatis/image-20220111154751057.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220111154751057.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><img src="/2023/02/10/mybatis/image-20220111155503069.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220111155503069.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><img src="/2023/02/10/mybatis/image-20220111155617633.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220111155617633.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><img src="/2023/02/10/mybatis/image-20220111155733156.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220111155733156.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><h2 id="Mybatis框架快速入门"><a href="#Mybatis框架快速入门" class="headerlink" title="Mybatis框架快速入门"></a>Mybatis框架快速入门</h2><img src="/2023/02/10/mybatis/image-20220111162334492.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220111162334492.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><img src="/2023/02/10/mybatis/image-20220111213134498.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220111213134498.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><img src="/2023/02/10/mybatis/image-20220112170255354.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220112170255354.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><img src="/2023/02/10/mybatis/image-20220112211606382.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220112211606382.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><p>mybatis的动态代理：就是内部对dao接口进行类实现</p><h2 id="Mybatis框架Dao代理"><a href="#Mybatis框架Dao代理" class="headerlink" title="Mybatis框架Dao代理"></a>Mybatis框架Dao代理</h2><h3 id="深入理解参数"><a href="#深入理解参数" class="headerlink" title="深入理解参数"></a>深入理解参数</h3><p>多个参数：</p><ol><li>使用@Param</li></ol><img src="/2023/02/10/mybatis/image-20220116174102775.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220116174102775.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><ol start="2"><li><p>使用对象 </p></li><li><p>按位置(了解)</p></li></ol><img src="/2023/02/10/mybatis/image-20220116182412700.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220116182412700.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><ol start="4"><li><p>使用Map(了解)</p><img src="/2023/02/10/mybatis/image-20220116184807747.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220116184807747.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"></li><li><p>$和#的区别</p><img src="/2023/02/10/mybatis/image-20220116190931501.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220116190931501.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><img src="/2023/02/10/mybatis/image-20220116192234498.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220116192234498.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"><blockquote><p>#是占位符 $底层是字符串拼接，可能会出现sql注入：&#x3D;&#x3D;id&#x3D;+”‘李四’”;drop table student if exists;&#x3D;&#x3D;</p></blockquote></li></ol><h2 id="封装MyBatis输出结果"><a href="#封装MyBatis输出结果" class="headerlink" title="封装MyBatis输出结果"></a>封装MyBatis输出结果</h2><h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><p>resultType的值，1、类型的全限定名称  2、类型的别名</p><ol><li><p>简单类型</p><img src="/2023/02/10/mybatis/image-20220116200041809.png" class="lazyload placeholder" data-srcset="/2023/02/10/mybatis/image-20220116200041809.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder"></li><li><p>对象类型</p><p><strong>resultType</strong>指结果类型，指sql语句执行完毕后，数据转化为的java对象</p><blockquote><p>&#x3D;&#x3D;在mybatis主配置文件中定义，使用<typeAliases>定义别名&#x3D;&#x3D;，之后就可以在resultType中直接使用别名</p><p>方式1、</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--type是全限定名称  alias是别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式2、(让对应的类名称为别名)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.domain&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.vo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>Map (用的比较少)</p></li></ol><blockquote><p> 返回Map，列名是map的key，列值是map的value</p></blockquote><blockquote><p>返回Map最多只能返回一行记录，多于一行就会错误</p></blockquote><h3 id="resultMap-结果映射"><a href="#resultMap-结果映射" class="headerlink" title="resultMap(结果映射)"></a>resultMap(结果映射)</h3><blockquote><p>指定列名和java对象的属性之间的对应关系，<strong>以下几种情况需要</strong>使用resultType</p><ul><li>如果我偏要把id给name属性呢，就要用着&#x3D;&#x3D;结果映射&#x3D;&#x3D;</li><li>当<strong>列名</strong>和<strong>属性名</strong>不同的时候需要使用</li></ul><p>&#x3D;&#x3D;在mapper文件中的配置&#x3D;&#x3D;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如何使用resultMap</span></span><br><span class="line"><span class="comment">1)先定义resultMap</span></span><br><span class="line"><span class="comment">2)在select标签，使用resultMap来引用1）定义的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--标签内 定义列和java对象属性的关系--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--column是列名(sql的)</span></span><br><span class="line"><span class="comment">property是属性名(java对象的)</span></span><br><span class="line"><span class="comment">主键列使用id标签</span></span><br><span class="line"><span class="comment">对于非主键列使用result标签</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   这是第一种方式 </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">select id,name,email,age from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">这是第二种方式：在sql语句中使用别名</span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">select id as 名,name as 名,email as 名,age as 名 from student</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试程序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectAllStudentTest</span><span class="params">()</span>&#123;</span><br><span class="line">        SqlSession sqlSession=MyBatisUtils.getSqlSession();</span><br><span class="line">        StudentDao dao=sqlSession.getMapper(StudentDao.class);</span><br><span class="line">        List&lt;Student&gt; students=dao.selectAllStudent();</span><br><span class="line">        students.forEach(student -&gt; System.out.println(student));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>resultType和resultMap不要一起用，二选一</strong></p></blockquote><h3 id="Like模糊查询"><a href="#Like模糊查询" class="headerlink" title="Like模糊查询"></a>Like模糊查询</h3><blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基本命令</title>
      <link href="/2023/01/20/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/01/20/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a>linux命令</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><hr/><h3 id="快捷操作"><a href="#快捷操作" class="headerlink" title="快捷操作"></a>快捷操作</h3><p>tab &#x3D;&#x3D;&#x3D; 补齐功能</p><p>history [n] &#x3D;&#x3D;&#x3D; 查看历史命令，<code>history n</code> 可执行第n个命令</p><p>上下键 &#x3D;&#x3D;&#x3D; 切换上下命令</p><p>home 和 end &#x3D;&#x3D;&#x3D; 光标移动至行首或行尾</p><p>clear 和 Ctrl + L &#x3D;&#x3D;&#x3D; 清屏</p><p>alias 别名 &#x3D;  ‘ 命令或参数 ‘ &#x3D;&#x3D;&#x3D; 定义快捷命令</p><p>unalias 别名</p><p>id (用户) &#x3D;&#x3D;&#x3D; id信息</p><hr/><h3 id="电源命令"><a href="#电源命令" class="headerlink" title="电源命令"></a>电源命令</h3><p>shutdown &#x3D;&#x3D;&#x3D; 关闭计算机，仅 root 用户可用</p><p> <code>-h</code> 关机后关电源</p><p> <code>r</code> 关机后打开电源（重启）</p><p> <code>-t</code> 在改变到其他运行级别之前，告诉 init 程序多久以后关机</p><p><code>-k</code> 并不是真正的关机，发送关机信号给每位登录用户</p><p><code>-F</code> 重启计算机后强制fsck（文件系统检测）</p><p> <code>- time</code> 设定关机前的时间</p><p>halt &#x3D;&#x3D;&#x3D; 关闭系统</p><p> <code>-n</code> 保存数据后重启</p><p><code>-f</code> 强制关闭</p><p><code>-i</code> 关机前会关掉所有网络接口</p><p><code>d</code> 关闭系统，不留下日志记录</p><p>reboot &#x3D;&#x3D;&#x3D; 重启</p><p><code>-i</code> 重启前关闭网络设置</p><hr/><p>passwd  [用户名] &#x3D;&#x3D;&#x3D; 修改密码</p><p>su username &#x3D;&#x3D;&#x3D; 切换用户</p><p>sh &#x3D;&#x3D;&#x3D; 切换shell操作</p><p>ip addr &#x3D;&#x3D;&#x3D; 查看ip</p><p>chmod &#x3D;&#x3D;&#x3D; 增加文件的可执行权限</p><p>last &#x3D;&#x3D;&#x3D; 登录记录 <code>-n</code> 显示最近n条记录</p><hr/><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>pwd &#x3D;&#x3D;&#x3D; 显示当前工作目录</p><p> <code>-L</code>  目录连接链接时输出连接路径 </p><p> <code>-P</code> 输出物理路径</p><p>cd &#x3D;&#x3D;&#x3D; 返回主目录</p><p> <code>/url</code> 进入 url 目录</p><p> <code>..</code> 返回上一级</p><p> <code>.</code> 进入当前目录</p><p> <code>-</code> 进入前一个目录</p><p> <code>~</code> 进入主目录</p><p>ls &#x3D;&#x3D;&#x3D; 列出当前目录下所有文件和目录</p><p> <code>-a</code> 显示所有文件和目录</p><p> <code>-l</code> 列出详细</p><p> <code>-t</code> 按文件建立时间先后次序列排序</p><p> <code>-R</code> 子目录也列出</p><p>mkdir &#x3D;&#x3D;&#x3D; 创建目录</p><p>cp &#x3D;&#x3D;&#x3D; 复制文件或目录</p><p> <code>-a</code> 保留链接、文件属性</p><p> <code>-p</code> 复制修改时间和访问权限</p><p> <code>-r</code> 复制改目录下的所有子目录和文件</p><p> <code>-l</code> 不复制文件只生成链接文件</p><p>mv &#x3D;&#x3D;&#x3D; 移动文件或目录</p><p> <code>-b</code> 覆盖文件前先备份</p><p> <code>-f</code> 强制移动，如果目标文件已存在，直接覆盖</p><p> <code>-i</code> 若目标文件已存在，则询问是否覆盖</p><p> <code>-u</code> 若目标文件已存在，且 source 比较新，才会更新</p><p>rm &#x3D;&#x3D;&#x3D; 删除文件</p><p> <code>-f</code> 忽略不存在的文件，强制删除</p><p> <code>-i</code> 进行互交式删除</p><p> <code>-r</code> 递归删除</p><p> <code>-v</code> 详细显示进行步骤</p><p>cat &#x3D;&#x3D;&#x3D; 读取文件全部内容，cat &gt;(&gt;&gt;) filename &#x3D;&#x3D;&#x3D; 编辑文件，cat file1 file2 &gt; file3 &#x3D;&#x3D;&#x3D; 将文件合并为file3</p><p> <code>-A</code> 显示不可打印的字符</p><p> <code>-b</code> 对非空输出行编号</p><p> <code>-E</code> 在每行结束处显示$</p><p> <code>-s</code> 当有多个空行在一起时只输出一个空行</p><p> <code>-n</code> 由1开始对输出的所有行编号 </p><hr/><h3 id="分页和查找"><a href="#分页和查找" class="headerlink" title="分页和查找"></a>分页和查找</h3><p>head &#x3D;&#x3D;&#x3D; 显示文件开头10行内容，<code>-n</code> 显示前n行</p><p> <code>-q</code> 隐藏文件名</p><p> <code>-v</code> 显示文件名</p><p> <code>-c</code> 显示字节数</p><p>tail &#x3D;&#x3D;&#x3D; 读取文件尾部</p><p> <code>-f</code> 循环读取</p><p> <code>-q</code> 不显示处理信息</p><p> <code>-v</code> 显示详细的处理信息</p><p> <code>-c</code> &lt;数目&gt;显示的字节数</p><p> <code>-n</code> &lt;行数&gt;显示行数</p><p>more &#x3D;&#x3D;&#x3D; 逐页阅读文件</p><p> <code>+n</code> 从第 n 行开始显示</p><p> <code>-n</code> 定义屏幕大小为 n 行</p><p> <code>+/pattern</code> 搜索改字串（pattern），然后从该字串前两行开始显示</p><p> <code>-c</code> 全屏再显示</p><p>快捷键：</p><p> <code>Enter</code> 向下 n 行，需自己定义</p><p> <code>Ctrl+F</code> or <code>空格键</code> 向下滚动一页</p><p> <code>Ctrl+B</code> 返回上一页</p><p> <code>=</code> 输出当前行的行号</p><p> <code>V</code> 调用 vi 编辑器</p><p> <code>!命令</code> 调用 shell 并执行命令</p><p> <code>q</code> 退出 </p><p>less &#x3D;&#x3D;&#x3D; 读取内容，在查看之前不会加载整个文件</p><p> <code>/字符串</code> 向下搜索</p><p> <code>?字符串</code> 向上搜索</p><p> <code>q</code> 退出</p><p> <code>空格键</code> 滚动一页</p><p> <code>Enter</code> 滚动一行</p><p>find &#x3D;&#x3D;&#x3D; 在指定目录下查找文件</p><p> <code>-name</code> 按照文件名查找</p><p> <code>perm</code> 按照文件权限查找</p><p> <code>-user</code> 按照文件属主查找</p><p> <code>-type</code> d - 目录 f - 一般文件 l - 软链接</p><p> <code>-mtime -n +n</code> 按照文件更改时间查找</p><p>which &#x3D;&#x3D;&#x3D; 在 PATH 所指定的目录中查找可执行文件</p><p>cut &#x3D;&#x3D;&#x3D; 提取列或字段</p><p> <code>-b</code> 仅显示行中指定直接范围的内容</p><p> <code>-c[范围]</code> 仅显示行中指定范围的字符</p><p> <code>-d</code> 指定字段的分隔符，默认字段分隔符为 TAB</p><p> <code>-f[范围]</code> 显示指定第 num 个字段内容，可以用逗号隔开显示多个字段</p><hr/><h3 id="压缩和打包"><a href="#压缩和打包" class="headerlink" title="压缩和打包"></a>压缩和打包</h3><p>gzip &#x3D;&#x3D;&#x3D; 进行压缩或解压文件</p><p> <code>-d</code> or <code>--decompress</code> or <code>---uncompress</code> 解开压缩文件</p><p> <code>-f</code> or <code>-force</code> 强行压缩文件</p><p> <code>-l</code> or <code>--list</code> 列出压缩文件相关信息</p><p> <code>-r</code> or <code>--recursive</code> 递归处理，将指定目录下及子目录一并处理</p><p> <code>-v</code> or <code>--verbose</code> 显示执行过程</p><p>tar &#x3D;&#x3D;&#x3D; 打包文件或目录</p><p> <code>-c</code> 建立新的压缩文件</p><p> <code>-x</code> 从压缩文件中提取文件</p><p> <code>-t</code> 显示压缩文件内容</p><p> <code>-z</code> 支持 gzip 解压文件</p><p> <code>-j</code> 支持 bzip2 解压文件</p><p> <code>-v</code> 显示操作过程</p><p> <code>-C</code> 指定解压的路径</p><p>ln &#x3D;&#x3D;&#x3D; 创建链接文件（默认硬链接）</p><p> <code>-b</code> 删除，覆盖以前建立的链接</p><p> <code>-d</code> 允许超级用户制作目录的硬链接</p><p> <code>-f</code> 强制执行</p><p> <code>-i</code> 交互模式，文件存在则提示用户是否覆盖</p><p> <code>-n</code> 把符号链接视为一般目录</p><p> <code>-s</code> 软连接（符号链接）</p><hr/><h2 id="用户命令"><a href="#用户命令" class="headerlink" title="用户命令"></a>用户命令</h2><p>useradd &#x3D;&#x3D;&#x3D; 创建用户账号，并保存到 &#x2F;etc&#x2F;passwd 文件中</p><h2 id="RPM-DNF"><a href="#RPM-DNF" class="headerlink" title="RPM &amp; DNF"></a>RPM &amp; DNF</h2><p>rpm &#x3D;&#x3D;&#x3D; 用于安装、删除、升级、刷新和查询软件</p><p> <code>-i</code> 指定安装的软件包</p><p> <code>-h</code> 使用 ‘#（hash）’ 符显示 rpm 详细的安装过程及进度</p><p> <code>-v</code> 显示安装的详细过程</p><p> <code>-U</code> 升级指定的软件包</p><p> <code>-q</code> 查询系统是否已安装指定的软件包或查询指定 rpm 包内容信息</p><p> <code>-a</code> 查看系统已安装的所有软件包</p><p> <code>-V</code> 查询已安装的软件包的版本信息</p><p> <code>-c</code> 显示所有配置文件</p><p> <code>-p</code> 查询&#x2F;校验一个软件包文件</p><p>DNF &#x3D;&#x3D;&#x3D; 软件源服务，软件源是 Linux 系统免费的应用程序安装仓库</p><p>安装 DNF 包管理器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必须先安装并启用 epel-release 依赖</span></span><br><span class="line">yum install epel-release (-y)</span><br><span class="line"><span class="comment"># 使用 epel-release 依赖中的 yum 命令来安装 DNF 包</span></span><br><span class="line">yum install dnf</span><br></pre></td></tr></table></figure><p>DNF配置文件（&#x2F;etc&#x2F;dnf&#x2F;dnf.conf）</p><p>配置远程软件源仓库</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=repository_name</span><br><span class="line">baseurl=repository_url</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置本地软件源仓库</span></span><br><span class="line">dnf install createrepo</span><br><span class="line"><span class="comment"># 将需要的软件包放置在目录下</span></span><br><span class="line">createrepo --database /目录</span><br></pre></td></tr></table></figure><h2 id="源代码软件安装"><a href="#源代码软件安装" class="headerlink" title="源代码软件安装"></a>源代码软件安装</h2><ol><li><p>下载源码包并解压（校验包完整性）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget /https://*/*.tgz</span><br><span class="line">tar -zxvf *.tgz</span><br></pre></td></tr></table></figure></li><li><p>查看README和INSTALL文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> README</span><br></pre></td></tr></table></figure></li><li><p>创建Makefile文件 - 通过执行 <code>./configure</code> 脚本命令生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/name</span><br></pre></td></tr></table></figure></li><li><p>编译 - 在包目录下通过 make 命令将源码自动编译成二进制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>安装软件 - 通过 make install 安装命令来将上步编译出来的二进制文件安装到对应的目录中区，默认的安装路径为 <code>/usr/local/</code>，相应的配置文件位置为 <code>/usr/local/etc</code></p></li></ol><h2 id="systemd管理服务"><a href="#systemd管理服务" class="headerlink" title="systemd管理服务"></a>systemd管理服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前正在运行的服务</span></span><br><span class="line">systemctl list -units --<span class="built_in">type</span> service</span><br><span class="line"><span class="comment"># 运行服务</span></span><br><span class="line">systemctl start name.service</span><br><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">systemctl stop name.service</span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">systemctl restart name.service</span><br><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> name.service</span><br><span class="line"><span class="comment"># 禁用服务</span></span><br><span class="line">systemctl <span class="built_in">disable</span> name.service</span><br></pre></td></tr></table></figure><h2 id="磁盘信息"><a href="#磁盘信息" class="headerlink" title="磁盘信息"></a>磁盘信息</h2><p>df -h &#x3D;&#x3D;&#x3D; 查看系统挂载、磁盘空间大小和利用率</p><p>fdisk &#x3D;&#x3D;&#x3D; 查看系统所有磁盘信息（DOS、BSD、SUN方案）</p><p>必要参数：</p><p> <code>-l</code> 列出所有分区表</p><p> <code>-u -l</code> 显示分区数目，会用分区数目取代柱面数目，来表示每个分区的起始地址</p><p> <code>-b&lt;分区大小&gt;</code> 指定没饿过分区的大小</p><p>选择参数：</p><p> <code>-s&lt;分区编号&gt;</code> 如（&#x2F;dev&#x2F;sda1）将指定的分区大小输出到标准输出上，单位为区块</p><p> <code>-v</code> 显示版本信息</p><p>菜单操作说明</p><p> <code>m</code> 显示菜单和帮助信息</p><p> <code>a</code> 活动分区标记 &#x2F; 引导分区</p><p> <code>d</code> 删除分区</p><p> <code>l</code> 显示分区类型</p><p> <code>n</code> 新建分区</p><p> <code>p</code> 显示分区信息</p><p> <code>q</code> 退出不保存</p><p> <code>t</code> 设置分区号</p><p> <code>v</code> 分区检查</p><p> <code>w</code> 保存修改</p><p> <code>x</code> 拓展应用，高级功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前分区情况</span></span><br><span class="line">fdisk -l</span><br><span class="line"><span class="comment"># 显示硬盘的每个分区情况</span></span><br><span class="line">fdisk -lu</span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure><p>parted &#x3D;&#x3D;&#x3D; 分区软件（GPT方案）</p><p> <code>-l</code> 列出分区</p><p> <code>-h</code> 显示帮助信息</p><p> <code>-i</code> 互交模式</p><p> <code>-s</code> 脚本模式</p><p> <code>-v</code> 显示 parted 的版本信息</p><p> <code>/dev/sda</code> 打开存储设备</p><p> <code>command</code> parted 指令，如果没有设置指令，则 parted 将会进入交互模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出分区</span></span><br><span class="line">parted -l</span><br><span class="line"><span class="comment"># 选择操作磁盘</span></span><br><span class="line">parted /dev/sda</span><br><span class="line"><span class="comment"># 设置分区表为 GPT 并输入 yes 开始执行</span></span><br><span class="line">(parted) [mklabel | mktable] gpt <span class="comment"># =&gt; mklabel &amp; mktable 不会创建分区，而是创建分区表</span></span><br><span class="line">Yes/No? ==&gt; Yes</span><br><span class="line"><span class="comment"># 查看存储设备信息</span></span><br><span class="line">(parted) <span class="built_in">print</span></span><br><span class="line"><span class="comment"># 获取帮助</span></span><br><span class="line">(parted) <span class="built_in">help</span> mkpart</span><br><span class="line"><span class="comment"># 创建分区(分区0有1396MB)</span></span><br><span class="line">(parted) mkpart primary 0 1396MB</span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line">(parted) quit</span><br></pre></td></tr></table></figure><h3 id="磁盘格式化"><a href="#磁盘格式化" class="headerlink" title="磁盘格式化"></a>磁盘格式化</h3><p>mkfs &#x3D;&#x3D;&#x3D; 双击<code>tab</code> 可查看支持的文件类型</p><p>mkfs.ext4 &#x2F;dev&#x2F;sdb2 &#x3D;&#x3D;&#x3D; 格式化 sdb2 分区类型为 ext4</p><p><code>device</code> 预备检查的硬盘分区</p><p> <code>-V</code> 详细显示模式</p><p> <code>-t</code> 给定档案系统的形式，Linux 的预设值为 ext2 <code>mkfs -t ext2 /dev/sda</code></p><p> <code>-c</code> 在制作档案系统前，检查该 partition 是否有坏轨</p><p> <code>-l bad_block_file</code> 将有坏轨的 block 资料加到 bad_blocks_file 里面</p><p> <code>block</code> 给定 block 的大小</p><h3 id="磁盘挂载"><a href="#磁盘挂载" class="headerlink" title="磁盘挂载"></a>磁盘挂载</h3><p>磁盘格式化完成后还不能使用，必须挂载才能使用</p><p>ll &#x2F;dev&#x2F;sdb2 &#x3D;&#x3D;&#x3D; 查看磁盘信息</p><p>挂载点目录 &#x3D;&#x3D;&#x3D; 在更目录自己创建一个目录作为挂载点目录</p><p>临时挂载 &#x3D;&#x3D;&#x3D; mount &#x2F;dev&#x2F;sda5 &#x2F;test 意思是 sda5 挂载到 test，重启后失效</p><p>永久挂载 &#x3D;&#x3D;&#x3D; 使用 vim 编辑 &#x2F;etc&#x2F;fstab</p><h3 id="逻辑卷管理"><a href="#逻辑卷管理" class="headerlink" title="逻辑卷管理"></a>逻辑卷管理</h3><p>pvcreate &#x3D;&#x3D;&#x3D; 创建物理卷，可以使用物理磁盘或者磁盘分区创建</p><p> <code>-f</code> 强制创建物理卷，不需要用户确认</p><p> <code>-u</code> 指定设备的UUID</p><p> <code>-y</code> 所有问题都回答 yes</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建物理卷</span></span><br><span class="line">pvcreate /dev/sda</span><br></pre></td></tr></table></figure><p>vgcreate &#x3D;&#x3D;&#x3D; 创建 LVM 卷组，将多个物理卷组织成一个整体</p><p> <code>-l</code> 卷组上允许创建的最大逻辑卷数</p><p> <code>-p</code> 卷组中允许添加的最大物理卷数</p><p> <code>-s</code> 卷组上的物理卷的 PE 大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建卷组 vg1000 并将sdb1和sdb2添加到卷组中</span></span><br><span class="line">vgcreate vg1000 /dev/sdb1 /dev/sdb2</span><br><span class="line"><span class="comment"># 删除 LVM 卷组</span></span><br><span class="line">vgremove vg1000</span><br><span class="line"><span class="comment"># 查看卷组信息</span></span><br><span class="line">vgdisplay vg1000</span><br></pre></td></tr></table></figure><p>vgextend vg1000 &#x2F;dev&#x2F;sda1 &#x3D;&#x3D;&#x3D; 将 sda1 扩容到卷组 vg1000</p><p>lvcreate &#x3D;&#x3D;&#x3D; 创建 LVM 的逻辑卷</p><p> <code>-L</code> 指定逻辑卷的大小，单位为 “kKmMgGtT” 字节</p><p> <code>-l</code> 指定逻辑卷的大小（LE数）</p><blockquote><p>逻辑卷创建完成后同样需要格式化且挂载后才能使用（<code>mkfs</code> 格式化 <code>mount</code> 临时挂载）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在卷组 vg1000 上创建一个200MB的逻辑卷</span></span><br><span class="line">lvcreate -L 200M vg1000</span><br><span class="line"><span class="comment"># 使用 lvdisplay、lvscan 查看卷组信息</span></span><br><span class="line">lvscan <span class="comment"># 扫描所有逻辑卷</span></span><br></pre></td></tr></table></figure><h3 id="逻辑卷扩容"><a href="#逻辑卷扩容" class="headerlink" title="逻辑卷扩容"></a>逻辑卷扩容</h3><ol><li><p>扩容前先检查是否有足够 vg 空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgs</span><br></pre></td></tr></table></figure></li><li><p>使用命令扩容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvextend -L +SIZE lv_device(name)</span><br></pre></td></tr></table></figure></li><li><p>调整文件系统的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resize2fs device lv_device(name)</span><br></pre></td></tr></table></figure></li></ol><h3 id="逻辑卷缩容"><a href="#逻辑卷缩容" class="headerlink" title="逻辑卷缩容"></a>逻辑卷缩容</h3><ol><li>确定缩减后的目标大小，并确定其有足够空间容纳所有原有数据</li><li>卸载文件系统 （<code>umount</code>） 并执行强制检测（<code>e2fsck -f</code>）</li><li>缩减文件系统（<code>resize2fs DEVICE</code>)</li><li>缩减逻辑卷（<code>lvreduce</code>）</li><li>重新挂载使用</li></ol><p>逻辑卷容量变更</p><p>lvresize &#x3D;&#x3D;&#x3D; lvextend + lvreduce</p><p> <code>-L</code> 指定逻辑卷的大小，单位为 “kKmMgGtT” 字节</p><p> <code>-l</code> 指定逻辑卷的大小（LE数）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 lvresize 指令增容</span></span><br><span class="line">lvresize -L +200M /dev/vg1000/lvol0 <span class="comment"># 将逻辑卷空间增加200M</span></span><br></pre></td></tr></table></figure><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h2 id="tmux教程"><a href="#tmux教程" class="headerlink" title="tmux教程"></a>tmux教程</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>分屏</li><li>允许断开 Terminal 连接后，继续运行进程</li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>​一个 tmux 可以包含多个 session，一个 session 可以包含多个 window，一个 window 可以包含多个 pane</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tmux:</span><br><span class="line">session 0:</span><br><span class="line">window 0:</span><br><span class="line">pane 0</span><br><span class="line">pane 1</span><br><span class="line">pane 2</span><br><span class="line">...</span><br><span class="line">window 1</span><br><span class="line">window 2</span><br><span class="line">...</span><br><span class="line">session 1</span><br><span class="line">session 2</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol><li>tmux：新建一个session，其中包含一个 window，window 中包含一个 pane，pane里打开了一个shell对话框。<code>tmux new -s name</code></li><li>按下 Ctrl + b 后手指松开，然后按%：将当前 pane 左右平分成两个pane。</li><li>按下 Ctrl + b 后手指松开，然后按”：将当前pane上下平分成两个 pane。</li><li>Ctrl + d：关闭当前 pane；如果当前 window 的所有 pane 均已关闭，则自动关闭 window；如果当前session 的所有 window 均已关闭，则自动关闭 session。</li><li>鼠标点击可以选 pane。</li><li>按下 ctrl + b 后手指松开，然后按方向键：选择相邻的pane。</li><li>鼠标拖动pane之间的分割线，可以调整分割线的位置。</li><li>按住ctrl + b的同时按方向键，可以调整pane之间分割线的位置。</li><li>按下ctrl + b后手指松开，然后按z：将当前pane全屏&#x2F;取消全屏。</li><li>按下ctrl + b后手指松开，然后按d：挂起当前session。</li><li>tmux a：打开之前挂起的session。</li><li>按下ctrl + a后手指松开，然后按s：选择其它session。<br>    方向键 —— 上：选择上一项 session&#x2F;window&#x2F;pane<br>    方向键 —— 下：选择下一项 session&#x2F;window&#x2F;pane<br>    方向键 —— 右：展开当前项 session&#x2F;window<br>    方向键 —— 左：闭合当前项 session&#x2F;window</li><li>按下Ctrl + a后手指松开，然后按c：在当前session中创建一个新的window。</li><li>按下Ctrl + a后手指松开，然后按w：选择其他window，操作方法与(12)完全相同。</li><li>按下Ctrl + a后手指松开，然后按PageUp：翻阅当前pane内的内容。</li><li>鼠标滚轮：翻阅当前pane内的内容。</li><li>在tmux中选中文本时，需要按住shift键。（仅支持Windows和Linux，不支持Mac，不过该操作并不是必须的，因此影响不大）</li><li>tmux中复制&#x2F;粘贴文本的通用方式：</li></ol><ul><li>按下Ctrl + b后松开手指，然后按[</li><li>用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板</li><li>按下Ctrl + b后松开手指，然后按]，会将剪贴板中的内容粘贴到光标处</li></ul><h2 id="vim教程"><a href="#vim教程" class="headerlink" title="vim教程"></a>vim教程</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><ul><li>命令行模式下的文本编辑器。</li><li>根据文件扩展名自动判别编程语言。支持代码缩进、代码高亮等功能。</li><li>使用方式：vim filename<br>如果已有该文件，则打开它。<br>如果没有该文件，则打开个一个新的文件，并命名为filename</li></ul><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><ul><li><p>一般命令模式<br>默认模式。命令输入方式 <code>：</code> 类似于打游戏放技能，按不同字符，即可进行不同操作。可以复制、粘贴、删除文本等。sudo </p></li><li><p>编辑模式<br>在一般命令模式里按下 <code>i</code>，会进入编辑模式。</p><p>按下 <code>ESC</code> 会退出编辑模式，返回到一般命令模式。</p></li><li><p>命令行模式</p><p>在一般命令模式里按下 <code>:/?</code> 三个字母中的任意一个，会进入命令行模式。命令行在最下面。<br>可以查找、替换、保存、退出、配置编辑器等。</p></li></ul><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><p>​(1) <code>i</code>：进入编辑模式<br>​    (2)  <code>ESC</code> ：进入一般命令模式<br>​    (3)  <code>h</code>  或 左箭头键：光标向左移动一个字符<br>​    (4)  <code>j</code>  或 向下箭头：光标向下移动一个字符<br>​    (5)  <code>k</code>  或 向上箭头：光标向上移动一个字符<br>​    (6)  <code>l</code>  或 向右箭头：光标向右移动一个字符<br>​    (7)  <code>n&lt;Space&gt;</code> ：n表示数字，按下数字后再按空格，光标会向右移动这一行的n个字符<br>​    (8)  <code>0</code>  或 功能键 <code>[Home] </code>：光标移动到本行开头<br>​    (9)  <code>$</code>  或 功能键 <code>[End]</code> ：光标移动到本行末尾<br>​    (10) <code>G</code>：光标移动到最后一行<br>​    (11) <code>:n</code> 或 <code>nG：n</code>为数字，光标移动到第n行<br>​    (12) gg：光标移动到第一行，相当于1G<br>​    (13) n<Enter>：n为数字，光标向下移动n行<br>​    (14) &#x2F;word：向光标之下寻找第一个值为word的字符串。<br>​    (15) ?word：向光标之上寻找第一个值为word的字符串。<br>​    (16) n：重复前一个查找操作<br>​    (17) N：反向重复前一个查找操作<br>​    (18) :n1,n2s&#x2F;word1&#x2F;word2&#x2F;g：n1与n2为数字，在第n1行与n2行之间寻找word1这个字符串，并将该字符串替换为word2<br>​    (19) :1,$s&#x2F;word1&#x2F;word2&#x2F;g：将全文的word1替换为word2<br>​    (20) :1,$s&#x2F;word1&#x2F;word2&#x2F;gc：将全文的word1替换为word2，且在替换前要求用户确认。<br>​    (21) v：选中文本<br>​    (22) d：删除选中的文本<br>​    (23) dd: 删除当前行<br>​    (24) y：复制选中的文本<br>​    (25) yy: 复制当前行<br>​    (26) p: 将复制的数据在光标的下一行&#x2F;下一个位置粘贴<br>​    (27) u：撤销<br>​    (28) Ctrl + r：取消撤销<br>​    (29) 大于号 &gt;：将选中的文本整体向右缩进一次<br>​(30) 小于号 &lt;：将选中的文本整体向左缩进一次<br>​    (31) :w 保存<br>​    (32) :w! 强制保存<br>​    (33) :q 退出<br>​    (34) :q! 强制退出<br>​    (35) :wq 保存并退出<br>​    (36) :set paste 设置成粘贴模式，取消代码自动缩进<br>​    (37) :set nopaste 取消粘贴模式，开启代码自动缩进<br>​    (38) :set nu 显示行号<br>​    (39) :set nonu 隐藏行号<br>​    (40) gg&#x3D;G：将全文代码格式化<br>​    (41) :noh 关闭查找关键词高亮<br>​    (42) Ctrl + q：当vim卡死时，可以取消当前正在执行的命令</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>每次用vim编辑文件时，会自动创建一个.filename.swp的临时文件。<br>如果打开某个文件时，该文件的swp文件已存在，则会报错。此时解决办法有两种：</p><ul><li>找到正在打开该文件的程序，并退出</li><li>直接删掉该swp文件即可</li></ul><h2 id="shell语法-脚本"><a href="#shell语法-脚本" class="headerlink" title="shell语法(脚本)"></a>shell语法(脚本)</h2><h3 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h3><p>shell是我们通过命令行与操作系统沟通的语言。</p><p>shell脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。<br>AC Terminal中的命令行可以看成是一个“shell脚本在逐行执行”。</p><p>Linux中常见的shell脚本有很多种，常见的有：</p><p>Bourne Shell(&#x2F;usr&#x2F;bin&#x2F;sh或&#x2F;bin&#x2F;sh)<br>Bourne Again Shell(&#x2F;bin&#x2F;bash)<br>C Shell(&#x2F;usr&#x2F;bin&#x2F;csh)<br>K Shell(&#x2F;usr&#x2F;bin&#x2F;ksh)<br>zsh<br>…<br>Linux系统中一般默认使用 <code>bash</code>，所以接下来讲解 <code>bash</code> 中的语法。<br>文件开头需要写 <code>#!/bin/bash</code>，指明 <code>bash</code> 为脚本解释器。</p><h3 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h3><p>新建一个 test.sh 文件，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">echo &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure><p>作为可执行文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh  # 使脚本具有可执行权限</span><br><span class="line">./test.sh  # 当前路径下执行</span><br><span class="line">Hello World!  # 脚本输出</span><br><span class="line">/home/acs/test.sh  # 绝对路径下执行</span><br><span class="line">Hello World!  # 脚本输出</span><br><span class="line">~/test.sh  # 家目录路径下执行</span><br><span class="line">Hello World!  # 脚本输出</span><br></pre></td></tr></table></figure><p>解释器执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">bash test.sh</span></span><br><span class="line">Hello World!  # 脚本输出</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是一行注释</span></span><br></pre></td></tr></table></figure><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;EOF#(不加冒号也可注释，EOF是自定义的)</span><br><span class="line">第一行注释</span><br><span class="line">第二行注释</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><p>定义变量，不需要加 <code>$</code> 符号，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name1=&#x27;yxc&#x27;  # 单引号定义字符串</span><br><span class="line">name2=&quot;yxc&quot;  # 双引号定义字符串</span><br><span class="line">name3=yxc    # 也可以不加引号，同样表示字符串</span><br></pre></td></tr></table></figure><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><p>使用变量，需要加上 <code>$</code> 符号，或者 <code>$&#123;&#125;</code> 符号。花括号是<strong>可选的</strong>，主要为了帮助解释器识别变量边界。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line">echo $name  # 输出yxc</span><br><span class="line">echo $&#123;name&#125;  # 输出yxc</span><br><span class="line">echo $&#123;name&#125;acwing  # 输出yxcacwing</span><br></pre></td></tr></table></figure><h4 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h4><p>使用 <code>readonly</code> 或者 <code>declare</code> 可以将变量变为只读。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line">readonly name</span><br><span class="line">declare -r name  # 两种写法均可</span><br><span class="line"></span><br><span class="line">name=abc  # 会报错，因为此时name只读</span><br></pre></td></tr></table></figure><h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h4><p><code>unset</code> 可以删除变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line">unset name</span><br><span class="line">echo $name  # 输出空行</span><br></pre></td></tr></table></figure><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><ul><li>自定义变量（局部变量），子进程不能访问的变量</li><li>环境变量（全局变量），子进程可以访问的变量</li></ul><p>自定义变量改成环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">name=yxc  <span class="comment"># 定义变量</span></span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">export</span> name  <span class="comment"># 第一种方法</span></span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">declare</span> -x name  <span class="comment"># 第二种方法</span></span></span><br></pre></td></tr></table></figure><p>环境变量改为自定义变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">export</span> name=yxc  <span class="comment"># 定义环境变量</span></span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">declare</span> +x name  <span class="comment"># 改为自定义变量</span></span></span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p><strong>单</strong>引号与<strong>双</strong>引号的区别：</p><ul><li>单引号中的内容会原样输出，不会执行、不会取变量；</li><li>双引号中的内容可以执行、可以取变量；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=yxc  # 不用引号</span><br><span class="line">echo &#x27;hello, $name \&quot;hh\&quot;&#x27;  # 单引号字符串，输出 hello, $name \&quot;hh\&quot;</span><br><span class="line">echo &quot;hello, $name \&quot;hh\&quot;&quot;  # 双引号字符串，输出 hello, yxc &quot;hh&quot;</span><br></pre></td></tr></table></figure><p>获取字符串长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;yxc&quot;</span><br><span class="line">echo $&#123;#name&#125;  # 输出3</span><br></pre></td></tr></table></figure><p>提取子串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;hello, yxc&quot;</span><br><span class="line">echo $&#123;name:0:5&#125;  # 提取从0开始的5个字符</span><br></pre></td></tr></table></figure><h3 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h3><h4 id="文件参数变量"><a href="#文件参数变量" class="headerlink" title="文件参数变量"></a>文件参数变量</h4><p>在执行shell脚本时，可以向脚本传递参数。<code>$1</code> 是第一个参数，<code>$2</code> 是第二个参数，以此类推。特殊的，<code>$0</code> 是文件名（包含路径）。例如：</p><p>创建文件 <code>test.sh</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;文件名：&quot;$0</span><br><span class="line">echo &quot;第一个参数：&quot;$1</span><br><span class="line">echo &quot;第二个参数：&quot;$2</span><br><span class="line">echo &quot;第三个参数：&quot;$3</span><br><span class="line">echo &quot;第四个参数：&quot;$4</span><br></pre></td></tr></table></figure><p>执行该脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">chmod</span> +x test.sh</span> </span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">./test.sh 1 2 3 4</span></span><br><span class="line">文件名：./test.sh</span><br><span class="line">第一个参数：1</span><br><span class="line">第二个参数：2</span><br><span class="line">第三个参数：3</span><br><span class="line">第四个参数：4</span><br></pre></td></tr></table></figure><h4 id="其它参数相关变量"><a href="#其它参数相关变量" class="headerlink" title="其它参数相关变量"></a>其它参数相关变量</h4><table><thead><tr><th align="left">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left">$#</td><td align="center">代表文件传入的参数个数，如上例中值为4</td></tr><tr><td align="left">$*</td><td align="center">由所有参数构成的用空格隔开的字符串，如上例中值为”$1 $2 $3 $4”</td></tr><tr><td align="left">$@</td><td align="center">每个参数分别用双引号括起来的字符串，如上例中值为”$1” “$2” “$3” “$4”</td></tr><tr><td align="left">$$</td><td align="center">脚本当前运行的进程ID</td></tr><tr><td align="left">$?</td><td align="center">上一条命令的退出状态（注意不是stdout，而是exit code）。0表示正常退出，其他值表示错误</td></tr><tr><td align="left">$(command)</td><td align="center">返回command这条命令的stdout（可嵌套）</td></tr><tr><td align="left"><code>command</code> (前后加&#96;)</td><td align="center">返回command这条命令的stdout（不可嵌套）</td></tr></tbody></table><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。数组下标从0开始。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>数组用小括号表示，元素之间用空格隔开。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yxc)</span><br></pre></td></tr></table></figure><p>也可以直接定义数组中某个元素的值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array[0]=1</span><br><span class="line">array[1]=abc</span><br><span class="line">array[2]=&quot;def&quot;</span><br><span class="line">array[3]=yxc</span><br></pre></td></tr></table></figure><h4 id="读取数组中某个元素的值"><a href="#读取数组中某个元素的值" class="headerlink" title="读取数组中某个元素的值"></a>读取数组中某个元素的值</h4><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;array[index]&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yxc)</span><br><span class="line">echo $&#123;array[0]&#125;</span><br><span class="line">echo $&#123;array[1]&#125;</span><br><span class="line">echo $&#123;array[2]&#125;</span><br><span class="line">echo $&#123;array[3]&#125;</span><br></pre></td></tr></table></figure><p>读取整个数组</p><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;array[@]&#125;  <span class="comment"># 第一种写法</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;array[*]&#125;  <span class="comment"># 第二种写法</span></span></span><br></pre></td></tr></table></figure><h4 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h4><p>类似于字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;<span class="comment">#array[@]&#125;  # 第一种写法</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;<span class="comment">#array[*]&#125;  # 第二种写法</span></span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yxc)</span><br><span class="line"></span><br><span class="line">echo $&#123;#array[@]&#125;  # 第一种写法</span><br><span class="line">echo $&#123;#array[*]&#125;  # 第二种写法</span><br></pre></td></tr></table></figure><h3 id="expr命令"><a href="#expr命令" class="headerlink" title="expr命令"></a>expr命令</h3><p>expr命令用于求表达式的值，格式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr 表达式</span><br></pre></td></tr></table></figure><h4 id="表达式说明"><a href="#表达式说明" class="headerlink" title="表达式说明"></a>表达式说明</h4><ul><li>用空格隔开每一项</li><li>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）</li><li>对包含空格和其他特殊字符的字符串要用引号括起来</li><li>expr会在stdout中输出结果。如果为逻辑关系表达式，则结果为真时，stdout输出1，否则输出0。</li><li>expr的exit code：如果为逻辑关系表达式，则结果为真时，exit code为0，否则为1。</li></ul><h4 id="字符串表达式"><a href="#字符串表达式" class="headerlink" title="字符串表达式"></a>字符串表达式</h4><ul><li><p><code>length STRING</code> 返回STRING的长度</p></li><li><p><code>index STRING CHARSET</code> CHARSET中任意单个字符在 STRING 中最前面的字符位置，下标从1开始。如果在 STRING 中完全不存在 CHARSET 中的字符，则返回0。</p></li><li><p><code>substr STRING POSITION LENGTH</code> 返回 STRING 字符串中从 POSITION 开始，长度最大为 LENGTH 的子串。如果 POSITION 或 LENGTH 为负数，0或非数值，则返回空字符串。</p></li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;Hello World!&quot;</span><br><span class="line"></span><br><span class="line">echo `expr length &quot;$str&quot;`  # ``不是单引号，表示执行该命令，输出12</span><br><span class="line">echo `expr index &quot;$str&quot; aWd`  # 输出7，下标从1开始</span><br><span class="line">echo `expr substr &quot;$str&quot; 2 3`  # 输出 ell</span><br></pre></td></tr></table></figure><h4 id="整数表达式"><a href="#整数表达式" class="headerlink" title="整数表达式"></a>整数表达式</h4><p><code>expr</code> 支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。 </p><ul><li><p><code>+ -</code> 加减运算。两端参数会转换为整数，如果转换失败则报错。</p></li><li><p><code>*</code> <code>/</code> <code>%</code> 乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</p></li><li><p><code>()</code> 可以改变优先级，但需要用反斜杠转义</p></li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">echo `expr $a + $b`  # 输出7</span><br><span class="line">echo `expr $a - $b`  # 输出-1</span><br><span class="line">echo `expr $a \* $b`  # 输出12，*需要转义</span><br><span class="line">echo `expr $a / $b`  # 输出0，整除</span><br><span class="line">echo `expr $a % $b` # 输出3</span><br><span class="line">echo `expr \( $a + 1 \) \* \( $b + 1 \)`  # 输出20，值为(a + 1) * (b + 1)</span><br></pre></td></tr></table></figure><h4 id="逻辑关系表达式"><a href="#逻辑关系表达式" class="headerlink" title="逻辑关系表达式"></a>逻辑关系表达式</h4><ul><li><code>|</code> 如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。</li><li><code>&amp;</code> 如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</li><li><code>&lt; &lt;= = == != &gt;= &gt;</code> 比较两端的参数，如果为true，则返回1，否则返回0。”&#x3D;&#x3D;”是”&#x3D;”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</li><li><code>()</code> 可以改变优先级，但需要用反斜杠转义</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">echo `expr $a \&gt; $b`  # 输出0，&gt;需要转义</span><br><span class="line">echo `expr $a &#x27;&lt;&#x27; $b`  # 输出1，也可以将特殊字符用引号引起来</span><br><span class="line">echo `expr $a &#x27;&gt;=&#x27; $b`  # 输出0</span><br><span class="line">echo `expr $a \&lt;\= $b`  # 输出1</span><br><span class="line"></span><br><span class="line">c=0</span><br><span class="line">d=5</span><br><span class="line"></span><br><span class="line">echo `expr $c \&amp; $d`  # 输出0</span><br><span class="line">echo `expr $a \&amp; $b`  # 输出3</span><br><span class="line">echo `expr $c \| $d`  # 输出5</span><br><span class="line">echo `expr $a \| $b`  # 输出3</span><br></pre></td></tr></table></figure><h3 id="read命令"><a href="#read命令" class="headerlink" title="read命令"></a>read命令</h3><p><code>read</code> 命令用于从标准输入中读取单行数据。当读到文件结束符时，exit code为1，否则为0。</p><p>参数说明</p><ul><li><code>-p</code> ：后面可以接提示信息</li><li><code>-t</code> ：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令</li></ul><p>实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">read</span> name  <span class="comment"># 读入name的值</span></span></span><br><span class="line">acwing yxc  # 标准输入</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出name的值</span></span></span><br><span class="line">acwing yxc  #标准输出</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">read</span> -p <span class="string">&quot;Please input your name: &quot;</span> -t 30 name  <span class="comment"># 读入name的值，等待时间30秒</span></span></span><br><span class="line">Please input your name: acwing yxc  # 标准输入</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出name的值</span></span></span><br><span class="line">acwing yxc  # 标准输出</span><br></pre></td></tr></table></figure><h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><p><code>echo</code> 用于输出字符串。命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo STRING</span><br></pre></td></tr></table></figure><h4 id="显示普通字符串"><a href="#显示普通字符串" class="headerlink" title="显示普通字符串"></a>显示普通字符串</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello AC Terminal&quot;</span><br><span class="line">echo Hello AC Terminal  # 引号可以省略</span><br></pre></td></tr></table></figure><h4 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a>显示转义字符</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello AC Terminal&quot;</span><br><span class="line">echo Hello AC Terminal  # 引号可以省略</span><br></pre></td></tr></table></figure><h4 id="显示转义字符-1"><a href="#显示转义字符-1" class="headerlink" title="显示转义字符"></a>显示转义字符</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;\&quot;Hello AC Terminal\&quot;&quot;  # 注意只能使用双引号，如果使用单引号，则不转义</span><br><span class="line">echo \&quot;Hello AC Terminal\&quot;  # 也可以省略双引号</span><br></pre></td></tr></table></figure><h4 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a>显示变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line">echo &quot;My name is $name&quot;  # 输出 My name is yxc</span><br></pre></td></tr></table></figure><h4 id="显示换行"><a href="#显示换行" class="headerlink" title="显示换行"></a>显示换行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hi\n&quot;  # -e 开启转义</span><br><span class="line">echo &quot;acwing&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hi</span><br><span class="line"></span><br><span class="line">acwing</span><br></pre></td></tr></table></figure><h4 id="显示不换行"><a href="#显示不换行" class="headerlink" title="显示不换行"></a>显示不换行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hi \c&quot; # -e 开启转义 \c 不换行</span><br><span class="line">echo &quot;acwing&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi acwing</span><br></pre></td></tr></table></figure><h4 id="显示结果定向至文件"><a href="#显示结果定向至文件" class="headerlink" title="显示结果定向至文件"></a>显示结果定向至文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello World&quot; &gt; output.txt  # 将内容以覆盖的方式输出到output.txt中</span><br></pre></td></tr></table></figure><h4 id="原样输出字符串，不进行转义或取变量-用单引号"><a href="#原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="原样输出字符串，不进行转义或取变量(用单引号)"></a>原样输出字符串，不进行转义或取变量(用单引号)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=acwing</span><br><span class="line">echo &#x27;$name\&quot;&#x27;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">name\&quot;</span></span><br></pre></td></tr></table></figure><h4 id="显示命令的执行结果"><a href="#显示命令的执行结果" class="headerlink" title="显示命令的执行结果"></a>显示命令的执行结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo `date`</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Wed Sep 1 11:45:33 CST 2021</span><br></pre></td></tr></table></figure><h3 id="printf命令"><a href="#printf命令" class="headerlink" title="printf命令"></a>printf命令</h3><p><code>printf</code> 命令用于格式化输出，类似于C&#x2F;C++中的printf函数。</p><p>默认不会在字符串末尾添加换行符。</p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf format-string [arguments...]</span><br></pre></td></tr></table></figure><h4 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h4><p>脚本内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%10d.\n&quot; 123  # 占10位，右对齐</span><br><span class="line">printf &quot;%-10.2f.\n&quot; 123.123321  # 占10位，保留2位小数，左对齐</span><br><span class="line">printf &quot;My name is %s\n&quot; &quot;yxc&quot;  # 格式化输出字符串</span><br><span class="line">printf &quot;%d * %d = %d\n&quot;  2 3 `expr 2 \* 3` # 表达式的值作为参数</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       123.</span><br><span class="line">123.12    .</span><br><span class="line">My name is yxc</span><br><span class="line">2 * 3 = 6</span><br></pre></td></tr></table></figure><h3 id="test命令与判断符号"><a href="#test命令与判断符号" class="headerlink" title="test命令与判断符号[]"></a>test命令与判断符号[]</h3><h4 id="逻辑运算符-和"><a href="#逻辑运算符-和" class="headerlink" title="逻辑运算符&amp;&amp;和||"></a>逻辑运算符&amp;&amp;和||</h4><ul><li>&amp;&amp; 表示与，|| 表示或</li><li>二者具有短路原则：</li></ul><p>​expr1 &amp;&amp; expr2：当expr1为假时，直接忽略expr2<br>​expr1 || expr2：当expr1为真时，直接忽略expr2</p><ul><li>表达式的exit code为0，表示真；为非零，表示假。（与C&#x2F;C++中的定义相反）</li></ul><h4 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h4><p>在命令行中输入man test，可以查看test命令的用法。</p><p>test命令用于判断文件类型，以及对变量做比较。</p><p>test命令用exit code返回结果，而不是使用stdout。0表示真，非0表示假。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test 2 -lt 3  # 为真，返回值为0</span><br><span class="line">echo $?  # 输出上个命令的返回值，输出0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">ls</span>  <span class="comment"># 列出当前目录下的所有文件</span></span></span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">test</span> -e test.sh &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span></span><br><span class="line">exist  # test.sh 文件存在</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">test</span> -e test2.sh &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span></span><br><span class="line">Not exist  # testh2.sh 文件不存在</span><br></pre></td></tr></table></figure><h4 id="文件类型判断"><a href="#文件类型判断" class="headerlink" title="文件类型判断"></a>文件类型判断</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test -e filename  # 判断文件是否存在</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">测试参数</th><th align="center">代表意义</th></tr></thead><tbody><tr><td align="center">-e</td><td align="center">文件是否存在</td></tr><tr><td align="center">-f</td><td align="center">是否为文件</td></tr><tr><td align="center">-d</td><td align="center">是否为目录</td></tr></tbody></table><h4 id="文件权限判断"><a href="#文件权限判断" class="headerlink" title="文件权限判断"></a>文件权限判断</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test -r filename  # 判断文件是否可读</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">测试参数</th><th align="center">代表意义</th></tr></thead><tbody><tr><td align="center">-eq</td><td align="center">a是否等于b</td></tr><tr><td align="center">-ne</td><td align="center">a是否不等于b</td></tr><tr><td align="center">-gt</td><td align="center">a是否大于b</td></tr><tr><td align="center">-lt</td><td align="center">a是否小于b</td></tr><tr><td align="center">-ge</td><td align="center">a是否大于等于b</td></tr><tr><td align="center">-le</td><td align="center">a是否小于等于b</td></tr></tbody></table><h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><table><thead><tr><th align="center">测试参数</th><th align="center">代表意义</th></tr></thead><tbody><tr><td align="center">test -z STRING</td><td align="center">判断STRING是否为空，如果为空，则返回true</td></tr><tr><td align="center">test -n STRING</td><td align="center">判断STRING是否非空，如果非空，则返回true（-n可以省略）</td></tr><tr><td align="center">test str1 &#x3D;&#x3D; str2</td><td align="center">判断str1是否等于str2</td></tr><tr><td align="center">test str1 !&#x3D; str2</td><td align="center">判断str1是否不等于str2</td></tr></tbody></table><h4 id="多重条件判定"><a href="#多重条件判定" class="headerlink" title="多重条件判定"></a>多重条件判定</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test -r filename -a -x filename</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">测试参数</th><th align="center">代表意义</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">两条件是否同时成立</td></tr><tr><td align="center">-o</td><td align="center">两条件是否至少一个成立</td></tr><tr><td align="center">!</td><td align="center">取反。如 test ! -x file，当file不可执行时，返回true</td></tr></tbody></table><h4 id="判断符号"><a href="#判断符号" class="headerlink" title="判断符号[]"></a>判断符号[]</h4><p>[]与test用法几乎一模一样，更常用于if语句中。另外[[]]是[]的加强版，支持的特性更多。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ 2 -lt 3 ]  # 为真，返回值为0</span><br><span class="line">echo $?  # 输出上个命令的返回值，输出0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">ls</span>  <span class="comment"># 列出当前目录下的所有文件</span></span></span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">[ -e test.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span></span><br><span class="line">exist  # test.sh 文件存在</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">[ -e test2.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span></span><br><span class="line">Not exist  # testh2.sh 文件不存在</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>[]内的每一项都要用空格隔开</li><li>中括号内的变量，最好用双引号括起来</li><li>中括号内的常数，最好用单或双引号括起来</li></ul><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;acwing yxc&quot;</span><br><span class="line">[ $name == &quot;acwing yxc&quot; ]  # 错误，等价于 [ acwing yxc == &quot;acwing yxc&quot; ]，参数太多</span><br><span class="line">[ &quot;$name&quot; == &quot;acwing yxc&quot; ]  # 正确</span><br></pre></td></tr></table></figure><h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><h4 id="if…then形式"><a href="#if…then形式" class="headerlink" title="if…then形式"></a>if…then形式</h4><p>类似于C&#x2F;C++中的if-else语句。</p><h4 id="单层if"><a href="#单层if" class="headerlink" title="单层if"></a>单层if</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">if [ &quot;$a&quot; -lt &quot;$b&quot; ] &amp;&amp; [ &quot;$a&quot; -gt 2 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;在范围内</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3在范围内</span><br></pre></td></tr></table></figure><h4 id="单层if-else"><a href="#单层if-else" class="headerlink" title="单层if-else"></a>单层if-else</h4><p>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">else</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">if ! [ &quot;$a&quot; -lt &quot;$b&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;不小于$&#123;b&#125;</span><br><span class="line">else</span><br><span class="line">    echo $&#123;a&#125;小于$&#123;b&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3小于4</span><br></pre></td></tr></table></figure><h4 id="多层if-elif-elif-else"><a href="#多层if-elif-elif-else" class="headerlink" title="多层if-elif-elif-else"></a>多层if-elif-elif-else</h4><p>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">elif condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">elif condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">else</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line">if [ $a -eq 1 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;等于1</span><br><span class="line">elif [ $a -eq 2 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;等于2</span><br><span class="line">elif [ $a -eq 3 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;等于3</span><br><span class="line">else</span><br><span class="line">    echo 其他</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其他</span><br></pre></td></tr></table></figure><h4 id="case…esac形式"><a href="#case…esac形式" class="headerlink" title="case…esac形式"></a>case…esac形式</h4><p>类似于C&#x2F;C++中的switch语句。</p><p>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">case $变量名称 in</span><br><span class="line">    值1)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;  # 类似于C/C++中的break</span><br><span class="line">    值2)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">    *)  # 类似于C/C++中的default</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line">case $a in</span><br><span class="line">    1)</span><br><span class="line">        echo $&#123;a&#125;等于1</span><br><span class="line">        ;;  </span><br><span class="line">    2)</span><br><span class="line">        echo $&#123;a&#125;等于2</span><br><span class="line">        ;;  </span><br><span class="line">    3)                                                </span><br><span class="line">        echo $&#123;a&#125;等于3</span><br><span class="line">        ;;  </span><br><span class="line">    *)</span><br><span class="line">        echo 其他</span><br><span class="line">        ;;  </span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其他</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="for…in…do…done"><a href="#for…in…do…done" class="headerlink" title="for…in…do…done"></a>for…in…do…done</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for var in val1 val2 val3</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例1，输出a 2 cc，每个元素一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in a 2 cc</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例2，输出当前路径下的所有文件名，每个文件名一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for file in `ls`</span><br><span class="line">do</span><br><span class="line">    echo $file</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例3，输出1-10</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in $(seq 1 10)</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例4，使用{1..10} 或者 {a..z}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;a..z&#125;</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="for-…-…-…-do…done"><a href="#for-…-…-…-do…done" class="headerlink" title="for ((…;…;…)) do…done"></a>for ((…;…;…)) do…done</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for ((expression; condition; expression))</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，输出1-10，每个数占一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for ((i=1; i&lt;=10; i++))</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done0</span><br></pre></td></tr></table></figure><h4 id="while…do…done循环"><a href="#while…do…done循环" class="headerlink" title="while…do…done循环"></a>while…do…done循环</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，文件结束符为Ctrl+d，输入文件结束符后read指令返回false。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while read name</span><br><span class="line">do</span><br><span class="line">    echo $name</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="until…do…done循环"><a href="#until…do…done循环" class="headerlink" title="until…do…done循环"></a>until…do…done循环</h4><p>当条件为真时结束。</p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，当用户输入yes或者YES时结束，否则一直等待读入。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ &quot;$&#123;word&#125;&quot; == &quot;yes&quot; ] || [ &quot;$&#123;word&#125;&quot; == &quot;YES&quot; ]</span><br><span class="line">do</span><br><span class="line">    read -p &quot;Please input yes/YES to stop this program: &quot; word</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="break命令"><a href="#break命令" class="headerlink" title="break命令"></a>break命令</h4><p>跳出当前一层循环，注意与C&#x2F;C++不同的是：break不能跳出case语句。</p><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">while read name</span><br><span class="line">do</span><br><span class="line">    for ((i=1;i&lt;=10;i++))</span><br><span class="line">    do</span><br><span class="line">        case $i in</span><br><span class="line">            8)</span><br><span class="line">                break</span><br><span class="line">                ;;</span><br><span class="line">            *)</span><br><span class="line">                echo $i</span><br><span class="line">                ;;</span><br><span class="line">        esac</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>该示例每读入非EOF的字符串，会输出一遍1-7。<br>该程序可以输入Ctrl+d文件结束符来结束，也可以直接用Ctrl+c杀掉该进程。</p><h4 id="continue命令"><a href="#continue命令" class="headerlink" title="continue命令"></a>continue命令</h4><p>跳出当前循环。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for ((i=1;i&lt;=10;i++))</span><br><span class="line">do</span><br><span class="line">    if [ `expr $i % 2` -eq 0 ]</span><br><span class="line">    then</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>该程序输出1-10中的所有奇数。</p><h4 id="死循环的处理方式"><a href="#死循环的处理方式" class="headerlink" title="死循环的处理方式"></a>死循环的处理方式</h4><p>如果AC Terminal可以打开该程序，则输入Ctrl+c即可。</p><p>否则可以直接关闭进程：</p><ol><li>使用top命令找到进程的PID</li><li>输入kill -9 PID即可关掉此进程</li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>bash中的函数类似于C&#x2F;C++中的函数，但return的返回值与C&#x2F;C++不同，返回的是exit code，取值为0-255，0表示正常结束。</p><p>如果想获取函数的输出结果，可以通过echo输出到stdout中，然后通过$(function_name)来获取stdout中的结果。</p><p>函数的return值可以通过$?来获取。</p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[function] func_name() &#123;  # function关键字可以省略</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不获取-return值和stdout值"><a href="#不获取-return值和stdout值" class="headerlink" title="不获取 return值和stdout值"></a>不获取 return值和stdout值</h4><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;</span><br><span class="line">    name=yxc</span><br><span class="line">    echo &quot;Hello $name&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello yxc</span><br></pre></td></tr></table></figure><h4 id="获取-return值和stdout值"><a href="#获取-return值和stdout值" class="headerlink" title="获取 return值和stdout值"></a>获取 return值和stdout值</h4><p>不写return时，默认return 0。</p><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;</span><br><span class="line">    name=yxc</span><br><span class="line">    echo &quot;Hello $name&quot;</span><br><span class="line"></span><br><span class="line">    return 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output=$(func)</span><br><span class="line">ret=$?</span><br><span class="line"></span><br><span class="line">echo &quot;output = $output&quot;</span><br><span class="line">echo &quot;return = $ret&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output = Hello yxc</span><br><span class="line">return = 123</span><br></pre></td></tr></table></figure><h4 id="函数的输入参数"><a href="#函数的输入参数" class="headerlink" title="函数的输入参数"></a>函数的输入参数</h4><p>在函数内，$1表示第一个输入参数，$2表示第二个输入参数，依此类推。</p><p>注意：函数内的$0仍然是文件名，而不是函数名。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;  # 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span><br><span class="line">    word=&quot;&quot;</span><br><span class="line">    while [ &quot;$&#123;word&#125;&quot; != &#x27;y&#x27; ] &amp;&amp; [ &quot;$&#123;word&#125;&quot; != &#x27;n&#x27; ]</span><br><span class="line">    do</span><br><span class="line">        read -p &quot;要进入func($1)函数吗？请输入y/n：&quot; word</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    if [ &quot;$word&quot; == &#x27;n&#x27; ]</span><br><span class="line">    then</span><br><span class="line">        echo 0</span><br><span class="line">        return 0</span><br><span class="line">    fi  </span><br><span class="line"></span><br><span class="line">    if [ $1 -le 0 ] </span><br><span class="line">    then</span><br><span class="line">        echo 0</span><br><span class="line">        return 0</span><br><span class="line">    fi  </span><br><span class="line"></span><br><span class="line">    sum=$(func $(expr $1 - 1))</span><br><span class="line">    echo $(expr $sum + $1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo $(func 10)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">55</span><br></pre></td></tr></table></figure><h4 id="函数内的局部变量"><a href="#函数内的局部变量" class="headerlink" title="函数内的局部变量"></a>函数内的局部变量</h4><p>可以在函数内定义局部变量，作用范围仅在当前函数内。</p><p>可以在递归函数中定义局部变量。</p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local 变量名=变量值</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">func() &#123;</span><br><span class="line">    local name=yxc</span><br><span class="line">    echo $name</span><br><span class="line">&#125;</span><br><span class="line">func</span><br><span class="line"></span><br><span class="line">echo $name</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yxc</span><br></pre></td></tr></table></figure><p>第一行为函数内的name变量，第二行为函数外调用name变量，会发现此时该变量不存在。</p><h3 id="exit命令"><a href="#exit命令" class="headerlink" title="exit命令"></a>exit命令</h3><p>exit命令用来退出当前shell进程，并返回一个退出状态；使用$?可以接收这个退出状态。</p><p>exit命令可以接受一个整数值作为参数，代表退出状态。如果不指定，默认状态值是 0。</p><p>exit退出状态只能是一个介于 0~255 之间的整数，其中只有 0 表示成功，其它值都表示失败。</p><p>示例：</p><p>创建脚本test.sh，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ $# -ne 1 ]  # 如果传入参数个数等于1，则正常退出；否则非正常退出。</span><br><span class="line">then</span><br><span class="line">    echo &quot;arguments not valid&quot;</span><br><span class="line">    exit 1</span><br><span class="line">else</span><br><span class="line">    echo &quot;arguments valid&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行该脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">chmod</span> +x test.sh</span> </span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">./test.sh acwing</span></span><br><span class="line">arguments valid</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">echo</span> $?  <span class="comment"># 传入一个参数，则正常退出，exit code为0</span></span></span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">./test.sh</span> </span><br><span class="line">arguments not valid</span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">echo</span> $?  <span class="comment"># 传入参数个数不是1，则非正常退出，exit code为1</span></span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="文件重定向"><a href="#文件重定向" class="headerlink" title="文件重定向"></a>文件重定向</h3><p>每个进程默认打开3个文件描述符：</p><ul><li><code>stdin</code> 标准输入，从命令行读取数据，文件描述符为0</li><li><code>stdout</code> 标准输出，向命令行输出数据，文件描述符为1</li><li><code>stderr</code> 标准错误输出，向命令行输出数据，文件描述符为2</li></ul><p>可以用文件重定向将这三个文件重定向到其他文件中。</p><h4 id="重定向命令列表"><a href="#重定向命令列表" class="headerlink" title="重定向命令列表"></a>重定向命令列表</h4><table><thead><tr><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">command &gt; file</td><td align="center">将stdout重定向到file中</td></tr><tr><td align="center">command &lt; file</td><td align="center">将stdin重定向到file中</td></tr><tr><td align="center">command &gt;&gt; file</td><td align="center">将stdout以追加方式重定向到file中</td></tr><tr><td align="center">command n&gt; file</td><td align="center">将文件描述符n重定向到file中</td></tr><tr><td align="center">command n&gt;&gt; file</td><td align="center">将文件描述符n以追加方式重定向到file中</td></tr></tbody></table><h4 id="输入和输出重定向"><a href="#输入和输出重定向" class="headerlink" title="输入和输出重定向"></a>输入和输出重定向</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hello \c&quot; &gt; output.txt  # 将stdout重定向到output.txt中</span><br><span class="line">echo &quot;World&quot; &gt;&gt; output.txt  # 将字符串追加到output.txt中</span><br><span class="line"></span><br><span class="line">read str &lt; output.txt  # 从output.txt中读取字符串</span><br><span class="line"></span><br><span class="line">echo $str  # 输出结果：Hello World</span><br></pre></td></tr></table></figure><h4 id="同时重定向stdin和stdout"><a href="#同时重定向stdin和stdout" class="headerlink" title="同时重定向stdin和stdout"></a>同时重定向stdin和stdout</h4><p>创建bash脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">read a</span><br><span class="line">read b</span><br><span class="line"></span><br><span class="line">echo $(expr &quot;$a&quot; + &quot;$b&quot;)</span><br></pre></td></tr></table></figure><p>创建input.txt，里面的内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">chmod</span> +x test.sh  <span class="comment"># 添加可执行权限</span></span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">./test.sh &lt; input.txt &gt; output.txt  <span class="comment"># 从input.txt中读取内容，将输出写入output.txt中</span></span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">cat</span> output.txt  <span class="comment"># 查看output.txt中的内容</span></span></span><br><span class="line">7</span><br></pre></td></tr></table></figure><h3 id="引入外部脚本"><a href="#引入外部脚本" class="headerlink" title="引入外部脚本"></a>引入外部脚本</h3><p>类似于C&#x2F;C++中的include操作，bash也可以引入其他文件中的代码。</p><p>语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">. filename  # 注意点和文件名之间有一个空格</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">source filename</span><br></pre></td></tr></table></figure><p>示例</p><p>创建test1.sh，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">name=yxc  # 定义变量name</span><br></pre></td></tr></table></figure><p>然后创建test2.sh，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">source test1.sh # 或 . test1.sh</span><br><span class="line"></span><br><span class="line">echo My name is: $name  # 可以使用test1.sh中的变量</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">chmod</span> +x test2.sh</span> </span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">./test2.sh</span> </span><br><span class="line">My name is: yxc</span><br></pre></td></tr></table></figure><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><h3 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h3><p>安装ssh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ssh</span><br></pre></td></tr></table></figure><p>启动 ssh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd start</span><br></pre></td></tr></table></figure><p>查看ssh服务状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service sshd status</span><br></pre></td></tr></table></figure><p>安装ssh服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install sshd</span><br></pre></td></tr></table></figure><p>开启ssh服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service sshd </span><br></pre></td></tr></table></figure><p>检验服务是否启动成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure><p>远程登录服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname</span><br></pre></td></tr></table></figure><ul><li><code>user</code> ：用户名</li><li><code>hostname</code> ：IP地址或域名</li></ul><p>第一次登录时会提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#x27;123.57.47.211 (123.57.47.211)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:iy237yysfCe013/l+kpDGfEG9xxHxm0dnxnAbJTPpG8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span><br></pre></td></tr></table></figure><p>输入yes，然后回车即可。</p><p>这样会将该服务器的信息记录在 ~&#x2F;.ssh&#x2F;known_hosts 文件中。</p><p>然后输入密码即可登录到远程服务器中。</p><hr><p>默认登录端口号为22。如果想登录某一特定端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname -p 22</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>创建文件 ~&#x2F;.ssh&#x2F;config</p><p>然后在文件中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host myserver1</span><br><span class="line">    HostName IP地址或域名</span><br><span class="line">    User 用户名</span><br><span class="line"></span><br><span class="line">Host myserver2</span><br><span class="line">    HostName IP地址或域名</span><br><span class="line">    User 用户名</span><br></pre></td></tr></table></figure><p>之后再使用服务器时，可以直接使用别名myserver1、myserver2。</p><h4 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h4><p>创建密钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>然后一直回车即可。</p><p>执行结束后，~&#x2F;.ssh&#x2F;目录下会多两个文件：</p><ul><li><code>id_rsa</code> ：私钥</li><li><code>id_rsa.pub</code> ：公钥</li></ul><p>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</p><p>例如，想免密登录myserver服务器。则将公钥中的内容，复制到myserver中的~&#x2F;.ssh&#x2F;authorized_keys文件里即可。</p><p>也可以使用如下命令一键添加公钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id myserver</span><br></pre></td></tr></table></figure><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname command</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname ls -a</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单引号中的<span class="variable">$i</span>可以求值</span></span><br><span class="line">ssh myserver &#x27;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&#x27;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">双引号中的<span class="variable">$i</span>不可以求值</span></span><br><span class="line">ssh myserver &quot;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&quot;</span><br></pre></td></tr></table></figure><h3 id="scp传文件"><a href="#scp传文件" class="headerlink" title="scp传文件"></a>scp传文件</h3><p>基本用法</p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp source destination</span><br></pre></td></tr></table></figure><p>将source路径下的文件复制到destination中</p><p>一次复制多个文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp source1 source2 destination</span><br></pre></td></tr></table></figure><p>复制文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/tmp myserver:/home/acs/</span><br></pre></td></tr></table></figure><p>将本地家目录中的tmp文件夹复制到myserver服务器中的&#x2F;home&#x2F;acs&#x2F;目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/tmp myserver:homework/</span><br></pre></td></tr></table></figure><p>将本地家目录中的tmp文件夹复制到myserver服务器中的~&#x2F;homework&#x2F;目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r myserver:homework .</span><br></pre></td></tr></table></figure><p>将myserver服务器中的~&#x2F;homework&#x2F;文件夹复制到本地的当前路径下。</p><hr><p>指定服务器的端口号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 22 source1 source2 destination</span><br></pre></td></tr></table></figure><p>注意： scp的-r -P等参数尽量加在source和destination之前。</p><h4 id="使用scp配置其他服务器的vim和tmux"><a href="#使用scp配置其他服务器的vim和tmux" class="headerlink" title="使用scp配置其他服务器的vim和tmux"></a>使用scp配置其他服务器的vim和tmux</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.vimrc ~/.tmux.conf myserver:</span><br></pre></td></tr></table></figure><h2 id="thrift"><a href="#thrift" class="headerlink" title="thrift"></a>thrift</h2><h2 id="管道、环境变量与常用命令"><a href="#管道、环境变量与常用命令" class="headerlink" title="管道、环境变量与常用命令"></a>管道、环境变量与常用命令</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>管道类似于文件重定向，可以将前一个命令的stdout重定向到下一个命令的stdin。</p><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul><li>管道命令仅处理stdout，会忽略stderr。</li><li>管道右边的命令必须能接受stdin。</li><li>多个管道命令可以串联。</li></ul><h3 id="与文件重定向的区别"><a href="#与文件重定向的区别" class="headerlink" title="与文件重定向的区别"></a>与文件重定向的区别</h3><ul><li>文件重定向左边为命令，右边为文件。</li><li>管道左右两边均为命令，左边有stdout，右边有stdin。</li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>统计当前目录下所有python文件的总行数，其中find、xargs、wc等命令可以参考常用命令这一节内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &#x27;*.py&#x27; | xargs cat | wc -l</span><br></pre></td></tr></table></figure><h2 id="租云服务器及配环境"><a href="#租云服务器及配环境" class="headerlink" title="租云服务器及配环境"></a>租云服务器及配环境</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="云平台的作用"><a href="#云平台的作用" class="headerlink" title="云平台的作用:"></a>云平台的作用:</h4><ul><li>存放我们的docker容器，让计算跑在云端。</li><li>获得公网IP地址，让每个人可以访问到我们的服务。</li></ul><h4 id="任选一个云平台即可，推荐配置："><a href="#任选一个云平台即可，推荐配置：" class="headerlink" title="任选一个云平台即可，推荐配置："></a>任选一个云平台即可，推荐配置：</h4><ul><li>1核 2GB（后期可以动态扩容，前期配置低一些没关系）</li><li>网络带宽采用按量付费，最大带宽拉满即可（费用取决于用量，与最大带宽无关）</li><li>系统版本：ubuntu 20.04 LTS（推荐用统一版本，避免后期出现配置不兼容的问题）</li></ul><h3 id="租云服务器及安装docker"><a href="#租云服务器及安装docker" class="headerlink" title="租云服务器及安装docker"></a>租云服务器及安装docker</h3><h4 id="阿里腾讯华为云"><a href="#阿里腾讯华为云" class="headerlink" title="阿里腾讯华为云"></a>阿里腾讯华为云</h4><h5 id="创建工作用户acs并赋予sudo权限"><a href="#创建工作用户acs并赋予sudo权限" class="headerlink" title="创建工作用户acs并赋予sudo权限"></a>创建工作用户acs并赋予sudo权限</h5><p>登录到新服务器。打开AC Terminal，然后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@xxx.xxx.xxx.xxx  # xxx.xxx.xxx.xxx替换成新服务器的公网IP</span><br></pre></td></tr></table></figure><p>创建acs用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser acs  # 创建用户acs</span><br><span class="line">usermod -aG sudo acs  # 给用户acs分配sudo权限（sudo）</span><br></pre></td></tr></table></figure><h5 id="配置免密登录方式"><a href="#配置免密登录方式" class="headerlink" title="配置免密登录方式"></a>配置免密登录方式</h5><p>退回AC Terminal，然后配置acs用户的别名和免密登录。</p><h5 id="配置新服务器的工作环境"><a href="#配置新服务器的工作环境" class="headerlink" title="配置新服务器的工作环境"></a>配置新服务器的工作环境</h5><p>将AC Terminal的配置传到新服务器上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp .bashrc .vimrc .tmux.conf server_name:  # server_name需要换成自己配置的别名</span><br></pre></td></tr></table></figure><h5 id="安装tmux和docker"><a href="#安装tmux和docker" class="headerlink" title="安装tmux和docker"></a>安装tmux和docker</h5><p>登录自己的服务器，然后安装tmux：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install tmux</span><br></pre></td></tr></table></figure><p>打开tmux。（养成好习惯，所有工作都在tmux里进行，防止意外关闭终端后，工作进度丢失）</p><p>然后在tmux中根据docker安装教程安装docker即可。</p><h3 id="docker教程"><a href="#docker教程" class="headerlink" title="docker教程"></a>docker教程</h3><h4 id="将当前用户添加到docker用户组"><a href="#将当前用户添加到docker用户组" class="headerlink" title="将当前用户添加到docker用户组"></a>将当前用户添加到docker用户组</h4><p>为了避免每次使用docker命令都需要加上sudo权限，可以将当前用户加入安装中自动创建的docker用户组(可以参考官方文档)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>执行完此操作后，需要退出服务器，再重新登录回来，才可以省去sudo权限。</p><h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">docker run hello-world # test success or not (hello from Docker!)</span><br><span class="line">docker version</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><h4 id="镜像（images）"><a href="#镜像（images）" class="headerlink" title="镜像（images）"></a>镜像（images）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker search [image]</span><br><span class="line">docker pull [image](:[tag])</span><br><span class="line">docker rmi -f [image_name | image_id]</span><br></pre></td></tr></table></figure><h4 id="镜像（images）-1"><a href="#镜像（images）-1" class="headerlink" title="镜像（images）"></a>镜像（images）</h4><ol><li>docker [container] commit CONTAINER IMAGE_NAME:TAG：创建某个container的镜像</li><li>docker save -o ubuntu_20_04.tar ubuntu:20.04：将镜像ubuntu:20.04导出到本地文件ubuntu_20_04.tar中</li><li>docker load -i ubuntu_20_04.tar：将镜像ubuntu:20.04从本地文件ubuntu_20_04.tar中加载出来</li></ol><h4 id="容器-container"><a href="#容器-container" class="headerlink" title="容器(container)"></a>容器(container)</h4><p>注意：有了镜像才能创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] [image] [src(/bin/bash)]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span> </span><br><span class="line">--name=&quot;&quot;</span><br><span class="line">-d后台运行</span><br><span class="line">-it使用交互方式运行，进入容器查看内容</span><br><span class="line">-P指定容器端口 -p 主机端口:容器端口</span><br><span class="line">-p随机指定端口</span><br><span class="line">exit # 直接退出容器</span><br><span class="line">ctrl + p + q # 容器后台运行</span><br><span class="line">docker rm [容器id] # 删除指定容器</span><br><span class="line">docker rm -f $(docker ps -aq) # 删除所有容器</span><br><span class="line">docker ps -a -q|xargs docker rm # 删除所有容器</span><br><span class="line">docker start [容器id] # 启动容器</span><br><span class="line">docker restart</span><br><span class="line">docker stop</span><br><span class="line">docker kill</span><br><span class="line">docker logs -f -t --tail [num] [容器id]</span><br><span class="line">-tf # 显示日志</span><br><span class="line">--tail # 要显示的日志条数</span><br><span class="line">docker inspect [容器id] # 查看容器元数据</span><br><span class="line">docker exec -it [容器id] [src] # 进入容器(开启新终端)</span><br><span class="line">docker attach [容器id] [src] # 进入容器(进入正在执行的终端)</span><br><span class="line">docker cp [容器id]:[容器路径] [目标]</span><br></pre></td></tr></table></figure><h4 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h4><blockquote><p>方式一：直接使用命令来挂载 -v</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器目录</span><br></pre></td></tr></table></figure><h4 id="实战：安装MySQL"><a href="#实战：安装MySQL" class="headerlink" title="实战：安装MySQL"></a>实战：安装MySQL</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7 # 获取镜像</span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:5.7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行容器</span></span><br><span class="line">-v 卷挂载</span><br><span class="line">-e 环境配置</span><br><span class="line">--name 容器名字</span><br><span class="line">docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br></pre></td></tr></table></figure><ol><li>docker [container] create -it ubuntu:20.04：利用镜像ubuntu:20.04创建一个容器。</li><li>docker ps -a：查看本地的所有容器</li><li>docker [container] start CONTAINER：启动容器</li><li>docker [container] stop CONTAINER：停止容器</li><li>docker [container] restart CONTAINER：重启容器</li><li>docker [contaienr] run -itd ubuntu:20.04：创建并启动一个容器</li><li>docker [container] attach CONTAINER：进入容器<ul><li>先按Ctrl-p，再按Ctrl-q可以挂起容器</li></ul></li><li>docker [container] exec CONTAINER COMMAND：在容器中执行命令</li><li>docker [container] rm CONTAINER：删除容器</li><li>docker container prune：删除所有已停止的容器</li><li>docker export -o xxx.tar CONTAINER：将容器CONTAINER导出到本地文件xxx.tar中</li><li>docker import xxx.tar image_name:tag：将本地文件xxx.tar导入成镜像，并将镜像命名为image_name:tag</li><li>docker export&#x2F;import与docker save&#x2F;load的区别：<ul><li>export&#x2F;import会丢弃历史记录和元数据信息，仅保存容器当时的快照状态</li><li>save&#x2F;load会保存完整记录，体积更大</li></ul></li><li>docker top CONTAINER：查看某个容器内的所有进程</li><li>docker stats：查看所有容器的统计信息，包括CPU、内存、存储、网络等信息</li><li>docker cp xxx CONTAINER:xxx 或 docker cp CONTAINER:xxx xxx：在本地和容器间复制文件</li><li>docker rename CONTAINER1 CONTAINER2：重命名容器</li><li>docker update CONTAINER –memory 500MB：修改容器限制</li></ol><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><p>进入AC Terminal，然后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scp /var/lib/acwing/docker/images/docker_lesson_1_0.tar server_name:  # 将镜像上传到自己租的云端服务器</span><br><span class="line">ssh server_name  # 登录自己的云端服务器</span><br><span class="line"></span><br><span class="line">docker load -i docker_lesson_1_0.tar  # 将镜像加载到本地</span><br><span class="line">docker run -p 20000:22 --name my_docker_server -itd docker_lesson:1.0  # 创建并运行docker_lesson:1.0镜像</span><br><span class="line"></span><br><span class="line">docker attach my_docker_server  # 进入创建的docker容器</span><br><span class="line">passwd  # 设置root密码</span><br></pre></td></tr></table></figure><p>去云平台控制台中修改安全组配置，放行端口20000。</p><p>返回AC Terminal，即可通过ssh登录自己的docker容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@xxx.xxx.xxx.xxx -p 20000  # 将xxx.xxx.xxx.xxx替换成自己租的服务器的IP地址</span><br></pre></td></tr></table></figure><p>创建工作账户acs。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql基础命令</title>
      <link href="/2023/01/10/mysql%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/01/10/mysql%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-基础"><a href="#MySQL-基础" class="headerlink" title="MySQL 基础"></a>MySQL 基础</h1><p>以管理员身份打开命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net start mysql80 // 启动服务</span><br><span class="line">net stop mysql80 // 停止服务</span><br></pre></td></tr></table></figure><h2 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h2><blockquote><p>方式一：MySQL提供的命令行工具</p></blockquote><p>例：MySQL 8.0 Command Line Client</p><blockquote><p>方式二：系统自带命令行工具</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql [-h 127.0.0.1] [-p 3306] -u root -p</span><br><span class="line">-h# MySQL服务所在主机ip</span><br><span class="line">-p# MySQL服务端口号，默认3306</span><br><span class="line">-u# MySQL数据库用户名</span><br><span class="line">-P# MySQL密码</span><br></pre></td></tr></table></figure><p style="color: #F56C6C;">注意：使用此方式进行连接需配置PATH环境</p><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><p>SQL语句，根据其功能，主要分为四类：<code>DDL</code>、<code>DML</code>、<code>DQL</code>、<code>DCL</code>。</p><table><thead><tr><th align="center">分类</th><th align="center">全称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">DDL</td><td align="center">Data Definition Language</td><td align="center">数据定义语言，用来定义数据库对象(数据库，表， 字段)</td></tr><tr><td align="center">DML</td><td align="center">Data Manipulation Language</td><td align="center">数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td align="center">DQL</td><td align="center">Data Query Language</td><td align="center">数据查询语言，用来查询数据库中表的记录</td></tr><tr><td align="center">DCL</td><td align="center">Data Control Language</td><td align="center">数据控制语言，用来创建数据库用户、控制数据库的 访问权限</td></tr></tbody></table><h3 id="DDL-数据库操作"><a href="#DDL-数据库操作" class="headerlink" title="DDL-数据库操作"></a>DDL-数据库操作</h3><p>Data Definition Language，数据定义语言，用来定义数据库对象(数据库，表，字段) 。</p><blockquote><p><strong>查询</strong></p></blockquote><p>查询所有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>查询当前数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE()</span><br></pre></td></tr></table></figure><blockquote><p><strong>创建</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 数据库名 [<span class="keyword">DEFAULT</span> CHARSET 字符集] [<span class="keyword">COLLATE</span> 排序规则];</span><br></pre></td></tr></table></figure><blockquote><p><strong>删除</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p><strong>切换</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><p>查询当前库所有表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p>查看某表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure><p>查询某表的建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><p>创建表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 类型 [comment 字段<span class="number">1</span>注释],</span><br><span class="line">字段<span class="number">2</span> 类型 [comment 字段<span class="number">2</span>注释]</span><br><span class="line">)[comment 表注释];</span><br></pre></td></tr></table></figure><p>修改表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 类型 [comment 注释] [约束];</span><br></pre></td></tr></table></figure><p>修改数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 字段名 新数据类型;</span><br></pre></td></tr></table></figure><p>修改字段名和字段类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧字段名 新字段名 类型 [comment 注释] [约束];</span><br></pre></td></tr></table></figure><p>删除字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br></pre></td></tr></table></figure><p>修改表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 rename <span class="keyword">to</span> 新表名;</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [if <span class="keyword">exists</span>] 表名;</span><br></pre></td></tr></table></figure><p>重置表（删除重创）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型。</p><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">有符号范围</th><th align="center">无符号范围</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">TINYINT</td><td align="center">1byte</td><td align="center">（-128，127）</td><td align="center">（0，255）</td><td align="center">小整数值</td></tr><tr><td align="center">SMALLINT</td><td align="center">2bytes</td><td align="center">(-32768，32767)</td><td align="center">(0，65535)</td><td align="center">大整数值</td></tr><tr><td align="center">MEDIUMINT</td><td align="center">3bytes</td><td align="center">(-8388608，8388607)</td><td align="center">(0，16777215)</td><td align="center">大整数值</td></tr><tr><td align="center">INT&#x2F;INTEGER</td><td align="center">4bytes</td><td align="center">(-2147483648， 2147483647)</td><td align="center">(0，4294967295)</td><td align="center">大整数值</td></tr><tr><td align="center">BIGINT</td><td align="center">8bytes</td><td align="center">(-2^63，2^63-1)</td><td align="center">(0，2^64-1)</td><td align="center">极大整数值</td></tr><tr><td align="center">FLOAT</td><td align="center">4bytes</td><td align="center">(-3.402823466 E+38， 3.402823466351 E+38)</td><td align="center">0 和 (1.175494351 E38，3.402823466 E+38)</td><td align="center">单精度浮点数值</td></tr><tr><td align="center">DOUBLE</td><td align="center">8bytes</td><td align="center">(-1.7976931348623157 E+308， 1.7976931348623157 E+308)</td><td align="center">0 和 (2.2250738585072014 E-308， 1.7976931348623157 E+308)</td><td align="center">双精度浮点数值</td></tr><tr><td align="center">DECIMAL</td><td align="center"></td><td align="center">依赖于M(精度)和D(标度) 的值</td><td align="center">依赖于M(精度)和D(标度)的 值</td><td align="center">小数值(精确定点数)</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">年龄字段 <span class="comment">-- 不会出现负数, 而且人的年龄不会太大</span></span><br><span class="line">age tinyint unsigned</span><br><span class="line">分数 <span class="comment">-- 总分100分, 最多出现一位小数</span></span><br><span class="line">score <span class="keyword">double</span>(<span class="number">4</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">CHAR</td><td align="center">0-255 bytes</td><td align="center">定长字符串(需要指定长度)</td></tr><tr><td align="center">VARCHAR</td><td align="center">0-65535 bytes</td><td align="center">变长字符串(需要指定长度)</td></tr><tr><td align="center">TINYBLOB</td><td align="center">0-255 bytes</td><td align="center">不超过255个字符的二进制数据</td></tr><tr><td align="center">TINYTEXT</td><td align="center">0-255 bytes</td><td align="center">短文本字符串</td></tr><tr><td align="center">BLOB</td><td align="center">0-65 535 bytes</td><td align="center">二进制形式的长文本数据</td></tr><tr><td align="center">TEXT</td><td align="center">0-65 535 bytes</td><td align="center">长文本数据</td></tr><tr><td align="center">MEDIUMBLOB</td><td align="center">0-16 777 215 bytes</td><td align="center">二进制形式的中等长度文本数据</td></tr><tr><td align="center">MEDIUMTEXT</td><td align="center">0-16 777 215 bytes</td><td align="center">中等长度文本数据</td></tr><tr><td align="center">LONGBLOB</td><td align="center">0-4 294 967 295 bytes</td><td align="center">二进制形式的极大文本数据</td></tr><tr><td align="center">LONGTEXT</td><td align="center">0-4 294 967 295 bytes</td><td align="center">极大文本数据</td></tr></tbody></table><h5 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h5><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">范围</th><th align="center">格式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">DATE</td><td align="center">3</td><td align="center">1000-01-01 至 9999-12-31</td><td align="center">YYYY-MM-DD</td><td align="center">日期值</td></tr><tr><td align="center">TIME</td><td align="center">3</td><td align="center">-838:59:59 至 838:59:59</td><td align="center">HH:MM:SS</td><td align="center">时间值或持续时间</td></tr><tr><td align="center">YEAR</td><td align="center">1</td><td align="center">1901 至 2155</td><td align="center">YYYY</td><td align="center">年份值</td></tr><tr><td align="center">DATETIME</td><td align="center">8</td><td align="center">1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">混合日期和时间值</td></tr><tr><td align="center">TIMESTAMP</td><td align="center">4</td><td align="center">1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">混合日期和时间值，时间戳</td></tr></tbody></table><h3 id="DML-表内数据操作"><a href="#DML-表内数据操作" class="headerlink" title="DML-表内数据操作"></a>DML-表内数据操作</h3><p>DML英文全称是Data Manipulation Language(数据操作语言)，用来对数据库中表的数据记录进 行增、删、改操作。</p><h4 id="添加数据（INSERT）"><a href="#添加数据（INSERT）" class="headerlink" title="添加数据（INSERT）"></a>添加数据（INSERT）</h4><p>给全部字段添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2</span>，...);</span><br></pre></td></tr></table></figure><p>给某字段添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名<span class="number">1</span>，字段<span class="number">2</span>，...) <span class="keyword">value</span>(值<span class="number">1</span>，值<span class="number">2</span>，...);</span><br></pre></td></tr></table></figure><p>批量添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名[()] <span class="keyword">value</span>(),(),();</span><br></pre></td></tr></table></figure><h4 id="修改数据（UPDATE）"><a href="#修改数据（UPDATE）" class="headerlink" title="修改数据（UPDATE）"></a>修改数据（UPDATE）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span>，字段<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span>，...[<span class="keyword">where</span> 条件]; # 不加条件则指向所有数据</span><br></pre></td></tr></table></figure><h4 id="删除数据（DELETE）"><a href="#删除数据（DELETE）" class="headerlink" title="删除数据（DELETE）"></a>删除数据（DELETE）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件]; # 不加条件则指向所有数据</span><br></pre></td></tr></table></figure><h3 id="DQL-数据查询"><a href="#DQL-数据查询" class="headerlink" title="DQL-数据查询"></a>DQL-数据查询</h3><p>DQL英文全称是Data Query Language(数据查询语言)，数据查询语言，用来查询数据库中表的记录。</p><blockquote><p>基本语法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><p>完整语法进行拆分，分为以下几个部分：</p><ul><li>基本查询（不带任何条件）</li><li>条件查询（WHERE）</li><li>聚合函数（count、max、min、avg、sum）</li><li>分组查询（group by）</li><li>排序查询（order by）</li><li>分页查询（limit）</li></ul><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><p>查询多个字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>，字段<span class="number">2</span>，... <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><p>字段设置别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span> [<span class="keyword">as</span> 别名<span class="number">1</span>], 字段<span class="number">2</span> [<span class="keyword">as</span> 别名<span class="number">2</span>] ... <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span> [别名<span class="number">1</span>], 字段<span class="number">2</span> [别名<span class="number">2</span>] ... <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><p>去除重复记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段列表 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件列表;</span><br></pre></td></tr></table></figure><p>条件</p><blockquote><p>比较运算符</p></blockquote><table><thead><tr><th align="center">比较运算符</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>&gt;</code> <code>=</code> <code>&lt;</code></td><td align="center"><code>大于</code> <code>等于</code> <code>小于</code></td></tr><tr><td align="center"><code>&lt;&gt;</code></td><td align="center"><code>!=</code></td></tr><tr><td align="center">BETWEEN … AND …</td><td align="center">在某个范围之内(含最小、最大值)</td></tr><tr><td align="center">IN(…)</td><td align="center">在in之后的列表中的值，多选一</td></tr><tr><td align="center">LIKE 占位符</td><td align="center">模糊匹配(<code>_</code>匹配单个字符, <code>%</code>匹配任意个字符)</td></tr><tr><td align="center">is null</td><td align="center">是NULL</td></tr></tbody></table><blockquote><p>逻辑运算符</p></blockquote><table><thead><tr><th align="center">逻辑运算符</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>and</code></td><td align="center"><code>&amp;&amp;</code></td></tr><tr><td align="center"><code>or</code></td><td align="center"><code>||</code></td></tr><tr><td align="center"><code>not</code></td><td align="center"><code>!</code></td></tr></tbody></table><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p>将一列数据作为一个整体，进行纵向计算 。</p><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 聚合函数（字段列表） <span class="keyword">from</span> 表名; # <span class="keyword">NULL</span>值是不参与所有聚合函数运算的</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">count</td><td align="center">统计数量</td></tr><tr><td align="center">max</td><td align="center">最大值</td></tr><tr><td align="center">min</td><td align="center">最小值</td></tr><tr><td align="center">avg</td><td align="center">平均值</td></tr><tr><td align="center">sum</td><td align="center">求和</td></tr></tbody></table><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件] <span class="keyword">group</span> <span class="keyword">by</span> 分组字段名 [<span class="keyword">having</span> 分组后过滤条件];</span><br></pre></td></tr></table></figure><blockquote><p>where与having区别</p></blockquote><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组 之后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p style="color: #E6A23C">注意：</p><ul><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li><li>执行顺序: where &gt; 聚合函数 &gt; having</li><li>支持多字段分组, 具体语法为 : group by columnA,columnB</li></ul><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p> 语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span>，字段<span class="number">2</span> 排序方式<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>排序方式</p><ul><li>ASC：升序（默认值）</li><li>DESC：降序</li></ul><p style="color: #E6A23C">注意：</p><ul><li>如果是升序, 可以不指定排序方式ASC </li><li>如果是多字段排序，当字段1值相同时，才会根据字段2进行排序</li></ul><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 limit 起始索引，查询记录数; # 起始索引 <span class="operator">=</span>（页码 <span class="operator">-</span> <span class="number">1</span>）<span class="operator">*</span> 查询记录数</span><br></pre></td></tr></table></figure><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><h3 id="DCL-数据权限控制"><a href="#DCL-数据权限控制" class="headerlink" title="DCL-数据权限控制"></a>DCL-数据权限控制</h3><p>DCL英文全称是Data Control Language(数据控制语言)，用来管理数据库用户、控制数据库的访问权限。</p><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.user</span><br></pre></td></tr></table></figure><p>查询结果</p><p>其中 Host代表当前用户访问的主机, 如果为localhost, 仅代表只能够在当前本机访问，是不可以 远程访问的。 User代表的是访问该数据库的用户名。在MySQL中需要通过Host和User来唯一标识一 个用户</p><p>创建用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>; # 主机名可以使用 <span class="operator">%</span> 通配</span><br></pre></td></tr></table></figure><p>修改用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p>删除用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><table><thead><tr><th align="center">权限</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ALL, ALL PRIVILEGES</td><td align="center">所有权限</td></tr><tr><td align="center">SELECT</td><td align="center">查询数据</td></tr><tr><td align="center">INSERT</td><td align="center">插入数据</td></tr><tr><td align="center">UPDATE</td><td align="center">修改数据</td></tr><tr><td align="center">DELETE</td><td align="center">删除数据</td></tr><tr><td align="center">ALTER</td><td align="center">修改表</td></tr><tr><td align="center">DROP</td><td align="center">删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td align="center">CREATE</td><td align="center">创建数据库&#x2F;表</td></tr></tbody></table><p>上述只是简单罗列了常见的几种权限描述，其他权限描述及含义，可以直接参考<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html">官方文档</a>。</p><h5 id="查询权限"><a href="#查询权限" class="headerlink" title="查询权限"></a>查询权限</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>; # 多个权限之间，使用逗号分隔</span><br></pre></td></tr></table></figure><h5 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remove 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">from</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>; # 授权时， 数据库名和表名可以使用 <span class="operator">*</span> 进行通配，代表所有</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">CONCAT(S1,S2,…Sn)</td><td align="center">字符串拼接，将S1，S2，… Sn拼接成一个字符串</td></tr><tr><td align="center">LOWER(str)</td><td align="center">将字符串str全部转为小写</td></tr><tr><td align="center">UPPER(str)</td><td align="center">将字符串str全部转为大写</td></tr><tr><td align="center">LPAD(str,n,pad)</td><td align="center">左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td align="center">RPAD(str,n,pad)</td><td align="center">右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td align="center">TRIM(str)</td><td align="center">去掉字符串头部和尾部的空格</td></tr><tr><td align="center">SUBSTRING(str,start,len)</td><td align="center">返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">CEIL(x)</td><td align="center">向上取整</td></tr><tr><td align="center">FLOOR(x)</td><td align="center">向下取整</td></tr><tr><td align="center">MOD(x,y)</td><td align="center">返回x&#x2F;y的模</td></tr><tr><td align="center">RAND()</td><td align="center">返回0~1内的随机数</td></tr><tr><td align="center">ROUND(x,y)</td><td align="center">求参数x的四舍五入的值，保留y位小数</td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">CURDATE()</td><td align="center">返回当前日期</td></tr><tr><td align="center">CURTIME()</td><td align="center">返回当前时间</td></tr><tr><td align="center">NOW()</td><td align="center">返回当前日期和时间</td></tr><tr><td align="center">YEAR(date)</td><td align="center">获取指定date的年份</td></tr><tr><td align="center">MONTH(date)</td><td align="center">获取指定date的月份</td></tr><tr><td align="center">DAY(date)</td><td align="center">获取指定date的日期</td></tr><tr><td align="center">DATE_ADD(date, INTERVAL expr type)</td><td align="center">返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td></tr><tr><td align="center">DATEDIFF(date1,date2)</td><td align="center">返回起始时间date1 和 结束时间date2之间的天数</td></tr></tbody></table><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">IF(value , t , f)</td><td align="center">如果value为true，则返回t，否则返回f</td></tr><tr><td align="center">IFNULL(value1 , value2)</td><td align="center">如果value1不为空，返回value1，否则 返回value2</td></tr><tr><td align="center">CASE WHEN [ val1 ] THEN [res1] … ELSE [ default ] END</td><td align="center">如果val1为true，返回res1，… 否 则返回default默认值</td></tr><tr><td align="center">CASE [ expr ] WHEN [ val1 ] THEN [res1] … ELSE [ default ] END</td><td align="center">如果expr的值等于val1，返回 res1，… 否则返回default默认值</td></tr></tbody></table><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p><p>目的：保证数据库中数据的正确、有效性和完整性。</p><table><thead><tr><th align="center">约束</th><th align="center">描述</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">非空约束</td><td align="center">限制该字段的数据不能为null</td><td align="center">NOT NULL</td></tr><tr><td align="center">唯一约束</td><td align="center">保证该字段的所有数据都是唯一、不重复的</td><td align="center">UNIQUE</td></tr><tr><td align="center">主键约束</td><td align="center">主键是一行数据的唯一标识，要求非空且唯一</td><td align="center">PRIMARY KEY</td></tr><tr><td align="center">默认约束</td><td align="center">保存数据时，如果未指定该字段的值，则采用默认值</td><td align="center">DEFAULT</td></tr><tr><td align="center">检查约束(8.0.16版本之后)</td><td align="center">保证字段值满足某一个条件</td><td align="center">CHECK</td></tr><tr><td align="center">外键约束</td><td align="center">用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td align="center">FOREIGN KEY</td></tr></tbody></table><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>外键：用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</p><h3 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">    ···</span><br><span class="line">    [<span class="keyword">constraint</span>] [外键名称] <span class="keyword">foreign</span> key (外键字段名) <span class="keyword">references</span>  主表(主表列名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> key (外键字段名) <span class="keyword">references</span> 主表(主表列名);</span><br></pre></td></tr></table></figure><h3 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">foreign</span> key 外键名称;</span><br></pre></td></tr></table></figure><h4 id="删除-更新行为"><a href="#删除-更新行为" class="headerlink" title="删除&#x2F;更新行为"></a>删除&#x2F;更新行为</h4><p>添加了外键之后，再删除父表数据时产生的约束行为，我们就称为删除&#x2F;更新行为。具体的删除&#x2F;更新行</p><table><thead><tr><th align="center">行为</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">NO ACTION</td><td align="center">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不 允许删除&#x2F;更新。 (与 RESTRICT 一致) 默认行为</td></tr><tr><td align="center">RESTRICT</td><td align="center">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不 允许删除&#x2F;更新。 (与 NO ACTION 一致) 默认行为</td></tr><tr><td align="center">CASCADE</td><td align="center">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则 也删除&#x2F;更新外键在子表中的记录。</td></tr><tr><td align="center">SET NULL</td><td align="center">当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表 中该外键值为null（这就要求该外键允许取null）。</td></tr><tr><td align="center">SET DEFAULT</td><td align="center">父表有变更时，子表将外键列设置成一个默认的值 (Innodb不支持)</td></tr></tbody></table><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> key (外键字段) <span class="keyword">references</span> 主表名(主表字段名) <span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade;</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：</p><ul><li>一对多(多对一)</li><li>多对多</li><li>一对一</li></ul><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><ul><li>案例: 部门 与 员工的关系</li><li>关系: 一个部门对应多个员工，一个员工对应一个部门</li><li>实现: 在多的一方建立外键，指向一的一方的主键</li></ul><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><ul><li>案例: 学生 与 课程的关系</li><li>关系: 一个学生可以选修多门课程，一门课程也可以供多个学生选择</li><li>实现: 建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</li></ul><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><ul><li>案例: 用户 与 用户详情的关系</li><li>关系: 一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另 一张表中，以提升操作效率</li><li>实现: 在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</li></ul><h2 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询"></a>多表查询</h2><ul><li>连接查询<ul><li>内连接：相当于查询A、B交集部分数据</li><li>外连接：</li><li>左外连接：查询左表所有数据，以及两张表交集部分数据</li><li>右外连接：查询右表所有数据，以及两张表交集部分数据</li><li>自连接：当前表与自身的连接查询，自连接必须使用表别名</li></ul></li><li>子查询</li></ul><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>内连接查询的是两张表交集部分的数 据。(也就是绿色部分的数据)</p><p>内连接的语法分为两种: 隐式内连接、显式内连接。先来学习一下具体的语法结构。</p><p><strong>隐式内连接</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span>，表<span class="number">2</span> <span class="keyword">where</span> 条件 ···;</span><br></pre></td></tr></table></figure><p><strong>显式内连接</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> [<span class="keyword">inner</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件 ···;</span><br></pre></td></tr></table></figure><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
